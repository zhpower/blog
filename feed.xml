<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-07-22T10:45:35+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">学习笔记</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>kevin_zh</name></author><entry><title type="html">Git</title><link href="http://localhost:4000/blog/jekyll/2024-04-27-git.html" rel="alternate" type="text/html" title="Git" /><published>2024-04-27T00:00:00+08:00</published><updated>2024-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/git</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2024-04-27-git.html"><![CDATA[<h1 id="比较不同分支的某个文件">比较不同分支的某个文件</h1>

<p>在Git中，你可以使用<code class="language-plaintext highlighter-rouge">git diff</code>命令来比较不同分支中某个文件的差异。以下是具体的命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff &lt;branch1&gt;..&lt;branch2&gt; <span class="nt">--</span> &lt;file&gt;
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">&lt;branch1&gt;</code>和<code class="language-plaintext highlighter-rouge">&lt;branch2&gt;</code>是你想要比较的两个分支的名称，<code class="language-plaintext highlighter-rouge">&lt;file&gt;</code>是你想要比较的文件的路径。这个命令会显示出<code class="language-plaintext highlighter-rouge">&lt;branch1&gt;</code>和<code class="language-plaintext highlighter-rouge">&lt;branch2&gt;</code>之间<code class="language-plaintext highlighter-rouge">&lt;file&gt;</code>的差异。</p>

<p>例如，如果你想要比较<code class="language-plaintext highlighter-rouge">master</code>分支和<code class="language-plaintext highlighter-rouge">dev</code>分支中<code class="language-plaintext highlighter-rouge">README.md</code>文件的差异，你可以使用以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff master..dev <span class="nt">--</span> README.md
</code></pre></div></div>

<p>这个命令会显示出<code class="language-plaintext highlighter-rouge">master</code>分支和<code class="language-plaintext highlighter-rouge">dev</code>分支中<code class="language-plaintext highlighter-rouge">README.md</code>文件的差异。希望这个信息对你有所帮助！</p>

<h1 id="修改已经提交的commit注释">修改已经提交的commit注释</h1>

<p>当你需要修改已经提交的 Git commit 注释时，有几种方法可以做到。以下是两种常见的情况以及对应的操作步骤：</p>

<ol>
  <li><strong>修改最后一次提交的注释</strong>：
    <ul>
      <li>首先，如果你只想修改最后一次提交的注释，可以执行以下步骤：
        <ol>
          <li>进入你的 Git 项目目录。</li>
          <li>运行命令：<code class="language-plaintext highlighter-rouge">git commit --amend</code></li>
          <li>进入编辑模式，修改注释。</li>
          <li>保存并退出编辑模式。</li>
          <li>运行命令：<code class="language-plaintext highlighter-rouge">git log</code> 来查看提交记录。</li>
        </ol>
      </li>
    </ul>
  </li>
  <li><strong>修改之前提交的注释</strong>：
    <ul>
      <li>如果你需要修改之前的提交注释，可以按照以下步骤操作：
        <ol>
          <li>运行命令：<code class="language-plaintext highlighter-rouge">git rebase -i HEAD~n</code>，其中 <code class="language-plaintext highlighter-rouge">n</code> 是你想要修改的提交之前的次数。</li>
          <li>在编辑模式中，将你需要修改的注释前的 <code class="language-plaintext highlighter-rouge">pick</code> 改为 <code class="language-plaintext highlighter-rouge">edit</code>。</li>
          <li>保存并退出编辑模式。</li>
          <li>运行命令：<code class="language-plaintext highlighter-rouge">git commit --amend</code>，修改你真正需要的注释。</li>
          <li>运行命令：<code class="language-plaintext highlighter-rouge">git rebase --continue</code>，完成变基。</li>
        </ol>
      </li>
    </ul>
  </li>
  <li><strong>已经将代码 push 到远程仓库</strong>：
    <ul>
      <li>如果你已经将代码 push 到远程仓库，可以先从远程仓库拉取最新版本，然后按照上述步骤修改注释。最后，使用强制 push 将修改后的提交推送到远程仓库：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git push --force origin master
</code></pre></div>        </div>
      </li>
      <li>请注意，在强制 push 之前，确保没有其他人提交了新的代码到远程仓库，以免覆盖其他人的更改。</li>
    </ul>
  </li>
</ol>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[比较不同分支的某个文件]]></summary></entry><entry><title type="html">Camera</title><link href="http://localhost:4000/blog/jekyll/2024-03-22-Camera.html" rel="alternate" type="text/html" title="Camera" /><published>2024-03-22T00:00:00+08:00</published><updated>2024-03-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/Camera</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2024-03-22-Camera.html"><![CDATA[<p>相机（Camera）的功能模块和处理流程是一个复杂且精细的系统，涉及硬件和软件多个方面。以下是对相机功能模块和处理流程的详细介绍：</p>

<h3 id="功能模块">功能模块</h3>

<ol>
  <li><strong>镜头（Lens）</strong>
    <ul>
      <li><strong>作用</strong>：收集光线并将其聚焦到图像传感器上。</li>
      <li><strong>组成</strong>：通常包括多个玻璃或塑料镜片，可能具有光学防抖（OIS）和自动对焦（AF）功能。</li>
    </ul>
  </li>
  <li><strong>图像传感器（Image Sensor）</strong>
    <ul>
      <li><strong>作用</strong>：将光信号转换为电信号。</li>
      <li><strong>类型</strong>：常见的有CCD（Charge-Coupled Device）和CMOS（Complementary Metal-Oxide-Semiconductor）传感器。</li>
      <li><strong>参数</strong>：包括分辨率、感光度（ISO）、动态范围等。</li>
    </ul>
  </li>
  <li><strong>图像信号处理器（ISP - Image Signal Processor）</strong>
    <ul>
      <li><strong>作用</strong>：处理图像传感器输出的原始数据，进行颜色校正、白平衡、降噪等处理。</li>
      <li><strong>功能</strong>：包括自动曝光（AE）、自动白平衡（AWB）、自动对焦（AF）、降噪（Denoising）、去马赛克（Demosaicing）等。</li>
    </ul>
  </li>
  <li><strong>控制器（Controller）</strong>
    <ul>
      <li><strong>作用</strong>：控制相机的各种操作，如快门速度、光圈大小、ISO设置等。</li>
      <li><strong>组成</strong>：通常包含微处理器或嵌入式控制单元。</li>
    </ul>
  </li>
  <li><strong>存储器（Memory）</strong>
    <ul>
      <li><strong>作用</strong>：存储图像数据、固件和临时处理数据。</li>
      <li><strong>类型</strong>：包括内置存储和可扩展的存储卡（如SD卡）。</li>
    </ul>
  </li>
  <li><strong>电源管理模块（Power Management）</strong>
    <ul>
      <li><strong>作用</strong>：为相机各个组件提供电力，管理电池的充放电。</li>
    </ul>
  </li>
  <li><strong>接口模块（Interface）</strong>
    <ul>
      <li><strong>作用</strong>：提供相机与外部设备的连接接口，如USB、HDMI、Wi-Fi、蓝牙等。</li>
    </ul>
  </li>
</ol>

<p><img src="/blog/assets/camera/camera.svg" alt="" /></p>

<h3 id="处理流程">处理流程</h3>

<ol>
  <li><strong>图像捕获（Image Capture）</strong>
    <ul>
      <li><strong>过程</strong>：光线通过镜头到达图像传感器，传感器将光信号转换为电信号。</li>
      <li><strong>注意事项</strong>：对焦、曝光和白平衡的调整。</li>
    </ul>
  </li>
  <li><strong>信号读取（Signal Readout）</strong>
    <ul>
      <li><strong>过程</strong>：图像传感器将电信号传递给图像信号处理器（ISP）。</li>
      <li><strong>注意事项</strong>：确保数据的完整性和准确性。</li>
    </ul>
  </li>
  <li><strong>图像处理（Image Processing）</strong>
    <ul>
      <li><strong>去马赛克（Demosaicing）</strong>：将传感器输出的拜耳图像转换为全彩图像。</li>
      <li><strong>降噪（Denoising）</strong>：减少图像中的噪点。</li>
      <li><strong>白平衡（White Balance）</strong>：校正图像的色温。</li>
      <li><strong>颜色校正（Color Correction）</strong>：调整图像的色彩表现。</li>
      <li><strong>伽马校正（Gamma Correction）</strong>：调整图像的亮度和对比度。</li>
    </ul>
  </li>
  <li><strong>图像压缩（Image Compression）</strong>
    <ul>
      <li><strong>过程</strong>：将处理过的图像数据压缩成JPEG、PNG等格式以节省存储空间。</li>
      <li><strong>技术</strong>：使用各种压缩算法，如JPEG压缩、HEIF压缩等。</li>
    </ul>
  </li>
  <li><strong>图像存储（Image Storage）</strong>
    <ul>
      <li><strong>过程</strong>：将压缩后的图像数据存储在内置存储或存储卡上。</li>
      <li><strong>注意事项</strong>：数据的存储位置、存储格式和文件管理。</li>
    </ul>
  </li>
  <li><strong>显示和预览（Display and Preview）</strong>
    <ul>
      <li><strong>过程</strong>：将处理后的图像实时显示在取景器或显示屏上，供用户预览和构图。</li>
      <li><strong>功能</strong>：包括实时预览、直方图显示、对焦峰值显示等。</li>
    </ul>
  </li>
  <li><strong>图像传输（Image Transfer）</strong>
    <ul>
      <li><strong>过程</strong>：通过USB、Wi-Fi、蓝牙等接口将图像传输到外部设备，如计算机、手机或云存储。</li>
      <li><strong>注意事项</strong>：传输速度和数据完整性。</li>
    </ul>
  </li>
</ol>

<h3 id="参考资料">参考资料</h3>

<ul>
  <li><a href="https://developer.android.com/reference/android/hardware/Camera">Camera Hardware and Software Architecture</a></li>
  <li><a href="https://www.cambridgeincolour.com/tutorials/camera-sensor-size.htm">Digital Camera Workflow and Processing</a></li>
  <li><a href="https://www.digikey.com/en/articles/image-signal-processing-in-digital-cameras">Image Signal Processing in Digital Cameras</a></li>
</ul>

<p>通过这些模块和流程的协同工作，相机能够高效、准确地捕捉和处理图像，提供高质量的照片和视频。</p>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[相机（Camera）的功能模块和处理流程是一个复杂且精细的系统，涉及硬件和软件多个方面。以下是对相机功能模块和处理流程的详细介绍：]]></summary></entry><entry><title type="html">linux dev misc</title><link href="http://localhost:4000/blog/jekyll/2022-05-02-App_misc.html" rel="alternate" type="text/html" title="linux dev misc" /><published>2022-05-02T00:00:00+08:00</published><updated>2022-05-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/App_misc</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2022-05-02-App_misc.html"><![CDATA[<h1 id="pthread_mutex_tpthread_cond_t">pthread_mutex_t&amp;pthread_cond_t</h1>

<p>函数定义：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">pthread_cond_wait</span><span class="o">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="o">,</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="o">)</span>

<span class="kt">int</span> <span class="nf">pthread_cond_broadcast</span><span class="o">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="o">)</span>
</code></pre></div></div>

<p>函数说明：</p>

<p>pthread_cond_wait ：有两个输入参数，一个是pthread_cond_t，是函数将要等待的信号，另一个是 pthread_mutex_t，一个互斥锁。<span style="color:red">用于对信号量进行保护，防止多个线程同时对其进行操作</span>。在线程开始等待信号量前，必须由本线程对互斥锁进行锁定，然后pthread_cond_wait会更新条件等待队列，并且释放互斥量，允许其他线程进行访问；当cond 满足条件允许线程继续执行时，wait_cond也会先对mutex 进行锁定，对cond进行处理，然后再允许线程继续运行。所以pthread_cond_wait() 后的pthread_mutex_unlock()还是必要的。</p>

<p><img src="/blog/assets/linux_dev_misc/mutex.png" alt="mutex_cond" /></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">static</span> <span class="n">pthread_mutex_t</span> <span class="n">mtx</span> <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
<span class="k">static</span> <span class="n">pthread_cond_t</span> <span class="n">cond</span> <span class="o">=</span> <span class="n">PTHREAD_COND_INITIALIZER</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">func_1</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">){</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 start"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 lock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 wait cond"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 unlock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 end"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">func_2</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">){</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 start"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 lock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 wait cond"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 unlock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 end"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">pthread_t</span> <span class="n">tid1</span><span class="p">,</span> <span class="n">tid2</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main create thread"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">func_1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">func_2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main boradcast signal"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_cond_broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
    <span class="c1">// pthread_cond_signal(&amp;cond);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main join thread"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main end"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="char-a-vs-char-a">char *a vs char a[]</h1>

<p>首先要搞清楚编译程序占用的内存的分区形式：</p>

<p>一、预备知识—程序的内存分配</p>

<p>一个由c/C++编译的程序占用的内存分为以下几个部分:</p>

<ul>
  <li>栈区（stack）—由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>
  <li>堆区（heap）—一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。</li>
  <li>全局区（静态区）（static）—全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li>
  <li>字符常量区—常量字符串就是放在这里的。程序结束后由系统释放。</li>
  <li>程序代码区</li>
</ul>

<p>这是一个别人写的，非常详细</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>    <span class="c1">//全局初始化区</span>
<span class="kt">char</span> <span class="n">p1</span><span class="p">;</span>    <span class="c1">//全局未初始化区</span>
<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>            <span class="c1">//栈</span>
    <span class="kt">char</span> <span class="n">s</span><span class="p">[]</span><span class="o">=</span><span class="s">"abc"</span><span class="p">;</span>   <span class="c1">//栈</span>
    <span class="kt">char</span> <span class="n">p2</span><span class="p">;</span>          <span class="c1">//栈</span>
    <span class="kt">char</span> <span class="n">p3</span><span class="o">=</span><span class="s">"123456"</span><span class="p">;</span> <span class="c1">//123456\0在常量区，p3在栈上。</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">//全局（静态）初始化区</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">//分配得来得10和20字节的区域就在堆区。</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="s">"123456"</span><span class="p">);</span> <span class="c1">//123456\0放在常量区，编译器可能会将它与p3指向的"123456"优化成一个地方。</span>
<span class="p">}</span>
</code></pre></div></div>

<p>首先，我们要知道</p>

<ol>
  <li>char *a中的a是个指向字符类型的指针，这是一个变量；</li>
  <li>char a[]中的a也是一个指向字符类型的指针，但它是一个常量，<span style="color:red">常量是不能再给它赋值的</span>，就像比不能写 3=2 这样的代码来给3赋值, <span style="color:Red">但可以对她指向的内存内容进行修改</span>。</li>
</ol>

<p>通过阅读我们可以知道，char * a=“abc”和char a[]=”abc”在内存中存放是有差别的，</p>

<ol>
  <li>
    <p>char *a=“abc”中的“abc”是存放于<strong>字符常量区的，指针a只是指向了这个地址</strong>；</p>
  </li>
  <li>
    <p>char a[]=”abc”中的“abc”其实是<span style="color:red">放在栈中的</span>，它是字符常量区中“abc”的一份拷贝。</p>
  </li>
</ol>

<p>看看下面这段代码你就明白了</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">a1</span>   <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    <span class="kt">char</span>   <span class="n">a2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">a3</span>   <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    <span class="kt">char</span>   <span class="n">a4</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"char * a:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a1</span><span class="p">);</span><span class="c1">//打印a1的值 </span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"char a2[]:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">a2</span><span class="p">);</span><span class="c1">//打印a2的值 </span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"char *a3:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a3</span><span class="p">);</span><span class="c1">//打印a2的值 </span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"char a4[]:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">a4</span><span class="p">);</span><span class="c1">//打印a2的值 </span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>我在这段代码里声明了两个字符指针变量、两个数组常量指针，代码执行结果如下：</p>

<p>显而易见字符指针变量a 和a3的值是一样的，这说明它们指向同一块内存，这块内存就是上文所说的<strong>字符常量区</strong>；</p>

<p>字符数组指针a2和a3的值不同且相差4字节，这说明它们指向的内存是不相同的，它们的“abc”其实是对字符常量区中“abc”的一份拷贝，并且数据是存放在栈中的，至于它们的地址相差四个字节，是因为字符数组中在结尾加了一个结束符——‘\0’（也称为NUL）。</p>

<p>至于之前说的“不能直接将一个字符串常量赋值给字符数组”可以这样理解：的确是不能直接赋值，但可以通过复制以后再赋值呀，即把字符串拷贝到栈中，然后给数组指针赋值！代码的话就是：char a[]=“abc”。</p>

<p>我们再来考虑一个问题：能不能修改char *a指向的字符常量区的值呢？
代码如下：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">a</span><span class="o">=</span><span class="s">"abc"</span><span class="p">;</span>
    <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="sc">'b'</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="n">a</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
<span class="p">}</span>

</code></pre></div></div>
<p>我将指针a所指向的第一个字符——‘a’修改为字符‘b’。
结果程序崩溃了</p>

<p>这说明<strong>字符常量区的数据是不可以修改的</strong>！为什么呢？因为在你的程序中可能有很多个类似于char *a这样的指针变量在使用到了字符常量区的“abc”，如果你在这里通过指针修改了“abc”的值，那么程序中使用“abc”的其他地方就变得不确定了！</p>

<p>其实如果你翻看了《c和指针》你还会发现，在K&amp;R C标准中，这里的修改操作是可以的，因为在该标准中字符串常量是分开存储的，而不是只存储在一个地方。</p>

<p>怎么样，有没有感受到C语言指针的危险和魅力所在？</p>

<p><span style="background: yellow;">char a[ ] 的应用场景:</span></p>

<p>编译器首先判断数组的容量，然后<strong>分配一片内存来存储数组</strong>的每个元素。如果是字符串赋值方式，则容量是strlen(字符串)+1, 赋值时在尾部加 0</p>

<p>char a[ ] <strong>必须</strong>在申明的同时给它赋值， 否则编译器无法知道应该分配多大的内存给该数组</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="c1">//如下操作会导致 编译错误，编译器不能知道d这个数组的大小</span>
     <span class="kt">char</span> <span class="n">d</span><span class="p">[];</span>
     <span class="kt">char</span> <span class="n">d</span><span class="p">[]</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</code></pre></div></div>

<p>char a[ ]的两种赋值方式， char a[ ]的优点</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"dfdsfsdfas"</span><span class="p">;</span>  <span class="c1">// char a[]的优点 直接把字符串复制给某个数组，长度+1</span>
<span class="kt">char</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'a'</span><span class="p">,</span><span class="sc">'a'</span><span class="p">,</span><span class="sc">'b'</span><span class="p">,</span><span class="sc">'c'</span><span class="p">};</span>  <span class="c1">// 不会有结尾符\0</span>
</code></pre></div></div>

<p>sizeof(a) 返回的是 <strong>a数组容量</strong> * <strong>sizeof(a[0])</strong></p>

<p><span style="background: yellow;">char *s = “dfdsf” 的应该场景:</span></p>

<p>把s指向内存的字符串常量区，不能通过s[index] 来修改它, 修改则会crash
sizeof(s) 返回的是 <strong>sizeof(char *)</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cm">/*-----------------------------------------------------------------------------
 * char b[], 遵循 “右左原则 ” 来查看变量的类型， 所以它是一个数组，字符数组
 *           它有两种赋值方式
 *            1. char b[] = {'1','2','3'};
 *            2. char b[] = "123";  等价与  char b[4] = {'1','2','3', 0};
 *------------------------------------------------------------------------------*/</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">a</span>   <span class="o">=</span> <span class="s">"12345"</span><span class="p">;</span>    <span class="c1">// a 是指针， 指向了字符常量区中"12345"的地址</span>
    <span class="kt">char</span>  <span class="n">b</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"12345"</span><span class="p">;</span>    <span class="c1">// b 是首先是数组，存储的元素是{'1', '2','3','4', '5', 0}; </span>
    <span class="kt">char</span> <span class="n">bb</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'1'</span><span class="p">,</span> <span class="sc">'2'</span><span class="p">,</span><span class="sc">'3'</span><span class="p">,</span><span class="sc">'4'</span><span class="p">,</span> <span class="sc">'5'</span><span class="p">};</span> <span class="c1">// bb 是没有结尾符的 </span>
    <span class="kt">char</span> <span class="n">bbb</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'1'</span><span class="p">,</span> <span class="sc">'2'</span><span class="p">,</span><span class="sc">'3'</span><span class="p">,</span><span class="sc">'4'</span><span class="p">,</span> <span class="sc">'5'</span><span class="p">};</span>
    <span class="kt">int</span>   <span class="n">c</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>

    <span class="c1">// char a[ ] 需要在申明的同时给它赋值， 否则编译器无法知道应该分配多大的内存给该数组</span>
    <span class="c1">// 编译错误，编译器不能知道d这个数组的大小</span>
    <span class="c1">// char d[];</span>
    <span class="c1">// char d[] = a;</span>

    <span class="c1">// 编译错误 把指针赋值数组</span>
    <span class="c1">// b = a;</span>

    <span class="c1">//sizeof 返回变量占用的内存大小</span>
    <span class="c1">// 数组的sizeof 计算是 sizeof(成员)×数目</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"sizeof(a):%ld sizeof(b):%ld sizeof(bb):%ld sizeof(bbb):%ld sizeof(c):%ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> \
            <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">bb</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">bbb</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>

    <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'g'</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s():%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">);</span>


    <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'r'</span><span class="p">;</span> <span class="c1">// 修改字符常量区会导致 crash</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s():%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">);</span>

    <span class="n">a</span> <span class="o">=</span> <span class="s">"dfasdfa"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出如下:</p>
<pre><code class="language-C">sizeof(a):8 sizeof(b):6 sizeof(bb):5 sizeof(bbb):5 sizeof(c):20
main():23
Segmentation fault (core dumped)
</code></pre>

<h1 id="mmap">mmap()</h1>

<p>以下是mmap()函数实现的基本过程：</p>

<ol>
  <li>kernel在当前进程的虚拟地址空间中分配满足条件的虚拟地址块</li>
  <li>分配vm_area_struct结构来管理该虚拟地址块，并插入到进程的虚拟地址区域链表中</li>
  <li>通过文件描述符，找到对应设备驱动注册的file_operations,并调用它的mmap函数。</li>
  <li>在该文件描述符的mmap中，通过调用remap_pfn_range函数来建立页表，并记录文件地址和虚拟地址的映射关系。 此时只是虚拟地址，并没有关联到内存。</li>
  <li>进程在读写该地址时，触发缺页，从而分配内存，载入文件数据，建立虚拟地址与内存的映射。</li>
</ol>

<h1 id="fork-的进程空间">fork() 的进程空间</h1>
<p>当父进程使用 <code class="language-plaintext highlighter-rouge">malloc</code> 分配内存后，这块内存可以被它 <code class="language-plaintext highlighter-rouge">fork</code> 的子进程访问。让我详细解释一下。</p>

<ol>
  <li><strong>内存分配</strong>：
    <ul>
      <li>父进程使用 <code class="language-plaintext highlighter-rouge">malloc</code> 分配的内存位于堆（heap）中。这块内存用于存储动态分配的数据，例如字符串、数组等。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">fork</code> 过程</strong>：
    <ul>
      <li>当父进程调用 <code class="language-plaintext highlighter-rouge">fork</code> 创建子进程时，操作系统会复制父进程的地址空间。</li>
      <li>这包括代码段、数据段、堆和栈。但是，实际的复制并不会立即发生。</li>
    </ul>
  </li>
  <li><strong>Copy-on-Write（写时复制）</strong>：
    <ul>
      <li>写时复制是一种优化策略，用于避免不必要的内存复制。</li>
      <li>在 <code class="language-plaintext highlighter-rouge">fork</code> 之后，父子进程共享相同的物理内存页，但这些页被标记为只读。</li>
      <li>如果父进程或子进程尝试修改这些共享的内存页，操作系统会创建一个副本，使得父子进程之间不会相互影响。</li>
      <li>因此，父进程和子进程仍然可以访问 <code class="language-plaintext highlighter-rouge">fork</code> 之前分配的所有数据，包括使用 <code class="language-plaintext highlighter-rouge">malloc</code> 分配的堆内存。</li>
    </ul>
  </li>
</ol>

<p>总之，父进程使用 <code class="language-plaintext highlighter-rouge">malloc</code> 分配的内存可以被它 <code class="language-plaintext highlighter-rouge">fork</code> 的子进程访问，但在修改时会进行复制，以保持数据的独立性¹²。</p>

<p>如果您还有其他问题，欢迎继续提问！ 😊</p>]]></content><author><name>Kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[pthread_mutex_t&amp;pthread_cond_t]]></summary></entry><entry><title type="html">位运算</title><link href="http://localhost:4000/blog/jekyll/2022-04-27-bit.html" rel="alternate" type="text/html" title="位运算" /><published>2022-04-27T00:00:00+08:00</published><updated>2022-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/bit</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2022-04-27-bit.html"><![CDATA[<h1 id="1位运算概述">1.位运算概述</h1>

<p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、\/)都是叫位运算，即将符号位共同参与运算的运算。</p>

<p>口说无凭，举一个简单的例子来看下 CPU 是如何进行计算的，比如这行代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">35</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">47</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</code></pre></div></div>
<p>计算两个数的和，因为在计算机中都是以二进制来进行运算，所以上面我们所给的 int 变量会在机器内部先转换为二进制在进行相加：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>35:  0 0 1 0 0 0 1 1
47:  0 0 1 0 1 1 1 1
————————————————————
82:  0 1 0 1 0 0 1 0
</code></pre></div></div>

<p>所以，相比在代码中直接使用(<code class="language-plaintext highlighter-rouge">+、-、*、/ </code>)运算符，合理的运用位运算更能显著提高代码在机器上的执行效率。</p>

<h1 id="2位运算概览">2.位运算概览</h1>

<p>![[image-20230313173955848.png]]</p>

<h1 id="3与运算符">3.与运算符&amp;</h1>

<p>定义：参加运算的两个数据，按二进制位进行”与”运算。</p>

<h2 id="31-运算规则">3.1 运算规则：</h2>

<p><code class="language-plaintext highlighter-rouge">0&amp;0=0  0&amp;1=0  1&amp;0=0  1&amp;1=1</code></p>

<p>总结：两位同时为1，结果才为1，否则结果为0。</p>

<p>例如：3&amp;5 即 0000 0011&amp; 0000 0101 = 0000 0001，因此 3&amp;5 的值得1。</p>

<p>注意：负数按补码形式参加按位与运算。</p>

<h2 id="32-与运算符用途">3.2 与运算符用途</h2>

<h3 id="321清零">3.2.1清零</h3>

<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>

<h3 id="322取一个数的指定位">3.2.2取一个数的指定位</h3>

<p>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p>

<h3 id="323判断奇偶">3.2.3判断奇偶</h3>

<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a \&amp; 1) == 0)代替if (a \% 2 == 0)来判断a是不是偶数。</p>

<h1 id="4-或运算符">4 或运算符|</h1>

<p>定义：参加运算的两个对象，按二进制位进行”或”运算。</p>

<h2 id="41运算规则">4.1运算规则：</h2>

<table>
  <tbody>
    <tr>
      <td>0</td>
      <td>0=0  0</td>
      <td>1=1  1</td>
      <td>0=1  1</td>
      <td>1=1</td>
    </tr>
  </tbody>
</table>

<p>总结：参加运算的两个对象只要有一个为1，其值为1。</p>

<table>
  <tbody>
    <tr>
      <td>例如：3</td>
      <td>5即 0000 0011</td>
      <td>0000 0101 = 0000 0111，因此，3</td>
      <td>5的值得7。　</td>
    </tr>
  </tbody>
</table>

<p>注意：负数按补码形式参加按位或运算。</p>

<h2 id="42或运算的用途">4.2或运算的用途：</h2>

<h3 id="421常用来对一个数据的某些位设置为1">4.2.1常用来对一个数据的某些位设置为1</h3>

<table>
  <tbody>
    <tr>
      <td>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X</td>
      <td>Y=1010 1111）即可得到。</td>
    </tr>
  </tbody>
</table>

<h1 id="5异或运算符">5异或运算符^</h1>

<p>定义：参加运算的两个数据，按二进制位进行”异或”运算。</p>

<h2 id="51-运算规则">5.1 运算规则：</h2>

<p>0^0=0  0^1=1  1^0=1  1^1=0</p>

<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</p>

<p>异或的几条性质:</p>

<ul>
  <li>1、交换律</li>
  <li>2、结合律 (a^b)^c == a^(b^c)</li>
  <li>3、对于任何数x，都有 x^x=0，x^0=x</li>
  <li>4、自反性: a^b^b=a^0=a;</li>
</ul>

<h2 id="52-异或运算的用途">5.2 异或运算的用途：</h2>

<h3 id="521翻转指定位">5.2.1翻转指定位</h3>

<p>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p>

<h3 id="522与0相异或值不变">5.2.2与0相异或值不变</h3>

<p>例如：1010 1110 ^ 0000 0000 = 1010 1110</p>

<h3 id="523交换两个数">5.2.3交换两个数</h3>

<pre><code class="language-C">void Swap(int &amp;a, int &amp;b){  
    if (a != b){  
        a ^= b;  
        b ^= a;  
        a ^= b;  
    }  
}  
</code></pre>

<h1 id="6取反运算符">6取反运算符~</h1>

<p>定义：参加运算的一个数据，按二进制进行”取反”运算。</p>

<h2 id="61-运算规则">6.1 运算规则：　</h2>

<p>~1=0
~0=1</p>

<p>总结：对一个二进制数按位取反，即将0变1，1变0。</p>

<h2 id="62-取反运算符的用途">6.2 取反运算符的用途：</h2>

<h3 id="621使一个数的最低位为零">6.2.1使一个数的最低位为零</h3>

<p>使a的最低位为0，可以表示为：a &amp; ~1。~1的值为 1111 1111 1111 1110，再按”与”运算，最低位一定为0。因为” ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p>

<h1 id="7左移运算符">7.左移运算符«</h1>

<p>定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p>

<p>设 a=1010 1110，a = a« 2 将a的二进制位左移2位、右补0，即得a=1011 1000。</p>

<h2 id="71-1-左移-1位-相当于乘2">7.1 «1 左移 1位 相当于乘2</h2>
<p>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>

<h1 id="8右移运算符">8右移运算符»</h1>

<p>定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p>

<p>例如：a=a»2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。</p>

<h2 id="811-右移一位相当于除2">8.1 »1 右移一位相当于除2</h2>
<p>操作数每右移一位，相当于该数除以2。</p>

<h1 id="9复合赋值运算符">9复合赋值运算符</h1>

<p>位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是：</p>

<p>&amp;=        例：a&amp;=b    相当于     a=a&amp;b</p>

<table>
  <tbody>
    <tr>
      <td>=        例：a</td>
      <td>=b    相当于     a=a</td>
      <td>b</td>
    </tr>
  </tbody>
</table>

<p>&gt;&gt;=      例：a»=b   相当于     a=a»b</p>

<p>«=      例：a«=b     相当于      a=a« b</p>

<p>^=        例：a^=b    相当于   a=a^b</p>

<p>运算规则：和前面讲的复合赋值运算符的运算规则相似。</p>

<p>不同长度的数据进行位运算：如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。</p>

<p>以”与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行”与运算”，右端对齐后，左边不足的位依下面三种情况补足，</p>

<ul>
  <li>1）如果整型数据为正数，左边补16个0。</li>
  <li>2）如果整型数据为负数，左边补16个1。</li>
  <li>3）如果整形数据为无符号数，左边也补16个0。
如：long a=123；int b=1；计算a&amp; b。</li>
</ul>

<p>如：long a=123；int b=-1；计算a&amp; b。</p>

<p>如：long a=123；unsigned intb=1；计算a &amp; b。</p>]]></content><author><name>kevin_zh</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1.位运算概述]]></summary></entry><entry><title type="html">ffmpeg命令</title><link href="http://localhost:4000/blog/jekyll/2021-04-27-ffmpeg.html" rel="alternate" type="text/html" title="ffmpeg命令" /><published>2021-04-27T00:00:00+08:00</published><updated>2021-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/ffmpeg</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2021-04-27-ffmpeg.html"><![CDATA[<h3 id="01-视频分割">01. 视频分割</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-ss</span> 00:00:00 <span class="nt">-i</span> input.mp4 <span class="nt">-c</span> copy <span class="nt">-t</span> 60 output.mp4
</code></pre></div></div>
<p>-ss 表示视频分割的起始时间，-t 表示分割时长，同时也可以用 00:01:00表示</p>

<p>注意-ss 要放在 -i 之前</p>

<h3 id="02-视频区域裁剪">02. 视频区域裁剪：</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> 3.mkv <span class="nt">-filter_complex</span> <span class="nv">crop</span><span class="o">=</span>1024:50:0:550 <span class="nt">-y</span> 4.mkv  
</code></pre></div></div>
<h3 id="03-视频预览">03. 视频预览</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffplay 3.mkv <span class="nt">-vf</span> <span class="nv">crop</span><span class="o">=</span>1024:50:0:550  
</code></pre></div></div>
<h3 id="04-视频放大缩小">04. 视频放大,缩小</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg  <span class="nt">-i</span> 2.mp4 <span class="nt">-vf</span> <span class="s2">"scale=1280:64"</span> 4.mp4
</code></pre></div></div>
<p>scale =w:h 表示放大后的大小</p>

<h3 id="05-列出所有format">05. 列出所有format</h3>
<p>list all pix format</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-pix_fmts</span> 
</code></pre></div></div>
<h3 id="06-图片转换">06. 图片转换</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-itemp</span>.jpg-s1024x680-pix_fmtyuvj420p9.yuv
ffmpeg.exe <span class="nt">-i</span> agf-dog-1280x960.jpg  <span class="nt">-vf</span> <span class="nv">scale</span><span class="o">=</span>1920:1080 agf-dog-1920x1080.jpg
</code></pre></div></div>
<h3 id="07-视频format转换">07. 视频format转换</h3>

<p>YUV -&gt; RGB</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-s</span> 360x270 <span class="nt">-pix_fmt</span> yuv420p <span class="nt">-i</span> 2_test_360x270_50.yuv <span class="nt">-pix_fmt</span> rgb24 aaaa.rgb  
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-s</span> 640x480 <span class="nt">-pix_fmt</span> nv12 <span class="nt">-i</span> 640x480_1.jpg <span class="nt">-vf</span> <span class="nv">scale</span><span class="o">=</span>640:480,setsar<span class="o">=</span>1:1 640x480_1_nv12.yuv <span class="nt">-hide_banner</span>  
</code></pre></div></div>
<h3 id="08-视频叠加">08. 视频叠加</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input1 <span class="nt">-i</span> input2 <span class="nt">-filter_complex</span> <span class="nv">overlay</span><span class="o">=</span>x:youtput
</code></pre></div></div>
<h3 id="09-视频旋转">09. 视频旋转</h3>

<p>mp4向左旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-metadata</span>:s:v <span class="nv">rotate</span><span class="o">=</span><span class="s2">"90"</span> <span class="nt">-codec</span> copy outut.mp4
</code></pre></div></div>
<p>mp4向右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-metadata</span>:s:v <span class="nv">rotate</span><span class="o">=</span><span class="s2">"-90"</span> <span class="nt">-codec</span> copy outut.mp4
</code></pre></div></div>
<h3 id="10-视频镜像">10. 视频镜像</h3>
<p>mp4左右镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-vf</span> <span class="s2">"hflip"</span> outut.mp4
</code></pre></div></div>
<p>mp4上下镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-vf</span> <span class="s2">"vflip"</span> outut.mp4
</code></pre></div></div>
<h3 id="11-mp4转raw-data">11. mp4转raw data</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> video.mp4 <span class="nt">-c</span>:v rawvideo <span class="nt">-pix_fmt</span> yuv420p out.yuv
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-vf</span> <span class="s2">"format=nv12"</span> <span class="nt">-c</span>:v rawvideo <span class="nt">-an</span> output.nv12
ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-pix_fmt</span> nv21 <span class="nt">-f</span> rawvideo output.nv21
</code></pre></div></div>

<h3 id="12-图片旋转">12. 图片旋转</h3>
<p>图片向右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">rotate</span><span class="o">=</span><span class="s1">'90*PI/180'</span> <span class="nt">-y</span> rotate60.png
</code></pre></div></div>
<p>图片向右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">rotate</span><span class="o">=</span><span class="s1">'-90*PI/180'</span> <span class="nt">-y</span> rotate_90.png
</code></pre></div></div>
<p>图片像左旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">transpose</span><span class="o">=</span>2 <span class="nt">-y</span> transpose2.png
</code></pre></div></div>
<p>图片像右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">transpose</span><span class="o">=</span>1 <span class="nt">-y</span> transpose2.png
</code></pre></div></div>
<p>逆时针(向左)旋转90°，然后垂直（上下）翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">transpose</span><span class="o">=</span>0 <span class="nt">-y</span> transpose0.png
</code></pre></div></div>
<h3 id="13--图片镜像">13.  图片镜像</h3>
<p>图片左右镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> hflip <span class="nt">-y</span> hflip.png
</code></pre></div></div>
<p>图片上下镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> vflip <span class="nt">-y</span> vflip.png
</code></pre></div></div>
<p>yuv数据左右镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-s</span> 1920x1080 <span class="nt">-pix_fmt</span> nv12 <span class="nt">-i</span> nv12_1.yuv <span class="nt">-vf</span> hflip <span class="nt">-y</span> hflip_nv12.yuv
</code></pre></div></div>
<p>播放左右翻转后的yuv数据</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffplay <span class="nt">-video_size</span> 1920x1080 <span class="nt">-pixel_format</span> nv12 hflip_nv12.yuv
</code></pre></div></div>

<h3 id="14-音频音量调节大小">14. 音频音量调节大小</h3>
<p>音量翻倍，写在滤镜里</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.wav <span class="nt">-af</span> <span class="nv">volume</span><span class="o">=</span>2 <span class="nt">-y</span> output.wav
</code></pre></div></div>
<p>音量翻倍，不写在滤镜中</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> input.wav <span class="nt">-vol</span> 2000 <span class="nt">-y</span> output.wav
</code></pre></div></div>
<h3 id="15-调节播放速度">15. 调节播放速度</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> test1.mp4 <span class="nt">-vf</span>  <span class="s2">"setpts=0.25*PTS"</span> test2.mp4
</code></pre></div></div>

<p>四倍慢速：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> test1.mp4 <span class="nt">-vf</span>  <span class="s2">"setpts=4*PTS"</span> test2.mp4
</code></pre></div></div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[01. 视频分割 ffmpeg -ss 00:00:00 -i input.mp4 -c copy -t 60 output.mp4 -ss 表示视频分割的起始时间，-t 表示分割时长，同时也可以用 00:01:00表示]]></summary></entry><entry><title type="html">Function Trace</title><link href="http://localhost:4000/blog/jekyll/2020-10-02-FuncTrace.html" rel="alternate" type="text/html" title="Function Trace" /><published>2020-10-02T00:00:00+08:00</published><updated>2020-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/FuncTrace</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2020-10-02-FuncTrace.html"><![CDATA[<h1 id="函数跟踪">函数跟踪</h1>

<p><code class="language-plaintext highlighter-rouge">__cyg_profile_func_enter</code> 和 <code class="language-plaintext highlighter-rouge">__cyg_profile_func_exit</code> 是用于函数调用追踪的特殊函数。当你使用 <span style="color:red">-finstrument-functions</span>编译选项时，编译器会在每个函数的开始和结束处插入这两个函数. 这样，你可以实现函数调用的检测和分析。</p>

<p>这里是一个简单的例子，首先我们有一个用于跟踪函数的 <code class="language-plaintext highlighter-rouge">func_trace.c</code> 文件：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp_trace</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">traceBegin</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fp_trace</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"func_trace.out"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="n">traceEnd</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fp_trace</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fclose</span><span class="p">(</span><span class="n">fp_trace</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">__cyg_profile_func_enter</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">caller</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fp_trace</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">fp_trace</span><span class="p">,</span> <span class="s">"entry %p %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">caller</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">__cyg_profile_func_exit</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">caller</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fp_trace</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">fp_trace</span><span class="p">,</span> <span class="s">"exit %p %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">caller</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后，我们编写一个简单的测试代码 <code class="language-plaintext highlighter-rouge">main.c</code>：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">zoo</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">zoo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">foo</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bar</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>接下来，将 <code class="language-plaintext highlighter-rouge">main.c</code> 与 <code class="language-plaintext highlighter-rouge">func_trace.o</code> 一起编译，并加上 <code class="language-plaintext highlighter-rouge">-finstrument-functions</code> 选项：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc main.c func_trace.o <span class="nt">-finstrument-functions</span>
</code></pre></div></div>

<p>运行 <code class="language-plaintext highlighter-rouge">./a.out</code>，就会产生 <code class="language-plaintext highlighter-rouge">func_trace.out</code> 文件，其中记录了函数调用的信息。你可以使用 <code class="language-plaintext highlighter-rouge">addr2line</code> 命令来查看函数名：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>addr2line <span class="nt">-f</span> <span class="nt">-e</span> ./a.out <span class="nv">$ADDRESS</span>
</code></pre></div></div>

<p>这样，你就可以得到函数调用关系。如果想进一步处理这些跟踪数据，可以使用工具如 <code class="language-plaintext highlighter-rouge">graphviz</code> 来创建可视化的调用关系图。</p>

<h1 id="自动化单元测试">自动化单元测试</h1>

<p><img src="/blog/assets/function_trace/print_parameter.png" alt="print_parameter" /></p>

<p><img src="/blog/assets/function_trace/call_test_func.png" alt="call_test_func" /></p>

<p><img src="/blog/assets/function_trace/xml.png" alt="xml" /></p>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[函数跟踪]]></summary></entry><entry><title type="html">Kernel Misc</title><link href="http://localhost:4000/blog/jekyll/2020-06-22-misc.html" rel="alternate" type="text/html" title="Kernel Misc" /><published>2020-06-22T00:00:00+08:00</published><updated>2020-06-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/misc</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2020-06-22-misc.html"><![CDATA[<h1 id="kref">kref</h1>

<p>kref_init 是一个用于初始化内核对象引用计数器（krefs）的函数。它允许你为你的对象添加引用计数，确保在多个地方使用和传递对象时，代码的正确性。以下是关于 kref_init 的一些重要信息：</p>

<ul>
  <li>初始化：</li>
</ul>

<p>在分配内存并创建对象后，你需要调用 kref_init 来初始化引用计数器。例如：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">kmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
<span class="n">kref_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">);</span>
</code></pre></div></div>

<p>这将在 kref 中的 refcount 设置为 1。</p>

<ul>
  <li>使用规则：</li>
</ul>

<p>在对指针进行非临时拷贝（尤其是传递给另一个执行线程）之前，必须使用 kref_get 增加引用计数。
在完成对指针的处理后，必须调用 kref_put。如果这是对指针的最后一次引用，释放程序将被调用。</p>

<ul>
  <li>示例：</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">data_release</span><span class="p">(</span><span class="k">struct</span> <span class="n">kref</span> <span class="o">*</span><span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">container_of</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span> <span class="k">struct</span> <span class="n">my_data</span><span class="p">,</span> <span class="n">refcount</span><span class="p">);</span>
    <span class="n">kfree</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">more_data_handling</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">cb_data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">cb_data</span><span class="p">;</span>
    <span class="c1">// 处理 data</span>
    <span class="n">kref_put</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">,</span> <span class="n">data_release</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">my_data_handler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">rv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">kmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="n">kref_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">);</span>
    <span class="n">kref_get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">);</span>
    <span class="c1">// 创建线程处理数据</span>
    <span class="c1">// ...</span>
    <span class="n">kref_put</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">,</span> <span class="n">data_release</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">rv</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在上述示例中，两个线程处理数据的顺序并不重要，kref_put 会在数据不再被引用时释放它。
请注意，遵循这些规则可以确保正确管理内核对象的引用计数，避免内存泄漏和悬挂指针。</p>

<h1 id="idrid-range">IDR(ID Range)</h1>

<p>IDR 是一种用于管理连续整数范围的数据结构，通常用于内核中需要为对象分配唯一标识符的场景。
idr_alloc 函数用于在 Linux 内核中分配 IDR（ID Range）对象中的未使用的 ID。</p>

<p>以下是 idr_alloc 函数的用法：</p>

<ol>
  <li>首先，您需要初始化一个 IDR。对于静态分配的 IDR，您可以使用 DEFINE_IDR() 宏；对于动态分配的 IDR，您可以使用 idr_init() 函数。</li>
  <li>调用 idr_alloc() 来分配一个未使用的 ID。</li>
  <li>使用 idr_find() 查询与该 ID 相关的指针。</li>
  <li>使用 idr_remove() 释放该 ID。</li>
</ol>

<p>如果需要更改与某个 ID 相关联的指针，您可以调用 idr_replace()。这通常用于保留 ID，通过将 NULL 指针传递给分配函数，然后使用保留的 ID 初始化对象，最后将初始化的对象插入 IDR。</p>

<p>到目前为止，所有用户都满足了 UINT_MAX 的限制，因此他们使用 idr_alloc_u32()。</p>

<p>如果需要按顺序分配 ID，您可以使用 idr_alloc_cyclic()。请注意，处理较大数量的 ID 时，IDR 的效率会降低，因此使用这个函数会有一些代价。</p>

<p>当您使用完 IDR 后，可以调用 idr_destroy() 来释放 IDR 占用的内存。这不会释放 IDR 指向的对象；如果您想这样做，请使用其中一个迭代器来执行此操作。</p>

<p>您可以使用 idr_is_empty() 来查看当前是否分配了任何 ID。</p>

<p>如果在从 IDR 分配一个新 ID 时需要带锁，您可能需要传递一组限制性的 GFP 标志，但这可能导致 IDR 无法分配内存。为了解决该问题，您可以在获取锁之前调用 idr_preload()，然后在分配之后调用 idr_preload_end()。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/idr.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">idr</span> <span class="n">my_idr</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">;</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">ptr1</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr2</span><span class="p">;</span>

    <span class="c1">// Initialize the IDR</span>
    <span class="n">idr_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">);</span>

    <span class="c1">// Allocate two unused IDs</span>
    <span class="n">id1</span> <span class="o">=</span> <span class="n">idr_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="s">"sample1"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="n">id2</span> <span class="o">=</span> <span class="n">idr_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="s">"sample2"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>

    <span class="c1">// Associate pointers with the IDs</span>
    <span class="n">ptr1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0xdeadbeef</span><span class="p">;</span>
    <span class="n">ptr2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0xcafebabe</span><span class="p">;</span>
    <span class="n">idr_replace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">ptr1</span><span class="p">,</span> <span class="n">id1</span><span class="p">);</span>
    <span class="n">idr_replace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">ptr2</span><span class="p">,</span> <span class="n">id2</span><span class="p">);</span>

    <span class="c1">// Look up pointers by ID</span>
    <span class="n">ptr1</span> <span class="o">=</span> <span class="n">idr_find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id1</span><span class="p">);</span>
    <span class="n">ptr2</span> <span class="o">=</span> <span class="n">idr_find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id2</span><span class="p">);</span>

    <span class="c1">// Free the IDs</span>
    <span class="n">idr_remove</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id1</span><span class="p">);</span>
    <span class="n">idr_remove</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id2</span><span class="p">);</span>

    <span class="c1">// Destroy the IDR</span>
    <span class="n">idr_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h1 id="非一致性内存-和一致性">非一致性内存 和一致性</h1>

<h2 id="dma_alloc_noncoherent">dma_alloc_noncoherent</h2>

<p>它是Linux内核中的一个DMA内存分配函数，用于分配一段物理内存，使其可以被DMA硬件访问12. 这个函数的作用是在非一致性内存（non-coherent memory）上分配一块区域，以便设备可以使用它作为DMA的源或目标地址。让我详细解释一下这个函数的用途和参数。</p>

<p>dma_alloc_noncoherent函数的原型如下：</p>

<p><code class="language-plaintext highlighter-rouge">void *dma_alloc_noncoherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t flag);</code></p>

<ul>
  <li>dev: 指向设备结构的指针，表示要为哪个设备分配内存。</li>
  <li>size: 要分配的内存大小（以字节为单位）。</li>
  <li>dma_handle: 用于返回DMA地址的指针。这个地址可以转换为与总线宽度相同的无符号整数，并传递给设备作为分配区域的DMA地址基址。</li>
  <li>flag: 用于指定内存分配的GFP_标志（类似于kmalloc()中的标志）。例如，可以使用GFP_KERNEL来分配普通内核内存。
非一致性内存是一种特殊类型的内存，写入它的数据可以立即被处理器或设备读取，而无需考虑缓存效应。需要注意的是，CPU不能直接引用dma_addr_t，因为物理地址空间和DMA地址空间之间可能存在转换。</li>
</ul>

<p>使用dma_alloc_noncoherent分配的内存区域不保证一致性，因此在使用之前，可能需要手动刷新处理器的写缓冲区，以确保设备可以正确读取该内存。
释放由dma_alloc_noncoherent分配的内存时，应使用dma_free_noncoherent函数：</p>

<p><code class="language-plaintext highlighter-rouge">void dma_free_noncoherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle);</code></p>

<p>dev、size和dma_handle参数必须与传递给dma_alloc_noncoherent的相同。
cpu_addr是由dma_alloc_noncoherent返回的虚拟地址。
请注意，与其他内存分配函数不同，这些函数只能在启用IRQ的情况下调用。</p>

<p>如果你的驱动程序需要大量较小的DMA一致性内存区域，你可以使用DMA池（dma_pool）来分配和管理这些区域，而不是使用dma_alloc_coherent()。DMA池类似于kmem_cache，但它使用dma_alloc_coherent()而不是__get_free_pages()</p>

<h2 id="dma_alloc_wc">dma_alloc_wc</h2>
<p>这个函数允许驱动程序申请带缓存一致性的DMA内存。缓存一致性是指确保CPU和DMA设备之间的数据一致性，以避免数据不一致的问题。使用dma_alloc_wc分配的内存区域旨在在CPU和DMA设备之间保持一致，以便数据正确传输。</p>

<p>释放由dma_alloc_wc分配的内存时，应使用dma_free_wc函数：</p>

<p><code class="language-plaintext highlighter-rouge">void dma_free_wc(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle);</code></p>

<ul>
  <li>dev、size和dma_handle参数必须与传递给dma_alloc_wc的相同。</li>
  <li>cpu_addr是由dma_alloc_wc返回的虚拟地址。</li>
</ul>

<p><u>adf</u></p>

<h1 id="定时器">定时器</h1>

<h2 id="timer_setup">timer_setup</h2>

<p>它是Linux内核中用于初始化定时器的函数。它能够方便地设置和初始化一个计时器，并通过设置参数来灵活地控制计时器的行为1. 合理使用timer_setup函数可以让我们更好地处理时间相关的任务，提高操作系统的性能和可靠性。</p>

<p>在Linux内核中，定时器通常使用timer_list结构体来表示。下面是timer_list结构体的一些关键字段：</p>

<ul>
  <li>entry: 定时器列表元素，用于将定时器挂载在内核定时器链表上。</li>
  <li>expires: 定时器定时时间。</li>
  <li>function: 定时器回调函数，定时器时间到时执行该函数。</li>
  <li>flags: 标志位，用于设置定时器的属性。</li>
</ul>

<p>在旧版本的内核中，我们使用init_timer函数来初始化定时器。而在新版本中，这个函数变成了timer_setup函数。下面是timer_setup函数的定义：</p>

<p><code class="language-plaintext highlighter-rouge">void timer_setup(struct timer_list *timer, void (*callback)(struct timer_list *), unsigned int flags);</code></p>

<p>使用timer_setup函数时，我们需要传入以下参数：</p>

<ul>
  <li>timer: 要初始化的定时器。</li>
  <li>callback: 定时器的回调函数，此函数的形参是当前定时器的变量。</li>
  <li>flags: 标志位，可以设置定时器的属性。</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/kernel.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/timer.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">timer_list</span> <span class="n">my_timer</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">my_timer_callback</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer_list</span> <span class="o">*</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"This line is printed after 5 seconds.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">init_module_with_timer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Initializing a module with timer.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="c1">// Setup the timer for initial use</span>
    <span class="n">timer_setup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">my_timer_callback</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Set the timer interval to 5000 milliseconds (5 seconds)</span>
    <span class="n">mod_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">jiffies</span> <span class="o">+</span> <span class="n">msecs_to_jiffies</span><span class="p">(</span><span class="mi">5000</span><span class="p">));</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">exit_module_with_timer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Goodbye, cruel world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">del_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">init_module_with_timer</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">exit_module_with_timer</span><span class="p">);</span>

</code></pre></div></div>
<h2 id="高精度定时器">高精度定时器</h2>

<p><code class="language-plaintext highlighter-rouge">hrtimer_init</code> 是 Linux 内核中与高精度定时器（HRTimer）相关的函数之一。让我为您详细介绍一下，并提供一个示例代码：</p>

<ol>
  <li><strong>HRTimer 简介</strong>：
    <ul>
      <li>HRTimer 是 Linux 内核中的高精度定时器，用于提供纳秒级别的时钟精度。</li>
      <li>与传统的定时器相比，HRTimer 允许更精确地控制定时事件，适用于对时间要求较高的场景，如看门狗、USB、以太网、块设备、虚拟机等子系统。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">hrtimer_init</code> 函数</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">hrtimer_init</code> 用于初始化一个 <code class="language-plaintext highlighter-rouge">struct hrtimer</code> 实例。</li>
      <li>参数：
        <ul>
          <li><code class="language-plaintext highlighter-rouge">timer</code>：指向要初始化的 HRTimer 实例的指针。</li>
          <li><code class="language-plaintext highlighter-rouge">clock_id</code>：时钟的种类，例如 <code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC</code> 表示自系统开机以来的单调递增时间。</li>
          <li><code class="language-plaintext highlighter-rouge">mode</code>：定时器的模式，可以是绝对时间（<code class="language-plaintext highlighter-rouge">HRTIMER_MODE_ABS</code>）或相对时间（<code class="language-plaintext highlighter-rouge">HRTIMER_MODE_REL</code>）。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>示例代码</strong>：
    <ul>
      <li>下面是一个使用 HRTimer 的简单示例代码，用于在内核中启动一个相对时间的 HRTimer：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/hrtimer.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/ktime.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
</span>     
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
     
<span class="k">static</span> <span class="k">struct</span> <span class="n">hrtimer</span> <span class="n">my_timer</span><span class="p">;</span>
<span class="k">static</span> <span class="n">ktime_t</span> <span class="n">interval</span><span class="p">;</span>
     
<span class="k">static</span> <span class="k">enum</span> <span class="n">hrtimer_restart</span> <span class="nf">my_timer_callback</span><span class="p">(</span><span class="k">struct</span> <span class="n">hrtimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Your timer callback logic here</span>
    <span class="c1">// For demonstration purposes, let's print a message.</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"HRTimer callback executed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">HRTIMER_RESTART</span><span class="p">;</span>
<span class="p">}</span>
     
<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Initialize the HRTimer</span>
    <span class="n">interval</span> <span class="o">=</span> <span class="n">ktime_set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// Set interval to 1 second</span>
    <span class="n">hrtimer_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">CLOCK_MONOTONIC</span><span class="p">,</span> <span class="n">HRTIMER_MODE_REL</span><span class="p">);</span>
    <span class="n">my_timer</span><span class="p">.</span><span class="n">function</span> <span class="o">=</span> <span class="n">my_timer_callback</span><span class="p">;</span>
     
    <span class="c1">// Start the timer</span>
    <span class="n">hrtimer_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">interval</span><span class="p">,</span> <span class="n">HRTIMER_MODE_REL</span><span class="p">);</span>
     
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"HRTimer module initialized</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
     
<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Cleanup: Stop the timer</span>
    <span class="n">hrtimer_cancel</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">);</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"HRTimer module removed</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
     
<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>在上述示例中，我们初始化了一个相对时间的 HRTimer，设置了回调函数 <code class="language-plaintext highlighter-rouge">my_timer_callback</code>，并启动了定时器。</li>
    </ul>
  </li>
</ol>

<h1 id="内核线程">内核线程</h1>

<p><strong>kthread_create_worker()</strong> 函数是Linux内核中用于创建内核线程的一个函数。通过设置标志参数和格式化字符串，可以指定创建内核线程的行为和名称。它分配并初始化了一个kthread_worker结构体，并使用它来创建内核线程.</p>

<p>以下是kthread_create_worker函数的一些关键参数：</p>

<ul>
  <li>cpu: 如果大于等于0，将创建特定于某个CPU的工作线程；如果不想创建特定于CPU的工作线程，可以将CPU域赋值为-1。</li>
  <li>flags: 可以设置一些标志位，根据需要来控制内核线程的行为。</li>
  <li>namefmt: 一个格式化字符串，用于指定内核线程的名称。</li>
</ul>

<p>这个函数会分配内存并初始化kthread_worker结构，然后返回指向该结构的指针。您可以根据具体需求使用这个函数来创建和管理内核线程。</p>

<p>如果您需要一个示例代码，以下是一个简单的例子，展示了如何在模块初始化时创建一个内核线程，以及如何在卸载模块时关闭该内核线程：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kthread.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/delay.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">demo_thr</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">kthread_should_stop</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">msleep_interruptible</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
        <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"Thread is running...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">thr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">kthread_demo_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">thr</span> <span class="o">=</span> <span class="n">kthread_run</span><span class="p">(</span><span class="n">demo_thr</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">"kthread-demo"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">thr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ERR</span> <span class="s">"Failed to create kthread</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">kthread_demo_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">thr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">kthread_stop</span><span class="p">(</span><span class="n">thr</span><span class="p">);</span>
        <span class="n">thr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">kthread_demo_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">kthread_demo_exit</span><span class="p">);</span>
</code></pre></div></div>
<p>在这个示例中，我们使用kthread_run函数创建一个名为kthread-demo的内核线程，它每隔2秒打印一条信息。在卸载模块时，我们使用kthread_stop来关闭该内核线程。</p>

<h1 id="工作队列">工作队列</h1>

<h2 id="schedule_work">schedule_work</h2>

<p>函数是Linux内核中的一个重要函数，用于将一个工作项（work）添加到工作队列（workqueue）中。这个函数的作用是在后台执行一些延迟较长的任务，而不会阻塞主线程的执行。</p>

<p>以下是关于schedule_work函数的一些要点：</p>

<ul>
  <li>功能：将工作项添加到<strong>默认的工作队列</strong>（通常是system_wq）中，以便稍后执行。</li>
  <li>调用方式：schedule_work(&amp;my_work);，其中my_work是一个已经初始化的工作项。</li>
  <li>工作队列：工作队列是一种异步执行机制，用于处理延迟的或非实时的任务。</li>
  <li>延迟执行：schedule_work会将工作项添加到工作队列中，等待系统调度执行。这样，主线程可以继续执行其他任务，而不必等待工作项完成。</li>
  <li>工作项回调函数：工作项的实际执行逻辑由回调函数定义。当工作项被调度执行时，会调用这个回调函数。</li>
</ul>

<p>以下是一个简单的示例代码，展示了如何使用INIT_WORK和schedule_work来创建和调度一个工作项：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kernel.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/workqueue.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">work_struct</span> <span class="n">my_work</span><span class="p">;</span>

<span class="c1">// 工作项的回调函数</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">my_work_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"My work handler is running...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="c1">// 在这里执行您的工作逻辑</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">init_my_module</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"Initializing my kernel module with workqueue...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="c1">// 初始化工作项</span>
    <span class="n">INIT_WORK</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_work</span><span class="p">,</span> <span class="n">my_work_handler</span><span class="p">);</span>

    <span class="c1">// 将工作项添加到工作队列</span>
    <span class="n">schedule_work</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_work</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">cleanup_my_module</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"Cleaning up my kernel module...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">init_my_module</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">cleanup_my_module</span><span class="p">);</span>
</code></pre></div></div>
<p>在这个示例中，我们首先定义了一个名为my_workqueue的工作队列结构体，以及一个名为my_work的工作项。然后，在init_my_module函数中使用create_singlethread_workqueue来创建一个名为my_workqueue的工作队列。接着，我们使用INIT_WORK来初始化工作项，并使用schedule_work来调度它。</p>

<h2 id="alloc_ordered_workqueue">alloc_ordered_workqueue</h2>

<p>用于创建<strong>有序</strong>的工作队列（workqueue）。让我详细介绍一下，并提供一个示例代码：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">alloc_ordered_workqueue</code> 简介</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">alloc_ordered_workqueue</code> 函数用于分配一个有序的工作队列。</li>
      <li>有序工作队列是一种特殊类型的工作队列，它确保工作项按照提交的顺序执行。</li>
    </ul>
  </li>
  <li><strong>函数签名</strong>：
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="nf">alloc_ordered_workqueue</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong>参数说明</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">name</code>：工作队列的名称。</li>
      <li><code class="language-plaintext highlighter-rouge">flags</code>：标志位，用于配置工作队列的行为。</li>
    </ul>
  </li>
  <li>
    <p><strong>示例代码</strong>：</p>

    <p>下面是一个简单的示例代码，展示如何使用 <code class="language-plaintext highlighter-rouge">alloc_ordered_workqueue</code> 创建一个有序的工作队列：</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/workqueue.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">my_ordered_wq</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">my_work_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Work item executed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="nf">DECLARE_WORK</span><span class="p">(</span><span class="n">my_work</span><span class="p">,</span> <span class="n">my_work_handler</span><span class="p">);</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">my_ordered_wq</span> <span class="o">=</span> <span class="n">alloc_ordered_workqueue</span><span class="p">(</span><span class="s">"my_ordered_wq"</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_ordered_wq</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pr_err</span><span class="p">(</span><span class="s">"Failed to create ordered workqueue</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">queue_work</span><span class="p">(</span><span class="n">my_ordered_wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_work</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">destroy_workqueue</span><span class="p">(</span><span class="n">my_ordered_wq</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">"Ordered Workqueue Example"</span><span class="p">);</span>
</code></pre></div>    </div>

    <p>在此示例中，我们创建了一个名为 “my_ordered_wq” 的有序工作队列，并将一个工作项 <code class="language-plaintext highlighter-rouge">my_work</code> 提交到队列中。工作项的处理函数 <code class="language-plaintext highlighter-rouge">my_work_handler</code> 将在有序的顺序中执行。</p>
  </li>
</ol>

<h2 id="create_singlethread_workqueue">create_singlethread_workqueue</h2>

<p><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 是 Linux 内核中的一个函数，用于创建一个只包含单个工作线程的工作队列（workqueue）。让我详细介绍一下：🙂</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 简介</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 函数用于创建一个只包含一个工作线程的工作队列。</li>
      <li><strong>无论系统中有多少个 CPU，这个工作队列都只会有一个工作线程</strong>。</li>
    </ul>
  </li>
  <li><strong>函数签名</strong>：
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="nf">create_singlethread_workqueue</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong>参数说明</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">name</code>：工作队列的名称。</li>
    </ul>
  </li>
  <li><strong>工作原理</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 创建的工作队列只有一个工作线程。</li>
      <li>所有提交到这个工作队列的工作项都会由这个单一的工作线程按顺序执行。</li>
    </ul>
  </li>
  <li>
    <p><strong>示例代码</strong>：
下面是一个简单的示例代码，展示如何使用 <code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 创建一个只包含单个工作线程的工作队列：</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/workqueue.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">my_singlethread_wq</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">my_work_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Work item executed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="nf">DECLARE_WORK</span><span class="p">(</span><span class="n">my_work</span><span class="p">,</span> <span class="n">my_work_handler</span><span class="p">);</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">my_singlethread_wq</span> <span class="o">=</span> <span class="n">create_singlethread_workqueue</span><span class="p">(</span><span class="s">"my_singlethread_wq"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_singlethread_wq</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pr_err</span><span class="p">(</span><span class="s">"Failed to create singlethread workqueue</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">queue_work</span><span class="p">(</span><span class="n">my_singlethread_wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_work</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">destroy_workqueue</span><span class="p">(</span><span class="n">my_singlethread_wq</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">"Singlethread Workqueue Example"</span><span class="p">);</span>
</code></pre></div>    </div>

    <p>在此示例中，我们创建了一个名为 “my_singlethread_wq” 的工作队列，并将一个工作项 <code class="language-plaintext highlighter-rouge">my_work</code> 提交到队列中。这个工作项的处理函数 <code class="language-plaintext highlighter-rouge">my_work_handler</code> 将在单一的工作线程中按顺序执行。</p>
  </li>
</ol>

<h1 id="completion">completion</h1>

<p>init_completion() 是Linux内核中用于完成事件通知机制的一个函数，主要用于进程间或线程间的同步。这个函数初始化一个 completion 结构体，该结构体用于表示某个事件是否已经发生。在多线程或多进程编程中，有时需要一个线程或进程等待另一个线程或进程完成某个任务。</p>

<p>让我们来详细了解一下 init_completion() 函数的功能和用法：</p>

<ul>
  <li>初始化completion结构体：
    <ul>
      <li>completion 结构体用于维护“complete”状态，表示某个任务是否已完成。</li>
      <li>结构体定义如下：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">completion</span> <span class="p">{</span>
   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">done</span><span class="p">;</span>
   <span class="k">struct</span> <span class="n">swait_queue_head</span> <span class="n">wait</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>        </div>
      </li>
      <li>done 字段表示完成状态，初始值为 0。</li>
      <li>swait_queue_head 是一个等待队列头，用于管理等待该完成事件的线程。</li>
    </ul>
  </li>
  <li>init_completion() 函数：
    <ul>
      <li>动态定义及初始化一个信号量：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define init_completion(x) __init_completion(x)
</span><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">__init_completion</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
   <span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="n">init_swait_queue_head</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>这个函数实际上是初始化了 completion 结构体中的信号量。</li>
    </ul>
  </li>
  <li>等待完成：
    <ul>
      <li>等待信号量的释放：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">__sched</span> <span class="nf">wait_for_completion</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wait_for_common</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">MAX_SCHEDULE_TIMEOUT</span><span class="p">,</span> <span class="n">TASK_UNINTERRUPTIBLE</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>发信端：</p>

    <ul>
      <li>complete() 函数用于唤醒等待该完成事件的单个线程：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">complete</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">flags</span><span class="p">;</span>
    <span class="n">raw_spin_lock_irqsave</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">!=</span> <span class="n">UINT_MAX</span><span class="p">)</span>
       <span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span><span class="o">++</span><span class="p">;</span>
    <span class="n">swake_up_locked</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">);</span>
    <span class="n">raw_spin_unlock_irqrestore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>同时唤醒所有等待线程：
    <ul>
      <li>complete_all() 函数用于唤醒等待此特定完成事件的所有线程：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">complete_all</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">flags</span><span class="p">;</span>
    <span class="n">lockdep_assert_RT_in_threaded_ctx</span><span class="p">();</span>
    <span class="n">raw_spin_lock_irqsave</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
    <span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">=</span> <span class="n">UINT_MAX</span><span class="p">;</span>
    <span class="n">swake_up_all_locked</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">);</span>
    <span class="n">raw_spin_unlock_irqrestore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>完整示例</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/completion.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/delay.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kthread.h&gt;</span><span class="cp">
</span><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
<span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">"kevin"</span><span class="p">);</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">completion</span> <span class="n">my_completion</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">my_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"My thread is waiting for completion...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">wait_for_completion</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_completion</span><span class="p">);</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"My thread woke up! Event completed.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_init</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Initializing my module...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">init_completion</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_completion</span><span class="p">);</span>
    <span class="c1">// Start a new kernel thread</span>
    <span class="n">kthread_run</span><span class="p">(</span><span class="n">my_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">"my_thread"</span><span class="p">);</span>
    <span class="c1">// Simulate some work...</span>
    <span class="n">msleep</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Completing the event...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">complete</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_completion</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Exiting my module...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">module_init</span><span class="p">(</span><span class="n">my_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_exit</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="kobject_uevent_env">kobject_uevent_env</h1>

<p>它是 <strong>Linux 内核</strong> 中的一个函数，用于在 <strong>kobject</strong> 状态发生变化时发送 <strong>uevent</strong> 到用户空间。让我详细解释一下：</p>

<ol>
  <li><strong>kobject</strong>：
    <ul>
      <li><strong>kobject</strong> 是内核中的一个抽象对象，用于表示各种内核数据结构，例如设备、驱动程序、总线等。</li>
      <li>每个 <strong>kobject</strong> 都有一个名称、引用计数和其他属性。</li>
    </ul>
  </li>
  <li><strong>uevent</strong>：
    <ul>
      <li><strong>uevent</strong> 是用户空间事件的缩写，用于通知用户空间程序内核中的状态变化。</li>
      <li>例如，当设备插入或移除时，内核会生成相应的 <strong>uevent</strong>。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">kobject_uevent_env</code> 函数</strong>：
    <ul>
      <li>这个函数用于发送 <strong>uevent</strong> 到用户空间。</li>
      <li>它接受一个指向 <strong>kobject</strong> 的指针和一个表示 <strong>uevent</strong> 的环境变量数组。</li>
      <li>用户空间程序可以监听这些事件并做出相应的处理。</li>
    </ul>
  </li>
  <li><strong>使用示例</strong>：
    <ul>
      <li>在设备驱动程序中，当设备状态发生变化时，例如设备插入或移除，可以使用 <code class="language-plaintext highlighter-rouge">kobject_uevent_env</code> 发送相应的 <strong>uevent</strong>。</li>
      <li>用户空间程序收到这些事件后，可以根据需要执行操作。</li>
    </ul>
  </li>
</ol>

<p>以下是一个简单的示例代码，展示了如何在内核模块中使用 <code class="language-plaintext highlighter-rouge">kobject_uevent_env</code> 发送 <strong>uevent</strong>：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kobject.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">kobject</span> <span class="o">*</span><span class="n">my_kobj</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">my_uevent</span><span class="p">(</span><span class="k">struct</span> <span class="n">kset</span> <span class="o">*</span><span class="n">kset</span><span class="p">,</span> <span class="k">struct</span> <span class="n">kobject</span> <span class="o">*</span><span class="n">kobj</span><span class="p">,</span> <span class="k">struct</span> <span class="n">kobj_uevent_env</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Add custom environment variables to the uevent</span>
    <span class="n">add_uevent_var</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"MY_CUSTOM_VAR=hello_world"</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">kset_uevent_ops</span> <span class="n">my_uevent_ops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">uevent</span> <span class="o">=</span> <span class="n">my_uevent</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">my_kobj</span> <span class="o">=</span> <span class="n">kobject_create_and_add</span><span class="p">(</span><span class="s">"my_kobject"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_kobj</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>

    <span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span> <span class="o">=</span> <span class="n">kset_create_and_add</span><span class="p">(</span><span class="s">"my_kset"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">kobject_put</span><span class="p">(</span><span class="n">my_kobj</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span><span class="o">-&gt;</span><span class="n">uevent_ops</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">my_uevent_ops</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">kset_unregister</span><span class="p">(</span><span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span><span class="p">);</span>
    <span class="n">kobject_put</span><span class="p">(</span><span class="n">my_kobj</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
</code></pre></div></div>

<p>在此示例中，我们创建了一个名为 <code class="language-plaintext highlighter-rouge">my_kobject</code> 的 <strong>kobject</strong>，并将其添加到一个名为 <code class="language-plaintext highlighter-rouge">my_kset</code> 的 <strong>kset</strong> 中。然后，我们设置了一个自定义的 <strong>uevent</strong>，将环境变量 <code class="language-plaintext highlighter-rouge">MY_CUSTOM_VAR</code> 添加到 <strong>uevent</strong> 中。</p>

<p>请注意，实际应用中，您需要根据您的需求自定义更多的环境变量和处理逻辑。</p>

<h1 id="benchmark">benchmark</h1>

<ul>
  <li>
    <p>DRM kernel aspects (display and render):</p>

    <p>IGT GPU Tools (IGT): main DRM test suite, used for CI</p>

    <p><a href="https://gitlab.freedesktop.org/drm/igt-gpu-tools/">https://gitlab.freedesktop.org/drm/igt-gpu-tools/</a></p>
  </li>
  <li>
    <p>OpenGL aspects:</p>

    <ul>
      <li>
        <p>drawElements Quality Program (dEQP): OpenGL/OpenGL ES/Vulkan conformance tests</p>

        <p><a href="https://android.googlesource.com/platform/external/deqp/">https://android.googlesource.com/platform/external/deqp/</a></p>
      </li>
      <li>
        <p>glmark2: OpenGL 2.0 and ES 2.0 benchmark tool</p>

        <p><a href="https://github.com/glmark2/glmark2/">https://github.com/glmark2/glmark2/</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Patch series continuous integration:</p>

    <p>EzBench: a collection of tools to benchmark graphics-related patch-series</p>

    <p><a href="https://github.com/freedesktop/ezbench/">https://github.com/freedesktop/ezbench/</a></p>
  </li>
  <li>
    <p>General benchmarking (including graphics):</p>

    <p>Phoronix Test Suite: automated benchmarking tool</p>

    <p><a href="https://github.com/phoronix-test-suite/phoronix-test-suite/">https://github.com/phoronix-test-suite/phoronix-test-suite/</a></p>
  </li>
</ul>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[kref]]></summary></entry><entry><title type="html">设备资源管理模块</title><link href="http://localhost:4000/blog/linux/2018-08-01-DeviceResourceManage.html" rel="alternate" type="text/html" title="设备资源管理模块" /><published>2018-08-01T00:00:00+08:00</published><updated>2018-08-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/linux/DeviceResourceManage</id><content type="html" xml:base="http://localhost:4000/blog/linux/2018-08-01-DeviceResourceManage.html"><![CDATA[<h1 id="1解决的问题">1.解决的问题</h1>

<p>相信每一个写过Linux driver的工程师，都在probe函数中遇到过上面的困惑：在顺序申请多种资源（IRQ、Clock、memory、regions、ioremap、dma、等等）的过程中，只要任意一种资源申请失败，就要回滚释放之前申请的所有资源。 于是在函数的最后，就一定会出现很多的goto标签，用于释放不同的资源（如上面的exit_free_irq、exit_free_dma、等等）。 在申请资源出错时，小心翼翼的goto到正确的标签上，以便释放已申请资源。</p>

<p>这样在代码中，整个函数被大段的、重复的如下代码充斥。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">condition</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="n">err</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span> 
    <span class="k">goto</span> <span class="n">xxx</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>
<p>既浪费精力容易出错，也不美观。 有困惑，就有改善的办法。 方法就是Linux设备模型中的device resource management（设备资源管理）。</p>

<h1 id="2解决的思路">2.解决的思路</h1>

<p>devres提供了一种机制，<font style="background:#8EE5EE">用资源节点的形式记录它申请的资源，并在系统中为设备分配一个链表，当申请某个资源时，就构建一个资源节点，然后把它加入到这个链表中，对应的释放函数也会被记录，以便在driver detach的时候，自动释放。</font></p>

<p>为了使用devres机制，资源要对各自的资源分配函数重新封装，加入资源节点的申请、添加和释放，一般新函数名改成了<font color="#ff0000">devm_xxx()</font>的形式。driver作者只管调用这些devm_xxx()接口来申请资源，不用考虑释放，设备模型会在适当的时候释放它们。</p>

<p>device resource management位于“drivers/base/devres.c”中，它实现了上述机制。
<img src="/blog/assets/DeviceResourceManagement/1.png" alt="1.png" /></p>

<h1 id="3提供的接口">3.提供的接口</h1>

<p>以下是devres提供的几个基本接口</p>

<table>
  <thead>
    <tr>
      <th>interface</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>devres_alloc( )</td>
      <td>// 分配资源节点</td>
    </tr>
    <tr>
      <td>devres_free( )</td>
      <td>// 释放资源节点</td>
    </tr>
    <tr>
      <td>devres_add( )</td>
      <td>// 添加资源节点到链表</td>
    </tr>
    <tr>
      <td>devres_destroy( )</td>
      <td>// 释放资源</td>
    </tr>
    <tr>
      <td>devres_release_all()</td>
      <td>//释放所有资源</td>
    </tr>
  </tbody>
</table>

<h1 id="4接口的使用">4.接口的使用</h1>

<p>其他资源模块，可以通过调用devres提供的接口，利用devres机制实现资源的自动释放。</p>

<h2 id="41-资源节点函数的应用举例">4.1 资源节点函数的应用举例</h2>

<p>下面的代码是利用devres机制实现分配中断资源函数 devm_request_threaded_irq( ), 上层模块可以调用它来分配中断资源，在出错时，不必考虑对该资源的释放，系统会自动释放。</p>

<p>主要涉及到devres_alloc()、devres_free()和devres_add()</p>

<p><img src="/blog/assets/DeviceResourceManagement/2.png" alt="2.png" /></p>

<h2 id="42-资源释放函数的应用举例">4.2 资源释放函数的应用举例</h2>

<p>资源释放函数devres_destroy()的使用举例，资源模块可以用它来封装资源释放函数。</p>

<p><img src="/blog/assets/DeviceResourceManagement/3.png" alt="3.png" width="500px" /></p>

<h1 id="5-函数的内部实现">5. 函数的内部实现</h1>

<h2 id="51-devres_alloc">5.1 devres_alloc()</h2>

<p>devrs_alloc()函数的实现，主要调用了内部函数alloc_dr(), 它会分配<font color="#ff0000">size+sizeof(struct devres)</font>的内存大小, struct devres用于存储资源节点信息，并记录release 函数。</p>

<p><img src="/blog/assets/DeviceResourceManagement/4.png" alt="4.png" /></p>

<h2 id="52-devres_add">5.2 devres_add()</h2>

<p>devres_add()主要实现把资源节点添加到设备的资源链表中。</p>

<p><img src="/blog/assets/DeviceResourceManagement/5.png" alt="5.png" width="550px" /></p>

<h2 id="53-devres_destroy">5.3 devres_destroy()</h2>

<p>devres_destroy()主要涉及到以下几个内部函数：</p>
<ul>
  <li>devres_remove()   //查找到资源节点，并从链表中删除</li>
  <li>find_dr()         //根据release函数指针、match函数查找资源节点</li>
  <li>devres_free()     //释放资源节点</li>
</ul>

<p>可以结合上面它的使用实例来学习。</p>

<p><img src="/blog/assets/DeviceResourceManagement/6.png" alt="6.png" /></p>

<h2 id="54-devers_release_all">5.4 devers_release_all()</h2>

<p>devers_release_all()的调用会释放所有资源。它的被调用时机有两个：</p>
<ul>
  <li>really_probe()失败</li>
  <li>设备与驱动分离时, deriver_dettach时 就是driver_remove时。</li>
</ul>

<p><img src="/blog/assets/DeviceResourceManagement/7.png" alt="7.png" /></p>]]></content><author><name>kevin</name></author><category term="linux" /><summary type="html"><![CDATA[1.解决的问题]]></summary></entry><entry><title type="html">进程内存检查</title><link href="http://localhost:4000/blog/jekyll/2018-05-20-memory_check.html" rel="alternate" type="text/html" title="进程内存检查" /><published>2018-05-20T00:00:00+08:00</published><updated>2018-05-20T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/memory_check</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2018-05-20-memory_check.html"><![CDATA[<h1 id="1进程内存映射文件smaps">1.进程内存映射文件smaps</h1>

<p>在内核的数据结构中，进程、进程使用内存、虚拟内存块和一个二进制程序文件的对应关系图如下。</p>

<p><img src="/blog/assets/memory_check/vm_area.png" alt="vm_area" /></p>

<p>查看<code class="language-plaintext highlighter-rouge">/proc/${PID}/smaps</code>，可以得到每一个vm_area_node的详细信息。</p>

<p>下图是一个具体的<strong>vm_area_node</strong>信息。</p>

<p><img src="/blog/assets/memory_check/smap_file.png" alt="smaps" /></p>

<h2 id="11-两种映射">1.1 两种映射</h2>

<p>下面两种映射的介绍，是为了下一节解释各字段含义做准备。</p>

<ul>
  <li>文件映射</li>
</ul>

<p>就是存储介质(比如：磁盘)中的数据通过文件系统映射到内存再通过文件映射映射到虚拟空间，这样，用户就可以在用户空间通过 open, read, write 等函数区操作文件内容。代码中函数open(), read(), write(), close(), mmap(fd，…)… 操作的虚拟地址都属于文件映射。</p>

<ul>
  <li>匿名映射</li>
</ul>

<p>就是用户空间要求内核分配一定的物理内存来存储数据，这部分内存不属于任何文件。内核就使用匿名映射将内存中的某段物理地址与用户空间一一映射，这样用户就可用直接操作虚拟地址来范围这段物理内存。比如使用malloc(), mmap(NULL，…)申请内存。</p>

<h2 id="12-各字段含义">1.2 各字段含义</h2>

<ul>
  <li><span style="background-color: yellow">第一行</span></li>
</ul>

<p><img src="/blog/assets/memory_check/vm_area_node_head.png" alt="smaps_head" /></p>

<blockquote>
  <ol>
    <li><span style="color:hotpink;">08048000-080bc000</span>: 该虚拟内存段的开始和结束位置</li>
    <li><span style="color:orange">r-xp</span>:内存段的权限，分别是可读、可写、可运行、私有或共享，最后一位p代表私有，s代表共享(如共享的内存， shm). 如果有”w”，表示是库的数据区.</li>
    <li><span style="color:green">00000000</span>: 虚拟内存段起始地址在对应的映射文件中以页为单位的偏移量，
对匿名映射，它等于0或者vm_start/PAGE_SIZE</li>
    <li><span style="color:orangered;">03:02</span>: 文件的主设备号和次设备号。
对有名映射来说，是映射的文件所在设备的设备号
对匿名映射来说，因为没有文件在磁盘上，所以没有设备号，始终为00:00。</li>
    <li><span style="color:blue;">13130</span>: 被映射到虚拟内存的文件的索引节点号,通过该节点可以找到对应的文件，
对匿名映射来说，因为没有文件在磁盘上，所以为0</li>
    <li><strong>/bin/bash</strong>: 被映射到虚拟内存的文件名称。后面带(deleted)的是内存数据，可以被销毁。
对有名映射来说，是映射的文件名。
对匿名映射来说，是此段虚拟内存在进程中的角色。[stack]表示在进程中作为栈使用，[heap]表示堆。其余情况比如mmap(NULL, ….)则无显示。</li>
  </ol>
</blockquote>

<ul>
  <li>
    <p><span style="background-color: yellow">Size</span></p>

    <p>虚拟内存空间大小。但是这个内存值不一定是物理内存实际分配的大小，因为在用户态上，虚拟内存总是延迟分配的。这个值计算也非常简单，就是该VMA的开       始位置减结束位置。</p>

    <p><strong>延迟分配</strong>:就是当进程申请内存的时候，Linux会给他先分配页，但是并不会区建立页与页框的映射关系，也就是并不会分配物理内存，而当真正使用的时候，就会产生一个缺页异常，硬件跳转page fault处理程序执行，在其中分配物理内存，然后修改页表(创建页表项)。异常处理完毕，返回程序用户态，继续执行。</p>
  </li>
  <li>
    <p><span style="background-color: yellow">Rss</span> resident set size</p>

    <p>实际分配的内存，这部分物理内存已经分配，不需要缺页中断就可以使用的。<strong>但可能是和其他进程共享的</strong>。</p>

    <p>这里有一个公式计算Rss：</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rss</span><span class="o">=</span><span class="n">Shared_Clean</span><span class="o">+</span><span class="n">Shared_Dirty</span><span class="o">+</span><span class="n">Private_Clean</span><span class="o">+</span><span class="n">Private_Dirty</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><span style="background-color: yellow">Shared_Clean</span>  <span style="background-color: yellow">Shared_Dirty</span>   <span style="background-color: yellow">Private_Clean</span>  <span style="background-color: yellow">Private_Dirty</span></p>

    <p>share/private：表示该页面是共享还是私有。</p>

    <p>dirty/clean： 表示该页面是否被修改过，如果修改过（dirty），在页面被淘汰的时候，就会把该脏页面回写到交换分区(换出，swap out)。有 一个标志位用于表示页面是否dirty。</p>

    <p>share/private_dirty/clean 计算逻辑：</p>

    <p>查看该page的引用数，如果引用&gt;1，则归为shared，如果是1，则归为private，再查看该page的flag，是否标记为_PAGE_DIRTY，如果不是，则认为干净的</p>
  </li>
  <li>
    <p><span style="background-color: yellow">Pss</span> proportional set size</p>

    <p>平摊计算后的实际物理使用内存(有些内存会和其他进程共享，例如mmap进来的)。实际上包含上面private_clean+private_dirty，和按比例均分的shared_clean、shared_dirty。</p>

    <p>举个计算Pss的例子：</p>

    <p>如果进程A有x个private_clean页面，有y个private_dirty页面，有z个shared_clean仅和进程B共享，有h个shared_dirty页面和进程B、C共享。那么进程A的Pss为：x + y + z/2 + h/3</p>
  </li>
  <li>
    <p><span style="background-color: yellow">Referenced</span></p>

    <p>当前页面被标记为已引用或者包含匿名映射（The amount of memory currently marked as referenced or a mapping associated with a file may contain anonymous pages）。在Linux内存管理的页面替换算法中，当某个页面被访问后，Referenced标志被设置，如果该标志设置了，就不能将该页移出。</p>
  </li>
  <li>
    <p><span style="background-color: yellow">Anonymous</span></p>

    <p>匿名映射的物理内存，这部分内存不是来自于文件。</p>
  </li>
  <li>
    <p><span style="background-color: yellow">VmFlags</span></p>

    <p>vm_area的各种属性，具体如下：</p>

    <p><img src="/blog/assets/memory_check/vmflags.png" alt="vmflags" width="400px" height="450px" /></p>
  </li>
</ul>

<h2 id="13-不同变量的位置">1.3 不同变量的位置</h2>

<p>一个库映射到内存， 一般分为代码段、数据段和只读数据段</p>
<ul>
  <li>r- --p: so中的字符串常数</li>
  <li>rw--p: so中的全局变量，静态变量</li>
  <li>r- -xp: so的代码段，常量</li>
  <li>- ---p: 表示该 VMA 是私有的，不可执行，且不可读写. 这通常用于保护敏感数据或代码，防止其被修改或执行</li>
</ul>

<p>下面这段代码展示了不同变量的存储位置：</p>

<p><img src="/blog/assets/memory_check/variable_location.png" alt="variable" width="650px" height="450px" /></p>

<h1 id="2free-命令">2.free 命令</h1>

<p>free 命令用于显示系统的内存状态，包括物理内存、交换内存（swap）和内核缓冲区内存。详细输出如下：</p>

<p><img src="/blog/assets/memory_check/free.png" alt="variable" width="650px" height="60px" /></p>

<ul>
  <li>Mem 行（第二行）显示了内存的使用情况。</li>
  <li>
    <p>Swap行（第三行）显示了交换空间的使用情况。</p>
  </li>
  <li>total: 表示系统总的可用<u>物理内存</u>和<u>交换空间</u>大小。</li>
  <li>used : 表示已经被使用的<u>物理内存</u>和<u>交换空间</u>。</li>
  <li>free : 表示还有多少<u>物理内存</u>和<u>交换空间</u>可用使用。</li>
  <li>shared: 显示被共享使用的<u>物理内存</u>大小。</li>
  <li>buff/cache: 显示被 buffer 和 cache 使用的物<u>理内存</u>大小。</li>
  <li>available: 显示还可以被应用程序使用的<u>物理内存</u>大小。</li>
</ul>

<h2 id="21-buffer与cache">2.1 buffer与cache</h2>

<ul>
  <li>
    <p><span style="background-color: yellow">buffer</span>: 缓<font style="color:red">冲</font>区</p>

    <p>CPU 在进行一系列操作时，先在内存的一块区域进行，一系列操作完成后，再一次性把该内存区域提交给外部设备，来对这个区域操作。</p>

    <p>比如写一堆数据给硬盘，就先写到内存的一块区域，写好后一次写回到硬盘。又比如读数据，先在内存划出一块区域，让硬盘控制器写数据到这块区域，写好后，CPU 直接访问该区域得到数据。这个内存区域就叫buffer</p>

    <p>缓冲区是内存或存储的一部分，用于在等待从输入设备传输到输出设备时存放项目。</p>

    <p>操作系统通常在打印文档时使用缓冲区。这个过程称为排队（spooling），它将要打印的文档发送到缓冲区，而不是立即发送到打印机。如果打印机没有自己的内部存储器，或者内存已满，操作系统的缓冲区会保存等待打印的信息，同时打印机以自己的速度从缓冲区打印。</p>

    <p>通过将文档排队到缓冲区，处理器可以继续解释和执行指令，同时打印机进行打印。这使用户可以在打印机打印时继续在计算机上进行其他任务。多个打印作业在缓冲区中排队（发音为“Q”）。一个名为<strong>打印排队程序（print spooler）</strong>的程序拦截操作系统中要打印的文档，并将其放入队列中</p>
  </li>
  <li>
    <p><span style="background-color: yellow">cache</span>：缓<font style="color:red">存</font></p>

    <p>CPU 要访问一块数据时，首先访问内存的某个区域，看是否有该数据的缓存，有则直接访问，没有则访问它的来源地。
   CPU 利用内存或高速缓存对数据的再备份，为以后的再次访问提供方便</p>

    <p>缓存如今的大多数计算机通过缓存（发音为“cash”）来提高处理速度。</p>

    <p>缓存有两种主要类型：内存缓存和磁盘缓存。让我们详细了解一下内存缓存。</p>

    <p>L1 缓存：</p>

    <p>L1 缓存直接内置在处理器芯片中。     <br />
   它通常容量很小，范围从 8 KB 到 128 KB。
   L1 缓存存储经常使用的指令和数据，以便快速访问。</p>

    <p>L2 缓存：</p>

    <p>L2 缓存比 L1 缓存稍慢，但容量更大。
   它的大小范围从 64 KB 到 16 MB。
   一些现代处理器包括高级传输缓存，这是一种直接内置在处理器芯片上的 L2 缓存类型。
   使用高级传输缓存的处理器的性能比不使用它的处理器要快得多。
   现今的个人计算机通常具有 512 KB 到 12 MB 的高级传输缓存。</p>

    <p>缓存通过存储经常使用的指令和数据来显著加快处理时间。</p>

    <p>当处理器需要一条指令或数据时，它按照以下顺序搜索内存：L1 缓存，然后是 L2 缓存，然后是 RAM。</p>

    <p>如果所需信息在内存中找不到，处理器必须搜索速度较慢的存储介质，例如硬盘或光盘。</p>
  </li>
</ul>

<h2 id="22-手动释放缓存">2.2. 手动释放缓存</h2>

<ol>
  <li>首先，<u>使用sync命令将未写入磁盘的数据同步到磁盘，以确保文件系统的完整性。</u></li>
  <li>然后，通过设置/proc/sys/vm/drop_caches来释放内存缓存：
    <ul>
      <li>echo 1 &gt; /proc/sys/vm/drop_caches：释放页缓存。</li>
      <li>echo 2 &gt; /proc/sys/vm/drop_caches：释放 dentries 和 inodes。</li>
      <li>echo 3 &gt; /proc/sys/vm/drop_caches：释放所有缓存。</li>
    </ul>
  </li>
</ol>

<h1 id="3mtrace">3.mtrace</h1>

<p>mtrace 是 Linux 系统内核自带的一个内存追踪函数。它会在每个内存申请函数（malloc、realloc、calloc）的位置记录下信息，并在每个内存释放的位置记录下 free 的内存信息。其中包含有内存申请的地址、内存申请的大小、释放内存的地址、释放内存的大小。</p>

<p>具体来说，mtrace 函数的作用如下：</p>

<ul>
  <li>安装钩子函数，用于跟踪内存分配和释放。</li>
  <li>记录有关内存分配和释放的跟踪信息。</li>
  <li>可以用于发现程序中的内存泄漏和试图释放未分配内存的情况。</li>
</ul>

<p>使用方式：</p>

<ol>
  <li>在代码中包含 &lt;mcheck.h&gt; 头文件。</li>
  <li>在程序启动时调用 mtrace() 函数，开启内存分配和释放跟踪。</li>
  <li>程序结束时，可以调用 muntrace() 函数关闭内存分配和释放跟踪。</li>
  <li>运行mtrace脚本，分析跟踪日志，生成报告。</li>
</ol>

<p>请注意，mtrace 的跟踪输出通常是文本形式，不一定易于人类阅读。GNU C 库提供了一个 Perl 脚本 mtrace，用于解析跟踪日志并生成人类可读的输出。为了获得最佳效果，建议编译时启用调试，以便在可执行文件中记录行号信息。不过，mtrace 的跟踪会带来性能损耗.如果 MALLOC_TRACE 没有指向有效且可写的路径， 则mtrace不会记录信息。</p>

<p><img src="/blog/assets/memory_check/mtrace.png" alt="mtrace" width="500px" height="250px" />
<img src="/blog/assets/memory_check/mtrace_2.png" alt="mtrace" width="650px" height="250px" /></p>

<h1 id="4strace与ltrace">4.strace与ltrace</h1>

<p>ltrace 用于跟踪程序的库函数调用，而 strace 则用于跟踪系统调用。
它们都基于 ptrace 系统调用，但跟踪库函数和跟踪系统调用之间存在差异。 通过它们，我们也可以对应用的内存申请、释放进行跟踪。</p>

<p>ltrace 的工作原理：</p>
<ul>
  <li>ptrace 附加到正在运行的程序。</li>
  <li>定位程序的 PLT。</li>
  <li>使用 PTRACE_POKETEXT 设置软件断点（int $3 指令）覆盖库函数的 PLT 中的汇编 trampoline。</li>
  <li>恢复程序执行。</li>
</ul>

<p>strace 应该也是相类似的工作原理</p>

<h2 id="41-strace">4.1 strace</h2>

<p>strace 是一个强大的 Linux 命令，用于诊断、调试和统计。它允许您跟踪正在运行的程序的系统调用和接收的信号。下面是一些关于 strace 的参数使用方法。</p>

<ul>
  <li>-c：统计每个系统调用的执行时间、次数和错误次数。 示例：打印执行 uptime 时系统调用的时间、次数和错误次数：
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strace <span class="nt">-c</span> <span class="nb">uptime</span>
</code></pre></div>    </div>
  </li>
  <li>-f：跟踪子进程，这些子进程是由当前跟踪的进程创建的。</li>
  <li>-i：在系统调用时打印指令指针。</li>
  <li>-t：跟踪的每一行都以时间为前缀。</li>
  <li>-tt：如果给出两次，则打印时间将包括微秒。</li>
  <li>-ttt：如果给定三次，则打印时间将包括微秒，并且前导部分将打印为自启动以来的秒数。</li>
  <li>-T：显示花费在系统调用上的时间。</li>
</ul>

<p>限定表达式：</p>
<ul>
  <li>-e trace=set：仅跟踪指定的系统调用集。例如，trace=open,close,read,write 表示仅跟踪这四个系统调用。</li>
  <li>-e trace=file：跟踪所有以文件名作为参数的系统调用。示例：打印执行 ls 时与文件有关的系统调用：
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strace <span class="nt">-e</span> <span class="nv">trace</span><span class="o">=</span>file <span class="nb">ls</span>
</code></pre></div>    </div>
  </li>
  <li>-e trace=process：跟踪涉及进程管理的所有系统调用。</li>
  <li>-e trace=network：跟踪所有与网络相关的系统调用。</li>
  <li>-e trace=signal：跟踪所有与信号相关的系统调用。</li>
  <li>-e trace=ipc：跟踪所有与 IPC 相关的系统调用。</li>
  <li><span style="color: red;">-e trace=memory：跟踪所有与 momory 相关的系统调用。</span></li>
</ul>

<p>其他参数：</p>
<ul>
  <li>-o 文件名：将跟踪输出写入文件而不是 stderr。</li>
  <li>-p pid：使用进程 ID pid 附加到该进程并开始跟踪</li>
</ul>

<p>下面是运行 <code class="language-plaintext highlighter-rouge">strace ls</code> 的输出
<img src="/blog/assets/memory_check/strace.png" alt="strace" width="650px" height="500px" /></p>

<h2 id="42-ltrace">4.2 ltrace</h2>

<p>ltrace 是一个用于跟踪程序库调用的 Linux 工具。它可以拦截并记录被执行进程调用的动态库函数，以及该进程接收到的信号。此外，ltrace 还可以拦截并打印程序执行的系统调用。</p>

<p>常用参数和示例：
-c：统计每个系统调用的执行时间、次数和错误次数。 示例：打印执行 uptime 时系统调用的时间、次数和错误次数：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ltrace <span class="nt">-c</span> <span class="nb">uptime</span>
</code></pre></div></div>

<ul>
  <li>-f：跟踪子进程，这些子进程是由当前跟踪的进程创建的。</li>
  <li>-i：在系统调用时打印指令指针。</li>
  <li>-t：跟踪的每一行都以时间为前缀。</li>
  <li>-tt：如果给出两次，则打印时间将包括微秒。</li>
  <li>-ttt：如果给定三次，则打印时间将包括微秒，并且前导部分将打印为自启动以来的秒数。</li>
  <li>-T：显示花费在系统调用上的时间。</li>
</ul>

<p>限定表达式：</p>

<ul>
  <li>-e trace=set：仅跟踪指定的系统调用集。例如，trace=open,close,read,write 表示仅跟踪这四个系统调用。</li>
  <li>-e trace=file：跟踪所有以文件名作为参数的系统调用。示例：打印执行 ls 时与文件有关的系统调用：
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ltrace <span class="nt">-e</span> <span class="nv">trace</span><span class="o">=</span>file <span class="nb">ls</span>
</code></pre></div>    </div>
  </li>
  <li>-e trace=process：跟踪涉及进程管理的所有系统调用。</li>
  <li>-e trace=network：跟踪所有与网络相关的系统调用。</li>
  <li>-e trace=signal：跟踪所有与信号相关的系统调用。</li>
  <li>-e trace=ipc：跟踪所有与 IPC 相关的系统调用。</li>
</ul>

<p>其他参数：</p>

<ul>
  <li>-o 文件名：将跟踪输出写入文件而不是 stderr。</li>
  <li>-p pid：使用进程 ID pid 附加到该进程并开始跟踪。</li>
</ul>

<p>下面是运行 <code class="language-plaintext highlighter-rouge">ltrace ls</code> 的输出</p>

<p><img src="/blog/assets/memory_check/ltrace.png" alt="ltrace" width="650px" height="500px" /></p>]]></content><author><name>Kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1.进程内存映射文件smaps]]></summary></entry><entry><title type="html">YUV编码</title><link href="http://localhost:4000/blog/graphic/2018-03-21-YUV.html" rel="alternate" type="text/html" title="YUV编码" /><published>2018-03-21T00:00:00+08:00</published><updated>2018-03-21T00:00:00+08:00</updated><id>http://localhost:4000/blog/graphic/YUV</id><content type="html" xml:base="http://localhost:4000/blog/graphic/2018-03-21-YUV.html"><![CDATA[<h1 id="1简介">1.简介</h1>

<p>YUV数据由Y、U、V三个分量组成，现在通常说的YUV指的是YCbCr。</p>

<p>Y：表示<strong>亮度</strong>（Luminance、Luma），占8bit（1字节）</p>

<p>Cb、Cr：表示<strong>色度</strong>（Chrominance、Chroma）</p>

<p>Cb（U）：蓝色色度分量，占8bit（1字节）</p>

<p>Cr（V）：红色色度分量，占8bit（1字节）</p>

<h1 id="2采样方式444-422-420的区别">2.采样方式(444, 422, 420的区别)</h1>
<p>把Y、U、V数据转变为R、G、B时用到</p>

<h2 id="21-采样方式">2.1 采样方式</h2>
<p>采样方式通常用A:B:C的形式来表示，比如4:4:4、4:2:2、4:2:0等</p>
<ul>
  <li>
    <p>A：假定在一块A*2个像素的概念区域，一般都是4.</p>
  </li>
  <li>
    <p>B：第1行的色度(UV)采样数目。</p>
  </li>
  <li>
    <p>C：第2行的色度(UV)采样数目</p>
  </li>
</ul>

<p>所以这里的B,C指的分别是在第一行，第二行UV采样的数目。 C的值一般要么等于B，要么等于0</p>

<p>示意图1：
<img src="/blog/assets/YUV/sampling.png" alt="sampling" /></p>

<p>示意图2</p>

<p><img src="/blog/assets/YUV/sampling_2.jpg" alt="sampling_2" /></p>

<p>上图中，不管是哪种采样格式，Y分量都是全水平、全垂直分辨率采样的，每一个像素都有自己独立的Y分量</p>

<h2 id="22-占用字节数">2.2 占用字节数</h2>

<p>如果Y,U,V分别用一个字节存储，由上可以推算出不同采样方式下每个像素需要的平均字节数。
(现在也有Y,U,V分别用10bit储存的格式, 见#7)</p>

<ul>
  <li>
    <p>4:4:4</p>

    <p>一个像素YUV各占一个字节，总共3个字节 24bit</p>
  </li>
  <li>
    <p>4:2:2</p>

    <p>8个像素 ： 8个Y + 2个U +2个V +2个U +2个V = 16字节</p>

    <p>每个像素：16字节/8 = 2个字节 16bit</p>
  </li>
  <li>
    <p>4:2:0</p>

    <p>8个像素 ： 8个Y + 2个U +2个V  = 12字节</p>

    <p>每个像素：12字节/8 = 1.5个字节 12bit</p>
  </li>
</ul>

<h1 id="3存储方式planar-semi-planar和packed的区别">3.存储方式(Planar, Semi-Planar和Packed的区别)</h1>

<p>存储格式，表示的是Y、U、V数据是如何排列和存储的。 读取或写入Y、U、V数据时用到.</p>

<h2 id="31-分类">3.1 分类</h2>
<p>YUV的存储格式可以分为3大类：</p>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>特点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Planar(平面)</td>
      <td>Y、U、V分量分开单独存储,名称通常以字母p结尾,  3个planar</td>
    </tr>
    <tr>
      <td>Semi-Planar（半平面）</td>
      <td>Y分量单独存储，U、V分量交错存储, 名称通常以字母sp结尾, 1个planar</td>
    </tr>
    <tr>
      <td>Packed（紧凑）</td>
      <td>或者叫Interleaved(交错), Y、U、V分量交错存储,  1个planar</td>
    </tr>
  </tbody>
</table>

<p><img src="/blog/assets/YUV/yuv.png" alt="" /></p>

<h2 id="32-444">3.2 444</h2>

<p><img src="/blog/assets/YUV/444.png" alt="" width="540px" height="150px" /></p>

<p>I444 和YV24 主要是UV次序的不同</p>

<p><img src="/blog/assets/YUV/I444.png" alt="" width="540px" height="200px" /></p>

<p>semi-planar NV24 和NV42 主要是UV交替次序的不同</p>

<p><img src="/blog/assets/YUV/NV24.png" alt="" width="540px" height="200px" /></p>

<h2 id="33-422">3.3 422</h2>

<p><img src="/blog/assets/YUV/422.png" alt="" width="540px" height="150px" /></p>

<p><strong>Planar I422 YV16 区别：VU 次序</strong></p>

<p><img src="/blog/assets/YUV/YV16.png" alt="" width="540px" height="200px" /></p>

<p><strong>Semi-Planar NV16 NV61 区别：VU 次序</strong></p>

<p><img src="/blog/assets/YUV/NV16.png" alt="" width="540px" height="200px" /></p>

<p><strong>Packed UYVY YUYV YVYU 区别：VU 次序</strong></p>

<p><img src="/blog/assets/YUV/YUYV.png" alt="" width="540px" height="200px" /></p>

<h2 id="34-420">3.4 420</h2>

<p><img src="/blog/assets/YUV/420.png" alt="" width="540px" height="150px" /></p>

<p><strong>Planar I420 YV12</strong></p>

<p><img src="/blog/assets/YUV/I420.png" alt="" width="540px" height="200px" /></p>

<p><strong>采样方式420 I420，像素示意图</strong></p>

<p><img src="/blog/assets/YUV/I420_pixel.png" alt="" width="540px" height="200px" /></p>

<p><strong>Semi-Planar NV12 NV21</strong></p>

<p><img src="/blog/assets/YUV/NV12.png" alt="" width="540px" height="200px" /></p>

<p><strong>采样方式420，各种存储方式， 像素示意图</strong></p>

<p><img src="/blog/assets/YUV/420_pixel.png" alt="" width="540px" height="350px" /></p>

<h1 id="4借助ffmpeg格式转换">4.借助ffmpeg格式转换</h1>

<ol>
  <li>PNG -&gt; YUV
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> <span class="k">in</span>.png <span class="nt">-s</span> 512x512 <span class="nt">-pix_fmt</span> yuv420p out.yuv
</code></pre></div>    </div>
  </li>
  <li>YUV -&gt; PNG
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-s</span> 512x512 <span class="nt">-pix_fmt</span> yuv420p <span class="nt">-i</span> <span class="k">in</span>.yuv out.jpg
</code></pre></div>    </div>
  </li>
</ol>

<p><strong>YUV 文件只是存储数据的文件，没有大小信息，所以转换时一定要给出它的尺寸</strong></p>

<p><strong>PNG 文件含有尺寸信息，所以转YUV时可以不指定大小，默认原大小</strong></p>

<h1 id="5借助ffplay显示yuv">5.借助ffplay显示YUV</h1>

<p>可以通过ffplay显示YUV数据。</p>

<ul>
  <li>
    <p>YUV中直接存储的是所有像素的颜色信息（可以理解为是图像的一种原始数据）</p>
  </li>
  <li>
    <p>必须得设置YUV的尺寸（-s）、像素格式（-pix_fmt）才能正常显示</p>
  </li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffplay <span class="nt">-s</span> 512x512 <span class="nt">-pix_fmt</span> yuv420p <span class="k">in</span>.yuv
<span class="c"># 在ffplay中</span>
<span class="c"># -s已经过期，建议改为：-video_size</span>
<span class="c"># -pix_fmt已经过期，建议改为：-pixel_format</span>
ffplay <span class="nt">-video_size</span> 512x512 <span class="nt">-pixel_format</span> yuv420p <span class="k">in</span>.yuv
</code></pre></div></div>

<h1 id="6glsl实现yuv转rgba">6.GLSL实现YUV转RGBA</h1>

<h2 id="61-基本计算公式">6.1 基本计算公式</h2>

<p>根据的标准不同，有不同的计算公式。下面是一个可以在shader中使用的计算方法。 只要先得到Y,U,V， 就可以按下面方法转换RGB</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="s">"   yuv.y = yuv.y - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.z = yuv.z - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.r = yuv.x + 1.402 * yuv.z;                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.g = yuv.x - 0.34413 * yuv.y - 0.71414 * yuv.z;    </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.b = yuv.x + 1.772 * yuv.y;                        </span><span class="se">\n</span><span class="s">"</span>
</code></pre></div></div>
<p>YUV到RGBA的转换其实就两个要点</p>
<ul>
  <li>构建合适的纹理</li>
  <li>在shader中提前YUV</li>
</ul>

<h2 id="62-yuv444p-argb">6.2 YUV444P-&gt;ARGB</h2>

<h3 id="621-构建纹理">6.2.1 构建纹理</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_yuv444p</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_REPEAT</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_REPEAT</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>

    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_RED</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_RED</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>

    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="622-在shader中提取yuv">6.2.2 在shader中提取YUV</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">yuv444_2_rgba_frag_src</span> <span class="o">=</span>    
    <span class="s">"uniform sampler2D    Sampler;                              </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"varying highp vec2   TexCoord;                             </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"void main (void)                                           </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"{                                                          </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   highp vec3 yuv;                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   highp vec3 rgb;                                         </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"   yuv.x = texture2D(Sampler, TexCoord).r;                 </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.y = texture2D(Sampler, vec2(TexCoord.x, TexCoord.y+0.3333333)).r;</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.z = texture2D(Sampler, vec2(TexCoord.x, TexCoord.y+0.6666667)).r;</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.y = yuv.y - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.z = yuv.z - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
<span class="c1">// 矩阵计算方法</span>
    <span class="s">"   rgb = mat3(                                           </span><span class="se">\n</span><span class="s">"</span>
                    <span class="s">"1,       1,        1,                    </span><span class="se">\n</span><span class="s">"</span>
                    <span class="s">"0,     -.34413,    1.772,                </span><span class="se">\n</span><span class="s">"</span>
                    <span class="s">"1.402, -.71414,    0                     </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"              ) * yuv;                                   </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"   gl_FragColor = vec4(rgb, 1.0);                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"}                                                        </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

</code></pre></div></div>

<h2 id="63-nv24-argb">6.3 NV24-&gt;ARGB</h2>

<h3 id="631-构建纹理">6.3.1 构建纹理</h3>

<p>这里需要构建两个纹理，一个是Y的纹理， 一个是UV的纹理</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_nv24_y</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">y_data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
  
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
    
    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">y_data</span><span class="p">);</span>
    
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_nv24_uv</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">uv_data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
  
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
    
    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">uv_data</span><span class="p">);</span>
    
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="632-在shader中提取yuv">6.3.2 在shader中提取YUV</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nv24_2_rgba_frag_src</span> <span class="o">=</span>        
    <span class="s">"uniform sampler2D    Sampler_y;                            </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"uniform sampler2D    Sampler_uv;                           </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"varying highp vec2   TexCoord;                             </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"void main (void)                                           </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"{                                                          </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   highp vec3 yuv;                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   highp vec3 rgb;                                         </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"                                                           </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"   yuv.x = texture2D(Sampler_y, TexCoord).r;             </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.y = texture2D(Sampler_uv, TexCoord).r;            </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"   yuv.z = texture2D(Sampler_uv, TexCoord).a;            </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.y = yuv.y - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.z = yuv.z - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.r = yuv.x + 1.402 * yuv.z;                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.g = yuv.x - 0.34413 * yuv.y - 0.71414 * yuv.z;    </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.b = yuv.x + 1.772 * yuv.y;                        </span><span class="se">\n</span><span class="s">"</span>        
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>    
    <span class="s">"   gl_FragColor = vec4(rgb, 1.0);                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"}                                                        </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="64-nv16-argb">6.4 NV16-&gt;ARGB</h2>

<h3 id="641-构建纹理">6.4.1 构建纹理</h3>

<p>这里需要构建两个纹理，一个是Y的纹理， 一个是UV的纹理</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_nv16_y</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
  
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
    
    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
    
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>注意glTexImage2D()的第四参数值发生了变化</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_nv16_uv</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
  
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
    
    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
    
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="642-在shader中提取yuv">6.4.2 在shader中提取YUV</h3>

<p>与NV24方法相同</p>

<h2 id="65-nv12-argb">6.5 NV12-&gt;ARGB</h2>

<h3 id="651-构建纹理">6.5.1 构建纹理</h3>

<p>这里需要构建两个纹理，一个是Y的纹理， 一个是UV的纹理</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_nv12_y</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
  
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
    
    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
    
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>注意glTexImage2D()的第四,五参数值发生了变化</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="n">GLuint</span> <span class="nf">build_texture_4_nv12_uv</span><span class="p">(</span><span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">GLuint</span> <span class="n">texture</span><span class="p">;</span>
  
    <span class="n">glGenTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">texture</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture</span><span class="p">);</span>

    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="n">GL_CLAMP_TO_EDGE</span><span class="p">);</span>        
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>    
    <span class="n">glTexParameteri</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="n">GL_LINEAR</span><span class="p">);</span>
    <span class="n">CHK_GL_ERR</span><span class="p">();</span>
    
    <span class="n">glTexImage2D</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="n">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
    <span class="n">CHK_GL_ERR</span><span class="p">();</span>
    
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> 
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="652-在shader中提取yuv">6.5.2 在shader中提取YUV</h3>

<p>与NV24方法相同</p>

<h2 id="66-直接提取yuv数据">6.6 直接提取YUV数据</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">yuv420_frag_src</span> <span class="o">=</span>
    <span class="s">"#version 300 es                                          </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"#extension GL_OES_EGL_image_external_essl3 : enable      </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"#extension GL_EXT_YUV_target : enable                    </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"precision mediump float;                                 </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"uniform __samplerExternal2DY2YEXT uTexSampler;           </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"in vec2 varTexCoord;                                     </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"out vec4 rgb;                                            </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"void main()                                              </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"{                                                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   vec4 yuv = texture(uTexSampler, varTexCoord);         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.y = yuv.y - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   yuv.z = yuv.z - 0.5;                                  </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"                                                         </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.r = yuv.x + 1.402 * yuv.z;                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.g = yuv.x - 0.34413 * yuv.y - 0.71414 * yuv.z;    </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.b = yuv.x + 1.772 * yuv.y;                        </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"   rgb.a = 1.0;                                          </span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"}                                                        </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

</code></pre></div></div>

<h1 id="7-10bit-存储">7 10bit 存储</h1>

<p>10bit YUV就是每个 Y、U、V 分量分别占用10个bit ，由于实际处理中我们是以字节为单位进行存储和处理的，所以最终处理的数据是以2个字节来存储 10bit 的有效数据。这样 在10bit YUV中 ，每个像素(以Y 分量为例)将占用 16bit 两个字节，但是其中 6 个 bit 是 padding ，补 0 。
<img src="/blog/assets/YUV/10bit.webp" alt="" /></p>

<p>最近发现越来越多的视频解码出来是 10bit YUV 的图像，毫无疑问 10bit YUV 会有更大的取值范围，能表现出更丰富的颜色信息。</p>

<p><strong>10bit纹理数据的加载</strong></p>

<p>可以利用2个通道 8bit 格式如 GL_LUMINANCE_ALPHA 或者 GL_RG8 完成加载 16bit 图像数据到纹理，然后采样的时候再将 2 个 8bit 数据转换成 16bit.</p>

<p>在 shader 采样之后，每一个通道的值都会被归一化，8bit 归一化之前的范围是 0~255，16bit 归一化之前的范围是 0~65535, 2 个 8bit 值进行移位求和转成 16bit 值，最后再进行归一化。</p>

<p>shader脚本</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="nx">version</span> <span class="mi">300</span> <span class="nx">es</span>
<span class="nx">precision</span> <span class="nx">highp</span> <span class="nx">float</span><span class="p">;</span>
<span class="k">in</span> <span class="nx">vec2</span> <span class="nx">v_texCoord</span><span class="p">;</span>
<span class="nx">uniform</span> <span class="nx">sampler2D</span> <span class="nx">u_texture</span><span class="p">;</span>
<span class="nx">out</span> <span class="nx">vec4</span> <span class="nx">outColor</span><span class="p">;</span>
<span class="k">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">vec4</span> <span class="nx">col</span> <span class="o">=</span> <span class="nf">texture</span><span class="p">(</span><span class="nx">u_texture</span><span class="p">,</span> <span class="nx">v_texCoord</span><span class="p">);</span>
    <span class="nx">float</span> <span class="nx">val</span> <span class="o">=</span> <span class="mf">255.0</span> <span class="o">*</span> <span class="nx">col</span><span class="p">.</span><span class="nx">r</span> <span class="o">+</span> <span class="nx">col</span><span class="p">.</span><span class="nx">a</span> <span class="o">*</span> <span class="mf">255.0</span> <span class="o">*</span> <span class="nf">pow</span><span class="p">(</span><span class="mf">2.0</span><span class="p">,</span> <span class="mf">8.0</span><span class="p">);</span>
    <span class="nx">outColor</span> <span class="o">=</span> <span class="nf">vec4</span><span class="p">(</span><span class="nf">vec3</span><span class="p">(</span><span class="nx">val</span> <span class="o">/</span> <span class="mf">65535.0</span><span class="p">),</span> <span class="mf">1.0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>纹理加载</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">glBindTexture</span><span class="p">(</span><span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="nx">m_uTextureId</span><span class="p">);</span>

    <span class="nf">glTexImage2D </span><span class="p">(</span> <span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="nx">m_RenderImage</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">m_RenderImage</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">GL_LUMINANCE_ALPHA</span><span class="p">,</span> <span class="nx">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="nx">m_RenderImage</span><span class="p">.</span><span class="nx">ppPlane</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="nf">glTexParameterf</span><span class="p">(</span><span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="nx">GL_TEXTURE_WRAP_S</span><span class="p">,</span> <span class="nx">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
    <span class="nf">glTexParameterf</span><span class="p">(</span><span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="nx">GL_TEXTURE_WRAP_T</span><span class="p">,</span> <span class="nx">GL_CLAMP_TO_EDGE</span><span class="p">);</span>
    <span class="nf">glTexParameteri</span><span class="p">(</span><span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="nx">GL_TEXTURE_MIN_FILTER</span><span class="p">,</span> <span class="nx">GL_LINEAR</span><span class="p">);</span>
    <span class="nf">glTexParameteri</span><span class="p">(</span><span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="nx">GL_TEXTURE_MAG_FILTER</span><span class="p">,</span> <span class="nx">GL_LINEAR</span><span class="p">);</span>
    <span class="nf">glBindTexture</span><span class="p">(</span><span class="nx">GL_TEXTURE_2D</span><span class="p">,</span> <span class="nx">GL_NONE</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>Kevin</name></author><category term="graphic" /><summary type="html"><![CDATA[1.简介]]></summary></entry></feed>