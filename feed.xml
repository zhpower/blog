<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-05-20T16:35:13+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">学习笔记</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>kevin_zh</name></author><entry><title type="html">linux dev misc</title><link href="http://localhost:4000/blog/jekyll/2022-05-02-App_misc.html" rel="alternate" type="text/html" title="linux dev misc" /><published>2022-05-02T00:00:00+08:00</published><updated>2022-05-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/App_misc</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2022-05-02-App_misc.html"><![CDATA[<h1 id="pthread_mutex_tpthread_cond_t">pthread_mutex_t&amp;pthread_cond_t</h1>

<p>函数定义：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">pthread_cond_wait</span><span class="o">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="o">,</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="o">)</span>

<span class="kt">int</span> <span class="nf">pthread_cond_broadcast</span><span class="o">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="o">)</span>
</code></pre></div></div>

<p>函数说明：</p>

<p>pthread_cond_wait ：有两个输入参数，一个是pthread_cond_t，是函数将要等待的信号，另一个是 pthread_mutex_t，一个互斥锁。<span style="color:red">用于对信号量进行保护，防止多个线程同时对其进行操作</span>。在线程开始等待信号量前，必须由本线程对互斥锁进行锁定，然后pthread_cond_wait会更新条件等待队列，并且释放互斥量，允许其他线程进行访问；当cond 满足条件允许线程继续执行时，wait_cond也会先对mutex 进行锁定，对cond进行处理，然后再允许线程继续运行。所以pthread_cond_wait() 后的pthread_mutex_unlock()还是必要的。</p>

<p><img src="/blog/assets/linux_dev_misc/mutex.png" alt="mutex_cond" /></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">static</span> <span class="n">pthread_mutex_t</span> <span class="n">mtx</span> <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
<span class="k">static</span> <span class="n">pthread_cond_t</span> <span class="n">cond</span> <span class="o">=</span> <span class="n">PTHREAD_COND_INITIALIZER</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">func_1</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">){</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 start"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 lock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 wait cond"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 unlock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_1 end"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">func_2</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">arg</span><span class="p">){</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 start"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 lock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 wait cond"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 unlock mtx"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mtx</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"func_2 end"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">pthread_t</span> <span class="n">tid1</span><span class="p">,</span> <span class="n">tid2</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main create thread"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">func_1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">func_2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main boradcast signal"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_cond_broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
    <span class="c1">// pthread_cond_signal(&amp;cond);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main join thread"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"main end"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="char-a-vs-char-a">char *a vs char a[]</h1>

<p>首先要搞清楚编译程序占用的内存的分区形式：</p>

<p>一、预备知识—程序的内存分配</p>

<p>一个由c/C++编译的程序占用的内存分为以下几个部分:</p>

<ul>
  <li>栈区（stack）—由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>
  <li>堆区（heap）—一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。</li>
  <li>全局区（静态区）（static）—全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li>
  <li>字符常量区—常量字符串就是放在这里的。程序结束后由系统释放。</li>
  <li>程序代码区</li>
</ul>

<p>这是一个别人写的，非常详细</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>    <span class="c1">//全局初始化区</span>
<span class="kt">char</span> <span class="n">p1</span><span class="p">;</span>    <span class="c1">//全局未初始化区</span>
<span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>            <span class="c1">//栈</span>
    <span class="kt">char</span> <span class="n">s</span><span class="p">[]</span><span class="o">=</span><span class="s">"abc"</span><span class="p">;</span>   <span class="c1">//栈</span>
    <span class="kt">char</span> <span class="n">p2</span><span class="p">;</span>          <span class="c1">//栈</span>
    <span class="kt">char</span> <span class="n">p3</span><span class="o">=</span><span class="s">"123456"</span><span class="p">;</span> <span class="c1">//123456\0在常量区，p3在栈上。</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">//全局（静态）初始化区</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span> <span class="c1">//分配得来得10和20字节的区域就在堆区。</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="s">"123456"</span><span class="p">);</span> <span class="c1">//123456\0放在常量区，编译器可能会将它与p3指向的"123456"优化成一个地方。</span>
<span class="p">}</span>
</code></pre></div></div>

<p>首先，我们要知道</p>

<ol>
  <li>char *a中的a是个指向字符类型的指针，这是一个变量；</li>
  <li>char a[]中的a也是一个指向字符类型的指针，但它是一个常量，<span style="color:red">常量是不能再给它赋值的</span>，就像比不能写 3=2 这样的代码来给3赋值, <span style="color:Red">但可以对她指向的内存内容进行修改</span>。</li>
</ol>

<p>通过阅读我们可以知道，char * a=“abc”和char a[]=”abc”在内存中存放是有差别的，</p>

<ol>
  <li>
    <p>char *a=“abc”中的“abc”是存放于<strong>字符常量区的，指针a只是指向了这个地址</strong>；</p>
  </li>
  <li>
    <p>char a[]=”abc”中的“abc”其实是<span style="color:red">放在栈中的</span>，它是字符常量区中“abc”的一份拷贝。</p>
  </li>
</ol>

<p>看看下面这段代码你就明白了</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">a1</span>   <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    <span class="kt">char</span>   <span class="n">a2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">a3</span>   <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    <span class="kt">char</span>   <span class="n">a4</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"abc"</span><span class="p">;</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"char * a:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a1</span><span class="p">);</span><span class="c1">//打印a1的值 </span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"char a2[]:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">a2</span><span class="p">);</span><span class="c1">//打印a2的值 </span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"char *a3:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a3</span><span class="p">);</span><span class="c1">//打印a2的值 </span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"char a4[]:%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">a4</span><span class="p">);</span><span class="c1">//打印a2的值 </span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>我在这段代码里声明了两个字符指针变量、两个数组常量指针，代码执行结果如下：</p>

<p>显而易见字符指针变量a 和a3的值是一样的，这说明它们指向同一块内存，这块内存就是上文所说的<strong>字符常量区</strong>；</p>

<p>字符数组指针a2和a3的值不同且相差4字节，这说明它们指向的内存是不相同的，它们的“abc”其实是对字符常量区中“abc”的一份拷贝，并且数据是存放在栈中的，至于它们的地址相差四个字节，是因为字符数组中在结尾加了一个结束符——‘\0’（也称为NUL）。</p>

<p>至于之前说的“不能直接将一个字符串常量赋值给字符数组”可以这样理解：的确是不能直接赋值，但可以通过复制以后再赋值呀，即把字符串拷贝到栈中，然后给数组指针赋值！代码的话就是：char a[]=“abc”。</p>

<p>我们再来考虑一个问题：能不能修改char *a指向的字符常量区的值呢？
代码如下：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">a</span><span class="o">=</span><span class="s">"abc"</span><span class="p">;</span>
    <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="sc">'b'</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="n">a</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
<span class="p">}</span>

</code></pre></div></div>
<p>我将指针a所指向的第一个字符——‘a’修改为字符‘b’。
结果程序崩溃了</p>

<p>这说明<strong>字符常量区的数据是不可以修改的</strong>！为什么呢？因为在你的程序中可能有很多个类似于char *a这样的指针变量在使用到了字符常量区的“abc”，如果你在这里通过指针修改了“abc”的值，那么程序中使用“abc”的其他地方就变得不确定了！</p>

<p>其实如果你翻看了《c和指针》你还会发现，在K&amp;R C标准中，这里的修改操作是可以的，因为在该标准中字符串常量是分开存储的，而不是只存储在一个地方。</p>

<p>怎么样，有没有感受到C语言指针的危险和魅力所在？</p>

<p><span style="background: yellow;">char a[ ] 的应用场景:</span></p>

<p>编译器首先判断数组的容量，然后<strong>分配一片内存来存储数组</strong>的每个元素。如果是字符串赋值方式，则容量是strlen(字符串)+1, 赋值时在尾部加 0</p>

<p>char a[ ] <strong>必须</strong>在申明的同时给它赋值， 否则编译器无法知道应该分配多大的内存给该数组</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="c1">//如下操作会导致 编译错误，编译器不能知道d这个数组的大小</span>
     <span class="kt">char</span> <span class="n">d</span><span class="p">[];</span>
     <span class="kt">char</span> <span class="n">d</span><span class="p">[]</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</code></pre></div></div>

<p>char a[ ]的两种赋值方式， char a[ ]的优点</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"dfdsfsdfas"</span><span class="p">;</span>  <span class="c1">// char a[]的优点 直接把字符串复制给某个数组，长度+1</span>
<span class="kt">char</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'a'</span><span class="p">,</span><span class="sc">'a'</span><span class="p">,</span><span class="sc">'b'</span><span class="p">,</span><span class="sc">'c'</span><span class="p">};</span>  <span class="c1">// 不会有结尾符\0</span>
</code></pre></div></div>

<p>sizeof(a) 返回的是 <strong>a数组容量</strong> * <strong>sizeof(a[0])</strong></p>

<p><span style="background: yellow;">char *s = “dfdsf” 的应该场景:</span></p>

<p>把s指向内存的字符串常量区，不能通过s[index] 来修改它, 修改则会crash
sizeof(s) 返回的是 <strong>sizeof(char *)</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cm">/*-----------------------------------------------------------------------------
 * char b[], 遵循 “右左原则 ” 来查看变量的类型， 所以它是一个数组，字符数组
 *           它有两种赋值方式
 *            1. char b[] = {'1','2','3'};
 *            2. char b[] = "123";  等价与  char b[4] = {'1','2','3', 0};
 *------------------------------------------------------------------------------*/</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">a</span>   <span class="o">=</span> <span class="s">"12345"</span><span class="p">;</span>    <span class="c1">// a 是指针， 指向了字符常量区中"12345"的地址</span>
    <span class="kt">char</span>  <span class="n">b</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"12345"</span><span class="p">;</span>    <span class="c1">// b 是首先是数组，存储的元素是{'1', '2','3','4', '5', 0}; </span>
    <span class="kt">char</span> <span class="n">bb</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'1'</span><span class="p">,</span> <span class="sc">'2'</span><span class="p">,</span><span class="sc">'3'</span><span class="p">,</span><span class="sc">'4'</span><span class="p">,</span> <span class="sc">'5'</span><span class="p">};</span> <span class="c1">// bb 是没有结尾符的 </span>
    <span class="kt">char</span> <span class="n">bbb</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'1'</span><span class="p">,</span> <span class="sc">'2'</span><span class="p">,</span><span class="sc">'3'</span><span class="p">,</span><span class="sc">'4'</span><span class="p">,</span> <span class="sc">'5'</span><span class="p">};</span>
    <span class="kt">int</span>   <span class="n">c</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>

    <span class="c1">// char a[ ] 需要在申明的同时给它赋值， 否则编译器无法知道应该分配多大的内存给该数组</span>
    <span class="c1">// 编译错误，编译器不能知道d这个数组的大小</span>
    <span class="c1">// char d[];</span>
    <span class="c1">// char d[] = a;</span>

    <span class="c1">// 编译错误 把指针赋值数组</span>
    <span class="c1">// b = a;</span>

    <span class="c1">//sizeof 返回变量占用的内存大小</span>
    <span class="c1">// 数组的sizeof 计算是 sizeof(成员)×数目</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"sizeof(a):%ld sizeof(b):%ld sizeof(bb):%ld sizeof(bbb):%ld sizeof(c):%ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> \
            <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">bb</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">bbb</span><span class="p">),</span>    <span class="k">sizeof</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>

    <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'g'</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s():%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">);</span>


    <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'r'</span><span class="p">;</span> <span class="c1">// 修改字符常量区会导致 crash</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s():%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">);</span>

    <span class="n">a</span> <span class="o">=</span> <span class="s">"dfasdfa"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出如下:</p>
<pre><code class="language-C">sizeof(a):8 sizeof(b):6 sizeof(bb):5 sizeof(bbb):5 sizeof(c):20
main():23
Segmentation fault (core dumped)
</code></pre>]]></content><author><name>Kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[pthread_mutex_t&amp;pthread_cond_t]]></summary></entry><entry><title type="html">位运算</title><link href="http://localhost:4000/blog/jekyll/2022-04-27-bit.html" rel="alternate" type="text/html" title="位运算" /><published>2022-04-27T00:00:00+08:00</published><updated>2022-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/bit</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2022-04-27-bit.html"><![CDATA[<h1 id="1位运算概述">1.位运算概述</h1>

<p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、\/)都是叫位运算，即将符号位共同参与运算的运算。</p>

<p>口说无凭，举一个简单的例子来看下 CPU 是如何进行计算的，比如这行代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">35</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">47</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</code></pre></div></div>
<p>计算两个数的和，因为在计算机中都是以二进制来进行运算，所以上面我们所给的 int 变量会在机器内部先转换为二进制在进行相加：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>35:  0 0 1 0 0 0 1 1
47:  0 0 1 0 1 1 1 1
————————————————————
82:  0 1 0 1 0 0 1 0
</code></pre></div></div>

<p>所以，相比在代码中直接使用(<code class="language-plaintext highlighter-rouge">+、-、*、/ </code>)运算符，合理的运用位运算更能显著提高代码在机器上的执行效率。</p>

<h1 id="2位运算概览">2.位运算概览</h1>

<p>![[image-20230313173955848.png]]</p>

<h1 id="3与运算符">3.与运算符&amp;</h1>

<p>定义：参加运算的两个数据，按二进制位进行”与”运算。</p>

<h2 id="31-运算规则">3.1 运算规则：</h2>

<p><code class="language-plaintext highlighter-rouge">0&amp;0=0  0&amp;1=0  1&amp;0=0  1&amp;1=1</code></p>

<p>总结：两位同时为1，结果才为1，否则结果为0。</p>

<p>例如：3&amp;5 即 0000 0011&amp; 0000 0101 = 0000 0001，因此 3&amp;5 的值得1。</p>

<p>注意：负数按补码形式参加按位与运算。</p>

<h2 id="32-与运算符用途">3.2 与运算符用途</h2>

<h3 id="321清零">3.2.1清零</h3>

<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>

<h3 id="322取一个数的指定位">3.2.2取一个数的指定位</h3>

<p>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p>

<h3 id="323判断奇偶">3.2.3判断奇偶</h3>

<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a \&amp; 1) == 0)代替if (a \% 2 == 0)来判断a是不是偶数。</p>

<h1 id="4-或运算符">4 或运算符|</h1>

<p>定义：参加运算的两个对象，按二进制位进行”或”运算。</p>

<h2 id="41运算规则">4.1运算规则：</h2>

<table>
  <tbody>
    <tr>
      <td>0</td>
      <td>0=0  0</td>
      <td>1=1  1</td>
      <td>0=1  1</td>
      <td>1=1</td>
    </tr>
  </tbody>
</table>

<p>总结：参加运算的两个对象只要有一个为1，其值为1。</p>

<table>
  <tbody>
    <tr>
      <td>例如：3</td>
      <td>5即 0000 0011</td>
      <td>0000 0101 = 0000 0111，因此，3</td>
      <td>5的值得7。　</td>
    </tr>
  </tbody>
</table>

<p>注意：负数按补码形式参加按位或运算。</p>

<h2 id="42或运算的用途">4.2或运算的用途：</h2>

<h3 id="421常用来对一个数据的某些位设置为1">4.2.1常用来对一个数据的某些位设置为1</h3>

<table>
  <tbody>
    <tr>
      <td>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X</td>
      <td>Y=1010 1111）即可得到。</td>
    </tr>
  </tbody>
</table>

<h1 id="5异或运算符">5异或运算符^</h1>

<p>定义：参加运算的两个数据，按二进制位进行”异或”运算。</p>

<h2 id="51-运算规则">5.1 运算规则：</h2>

<p>0^0=0  0^1=1  1^0=1  1^1=0</p>

<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</p>

<p>异或的几条性质:</p>

<ul>
  <li>1、交换律</li>
  <li>2、结合律 (a^b)^c == a^(b^c)</li>
  <li>3、对于任何数x，都有 x^x=0，x^0=x</li>
  <li>4、自反性: a^b^b=a^0=a;</li>
</ul>

<h2 id="52-异或运算的用途">5.2 异或运算的用途：</h2>

<h3 id="521翻转指定位">5.2.1翻转指定位</h3>

<p>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p>

<h3 id="522与0相异或值不变">5.2.2与0相异或值不变</h3>

<p>例如：1010 1110 ^ 0000 0000 = 1010 1110</p>

<h3 id="523交换两个数">5.2.3交换两个数</h3>

<pre><code class="language-C">void Swap(int &amp;a, int &amp;b){  
    if (a != b){  
        a ^= b;  
        b ^= a;  
        a ^= b;  
    }  
}  
</code></pre>

<h1 id="6取反运算符">6取反运算符~</h1>

<p>定义：参加运算的一个数据，按二进制进行”取反”运算。</p>

<h2 id="61-运算规则">6.1 运算规则：　</h2>

<p>~1=0
~0=1</p>

<p>总结：对一个二进制数按位取反，即将0变1，1变0。</p>

<h2 id="62-取反运算符的用途">6.2 取反运算符的用途：</h2>

<h3 id="621使一个数的最低位为零">6.2.1使一个数的最低位为零</h3>

<p>使a的最低位为0，可以表示为：a &amp; ~1。~1的值为 1111 1111 1111 1110，再按”与”运算，最低位一定为0。因为” ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p>

<h1 id="7左移运算符">7.左移运算符«</h1>

<p>定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p>

<p>设 a=1010 1110，a = a« 2 将a的二进制位左移2位、右补0，即得a=1011 1000。</p>

<h2 id="71-1-左移-1位-相当于乘2">7.1 «1 左移 1位 相当于乘2</h2>
<p>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>

<h1 id="8右移运算符">8右移运算符»</h1>

<p>定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p>

<p>例如：a=a»2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。</p>

<h2 id="811-右移一位相当于除2">8.1 »1 右移一位相当于除2</h2>
<p>操作数每右移一位，相当于该数除以2。</p>

<h1 id="9复合赋值运算符">9复合赋值运算符</h1>

<p>位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是：</p>

<p>&amp;=        例：a&amp;=b    相当于     a=a&amp;b</p>

<table>
  <tbody>
    <tr>
      <td>=        例：a</td>
      <td>=b    相当于     a=a</td>
      <td>b</td>
    </tr>
  </tbody>
</table>

<p>&gt;&gt;=      例：a»=b   相当于     a=a»b</p>

<p>«=      例：a«=b     相当于      a=a« b</p>

<p>^=        例：a^=b    相当于   a=a^b</p>

<p>运算规则：和前面讲的复合赋值运算符的运算规则相似。</p>

<p>不同长度的数据进行位运算：如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。</p>

<p>以”与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行”与运算”，右端对齐后，左边不足的位依下面三种情况补足，</p>

<ul>
  <li>1）如果整型数据为正数，左边补16个0。</li>
  <li>2）如果整型数据为负数，左边补16个1。</li>
  <li>3）如果整形数据为无符号数，左边也补16个0。
如：long a=123；int b=1；计算a&amp; b。</li>
</ul>

<p>如：long a=123；int b=-1；计算a&amp; b。</p>

<p>如：long a=123；unsigned intb=1；计算a &amp; b。</p>]]></content><author><name>kevin_zh</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1.位运算概述]]></summary></entry><entry><title type="html">ffmpeg命令</title><link href="http://localhost:4000/blog/jekyll/2021-04-27-ffmpeg.html" rel="alternate" type="text/html" title="ffmpeg命令" /><published>2021-04-27T00:00:00+08:00</published><updated>2021-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/ffmpeg</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2021-04-27-ffmpeg.html"><![CDATA[<h3 id="01-视频分割">01. 视频分割</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-ss</span> 00:00:00 <span class="nt">-i</span> input.mp4 <span class="nt">-c</span> copy <span class="nt">-t</span> 60 output.mp4
</code></pre></div></div>
<p>-ss 表示视频分割的起始时间，-t 表示分割时长，同时也可以用 00:01:00表示</p>

<p>==<em>注意</em>== ：-ss 要放在 -i 之前</p>

<h3 id="02-视频区域裁剪">02. 视频区域裁剪：</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> 3.mkv <span class="nt">-filter_complex</span> <span class="nv">crop</span><span class="o">=</span>1024:50:0:550 <span class="nt">-y</span> 4.mkv  
</code></pre></div></div>
<h3 id="03-视频预览">03. 视频预览</h3>
<p>ffplay 3.mkv -vf crop=1024:50:0:550</p>

<h3 id="04-视频放大缩小">04. 视频放大,缩小</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg  <span class="nt">-i</span> 2.mp4 <span class="nt">-vf</span> <span class="s2">"scale=1280:64"</span> 4.mp4
</code></pre></div></div>
<p>==scale== =w:h 表示放大后的大小</p>

<h3 id="05-列出所有format">05. 列出所有format</h3>
<p>// list all pix format</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-pix_fmts</span> 
</code></pre></div></div>
<h3 id="06-图片转换">06. 图片转换</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> temp.jpg -s 1024x680 -pix_fmt yuvj420p 9.yuv
ffmpeg.exe <span class="nt">-i</span> agf-dog-1280x960.jpg  <span class="nt">-vf</span> <span class="nv">scale</span><span class="o">=</span>1920:1080 agf-dog-1920x1080.jpg
</code></pre></div></div>
<h3 id="07-视频format转换">07. 视频format转换</h3>

<p>YUV -&gt; RGB</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-s</span> 360x270 <span class="nt">-pix_fmt</span> yuv420p <span class="nt">-i</span>  2_test_360x270_50.yuv <span class="nt">-pix_fmt</span> rgb24  aaaa.rgb  
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-s</span> 640x480 <span class="nt">-pix_fmt</span> nv12 <span class="nt">-i</span> 640x480_1.jpg <span class="nt">-vf</span> <span class="nv">scale</span><span class="o">=</span>640:480,setsar<span class="o">=</span>1:1 640x480_1_nv12.yuv <span class="nt">-hide_banner</span>  
</code></pre></div></div>
<h3 id="08-视频叠加">08. 视频叠加</h3>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input1 <span class="nt">-i</span> input2 <span class="nt">-filter_complex</span> <span class="nv">overlay</span><span class="o">=</span>x:y output
</code></pre></div></div>
<h3 id="09-视频旋转">09. 视频旋转</h3>

<p>//mp4向左旋转90度
 ffmpeg -i input.mp4 -metadata:s:v rotate=”90” -codec copy outut.mp4</p>

<p>//mp4向右旋转90度
 ffmpeg -i input.mp4 -metadata:s:v rotate=”-90” -codec copy outut.mp4</p>

<h3 id="10-视频镜像">10. 视频镜像</h3>
<p>//mp4左右镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-vf</span> <span class="s2">"hflip"</span> outut.mp4
</code></pre></div></div>
<p>//mp4上下镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-vf</span> <span class="s2">"vflip"</span> outut.mp4
</code></pre></div></div>
<h3 id="11-mp4转raw-data">11. mp4转raw data</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> video.mp4 <span class="nt">-c</span>:v rawvideo <span class="nt">-pix_fmt</span> yuv420p out.yuv
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> input.mp4 <span class="nt">-vf</span> <span class="s2">"format=nv12"</span> <span class="nt">-c</span>:v rawvideo <span class="nt">-an</span> output.nv12
</code></pre></div></div>

<h3 id="12-图片旋转">12. 图片旋转</h3>
<p>//图片向右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">rotate</span><span class="o">=</span><span class="s1">'90*PI/180'</span> <span class="nt">-y</span> rotate60.png
</code></pre></div></div>
<p>//图片向右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">rotate</span><span class="o">=</span><span class="s1">'-90*PI/180'</span> <span class="nt">-y</span> rotate_90.png
</code></pre></div></div>
<p>//图片像左旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">transpose</span><span class="o">=</span>2 <span class="nt">-y</span> transpose2.png
</code></pre></div></div>
<p>//图片像右旋转90度</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">transpose</span><span class="o">=</span>1 <span class="nt">-y</span> transpose2.png
</code></pre></div></div>
<p>//逆时针(向左)旋转90°，然后垂直（上下）翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> <span class="nv">transpose</span><span class="o">=</span>0 <span class="nt">-y</span> transpose0.png
</code></pre></div></div>
<h3 id="13--图片镜像">13.  图片镜像</h3>
<p>//图片左右镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> hflip <span class="nt">-y</span> hflip.png
</code></pre></div></div>
<p>//图片上下镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.png <span class="nt">-vf</span> vflip <span class="nt">-y</span> vflip.png
</code></pre></div></div>
<p>//yuv数据左右镜像翻转</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-s</span> 1920x1080 <span class="nt">-pix_fmt</span> nv12 <span class="nt">-i</span> nv12_1.yuv <span class="nt">-vf</span> hflip <span class="nt">-y</span> hflip_nv12.yuv
</code></pre></div></div>
<p>//播放左右翻转后的yuv数据</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffplay <span class="nt">-video_size</span> 1920x1080 <span class="nt">-pixel_format</span> nv12 hflip_nv12.yuv
</code></pre></div></div>

<h3 id="14-音频音量调节大小">14. 音频音量调节大小</h3>
<p>//音量翻倍，写在滤镜里</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> input.wav <span class="nt">-af</span> <span class="nv">volume</span><span class="o">=</span>2 <span class="nt">-y</span> output.wav
</code></pre></div></div>
<p>//音量翻倍，不写在滤镜中</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> input.wav <span class="nt">-vol</span> 2000 <span class="nt">-y</span> output.wav
</code></pre></div></div>
<h3 id="15-调节播放速度">15. 调节播放速度</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> test1.mp4 <span class="nt">-vf</span>  <span class="s2">"setpts=0.25*PTS"</span> test2.mp4
</code></pre></div></div>

<p>四倍慢速：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg <span class="nt">-i</span> test1.mp4 <span class="nt">-vf</span>  <span class="s2">"setpts=4*PTS"</span> test2.mp4
</code></pre></div></div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[01. 视频分割 ffmpeg -ss 00:00:00 -i input.mp4 -c copy -t 60 output.mp4 -ss 表示视频分割的起始时间，-t 表示分割时长，同时也可以用 00:01:00表示]]></summary></entry><entry><title type="html">function trace</title><link href="http://localhost:4000/blog/jekyll/2020-10-02-FuncTrace.html" rel="alternate" type="text/html" title="function trace" /><published>2020-10-02T00:00:00+08:00</published><updated>2020-10-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/FuncTrace</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2020-10-02-FuncTrace.html"><![CDATA[<h1 id="函数跟踪">函数跟踪</h1>

<p><code class="language-plaintext highlighter-rouge">__cyg_profile_func_enter</code> 和 <code class="language-plaintext highlighter-rouge">__cyg_profile_func_exit</code> 是用于函数调用追踪的特殊函数。当你使用 <span style="color:red">-finstrument-functions</span>编译选项时，编译器会在每个函数的开始和结束处插入这两个函数. 这样，你可以实现函数调用的检测和分析。</p>

<p>这里是一个简单的例子，首先我们有一个用于跟踪函数的 <code class="language-plaintext highlighter-rouge">func_trace.c</code> 文件：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp_trace</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">traceBegin</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">fp_trace</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"func_trace.out"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="n">traceEnd</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fp_trace</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fclose</span><span class="p">(</span><span class="n">fp_trace</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">__cyg_profile_func_enter</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">caller</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fp_trace</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">fp_trace</span><span class="p">,</span> <span class="s">"entry %p %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">caller</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">__cyg_profile_func_exit</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">caller</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fp_trace</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">fp_trace</span><span class="p">,</span> <span class="s">"exit %p %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">caller</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后，我们编写一个简单的测试代码 <code class="language-plaintext highlighter-rouge">main.c</code>：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">zoo</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">zoo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">foo</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bar</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>接下来，将 <code class="language-plaintext highlighter-rouge">main.c</code> 与 <code class="language-plaintext highlighter-rouge">func_trace.o</code> 一起编译，并加上 <code class="language-plaintext highlighter-rouge">-finstrument-functions</code> 选项：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc main.c func_trace.o <span class="nt">-finstrument-functions</span>
</code></pre></div></div>

<p>运行 <code class="language-plaintext highlighter-rouge">./a.out</code>，就会产生 <code class="language-plaintext highlighter-rouge">func_trace.out</code> 文件，其中记录了函数调用的信息。你可以使用 <code class="language-plaintext highlighter-rouge">addr2line</code> 命令来查看函数名：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>addr2line <span class="nt">-f</span> <span class="nt">-e</span> ./a.out <span class="nv">$ADDRESS</span>
</code></pre></div></div>

<p>这样，你就可以得到函数调用关系。如果想进一步处理这些跟踪数据，可以使用工具如 <code class="language-plaintext highlighter-rouge">graphviz</code> 来创建可视化的调用关系图。</p>

<h1 id="自动化单元测试">自动化单元测试</h1>

<p><img src="/blog/assets/function_trace/print_parameter.png" alt="print_parameter" /></p>

<p><img src="/blog/assets/function_trace/call_test_func.png" alt="call_test_func" /></p>

<p><img src="/blog/assets/function_trace/xml.png" alt="xml" /></p>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[函数跟踪]]></summary></entry><entry><title type="html">OpenGL Misc</title><link href="http://localhost:4000/blog/jekyll/2020-08-20-OpenGL_misc.html" rel="alternate" type="text/html" title="OpenGL Misc" /><published>2020-08-20T00:00:00+08:00</published><updated>2020-08-20T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/OpenGL_misc</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2020-08-20-OpenGL_misc.html"><![CDATA[<h1 id="glinvalidateframebuffer-vs-glclear">glInvalidateFramebuffer vs glClear</h1>

<p>glInvalidateFramebuffer 和 glClear 是OpenGL中两个不同的函数，它们的作用和用法有所不同：</p>

<ul>
  <li>glInvalidateFramebuffer：
    <ul>
      <li>功能：glInvalidateFramebuffer 用于显式地标记帧缓冲区的某些部分为无效。这样，GPU就知道这些部分的内容不再需要，可以避免不必要的数据交换。</li>
      <li>应用场景：通常在使用帧缓冲区对象（FBO）时，当我们切换到不同的FBO或者不再需要某些颜色、深度或模板缓冲区的内容时，可以调用该函数。</li>
      <li>性能影响：尽管在RenderDoc等工具中可能显示glInvalidateFramebuffer的耗时较高，但实际上，只有少数几次调用不会对渲染性能产生影响。</li>
    </ul>
  </li>
  <li>glClear：
    <ul>
      <li>功能：glClear 用于清除当前帧缓冲区的内容，包括颜色缓冲区、深度缓冲区和模板缓冲区。</li>
      <li>应用场景：在每一帧开始时，我们通常会调用glClear来准备帧缓冲区，以便进行新的绘制。</li>
      <li>性能影响：glClear的性能开销通常较小，但在某些情况下，如果频繁调用，可能会影响性能。</li>
    </ul>
  </li>
</ul>

<p>总结：</p>
<ul>
  <li>glInvalidateFramebuffer 用于标记帧缓冲区的部分内容为无效，以减少不必要的数据交换。</li>
  <li>glClear 用于清除整个帧缓冲区的内容，以准备进行新的绘制。</li>
  <li>在使用RenderDoc等工具时，可以忽略glInvalidateFramebuffer的耗时，但需要关注片上高速缓存回写内存的消耗  。</li>
</ul>

<h1 id="gldiscardframebufferext">glDiscardFramebufferEXT</h1>

<p><code class="language-plaintext highlighter-rouge">void glDiscardFramebufferEXT(enum target, sizei numAttachments, const enum *attachments);</code></p>

<p>这个扩展提供了一个新的命令，glDiscardFramebufferEXT，它会使得指定帧缓冲附件的内容变为未定义状态。在未来的操作修改内容之前，这些指定缓冲区的内容是未定义的，只有被修改的区域保证包含有效内容。有效地使用此命令可以为实现提供新的优化机会。
一些 OpenGL ES 实现会将帧缓冲图像缓存到一个小的快速内存池中。在渲染之前，这些实现必须将逻辑缓冲区（如颜色、深度、模板等）的现有内容加载到该内存中。渲染后，这些缓冲区中的一部分或全部也会被存储回外部内存，以便将来再次使用其内容。在许多应用程序中，逻辑缓冲区在渲染开始时被清除。如果是这样，加载或存储这些缓冲区的工作就是浪费的。
即使没有这个扩展，如果渲染的一帧从全屏清除开始，OpenGL ES 实现也可以优化掉在渲染帧之前加载帧缓冲区内容的步骤。有了这个扩展，应用程序可以使用 DiscardFramebufferEXT 来表示帧缓冲区的内容将不再需要。在这种情况下，OpenGL ES 实现也可以优化掉在渲染帧后存储帧缓冲区内容的步骤。</p>

<p>glDiscardFramebufferEXT的工作是告知驱动程序你不关心framebuffer的内容。什么驱动程序(或GPU)决定用它做什么 - 这不取决于你。驱动程序可以将所有内容重置为0，或者它可以保持原样，或者当您下次调用glClear时它将使用此信息并且将更有效地执行它(例如通过为内容分配新内存，而不是执行memset与0值)。不要担心它会做什么</p>

<h1 id="texture-obj与rbo的区别">Texture obj与RBO的区别</h1>

<p>FBO(Frame Buffer Object)即帧缓冲区对象，是一个可添加缓冲区的容器，可以为其添加纹理或渲染缓冲区对象（RBO),它们的区别如下图</p>

<p><img src="/blog/assets/OpenGL/renderbuffer.png" alt="renderbuffer" /></p>

<h1 id="shader">shader</h1>

<h2 id="初始化">初始化</h2>
<p><img src="/blog/assets/OpenGL/shader.png" alt="shader" />
<img src="/blog/assets/OpenGL/shader2.jpg" alt="shader_2" /></p>
<h2 id="变量">变量</h2>

<p><strong>uniform变量</strong></p>

<p>uniform变量是外部application程序传递给（vertex和fragment）shader的变量。因此它是application通过函数glUniform**（）函数赋值的。在（vertex和fragment）shader程序内部，uniform变量就像是C语言里面的常量（const ），它不能被shader程序修改。</p>

<p><strong>attribute变量</strong></p>

<p>attribute变量是只能在vertex shader中使用的变量。它不能在fragment shader中声明attribute变量，也不能被fragment shader中使用。一般用attribute变量来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标，顶点颜色等。在application中，一般用函数glBindAttribLocation（）来绑定每个attribute变量的位置，然后用函数glVertexAttribPointer（）为每个attribute变量赋值。</p>

<p><strong>varying变量</strong></p>

<p>varying变量是vertex和fragment shader之间做数据传递用的。一般vertex shader修改varying变量的值，然后fragment shader使用该varying变量的值。因此varying变量在vertex和fragment shader二者之间的声明必须是一致的。application不能使用此变量。</p>

<h1 id="资源释放">资源释放</h1>

<p>dmabuf资源释放主要考虑texture，eglImage 和dmabuf， FBO不需要考虑。</p>

<ul>
  <li>
    <p>texture、 eglImage和 dmabuf是一体的，释放时需要调用glDeleteTextures， eglDestroyImageKHR， close(dmabuf)， 三个都完成后 dmabuf才真正释放。</p>
  </li>
  <li>
    <p>如果texture附加到一个FBO上，glDeleteTextrues()后会使得该FBO的附加纹理为0.</p>
  </li>
  <li>
    <p>如果前面已经attach 一个纹理到FBO， 在attach 新纹理到另一个FBO时，要先把前一个FBO的纹理设置为0, 否则释放不掉。</p>
  </li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">init_dev</span><span class="p">();</span>

    <span class="n">egl_Init</span><span class="p">();</span>

    <span class="n">dmabuf_fd</span> <span class="o">=</span> <span class="n">allocate_dmabuf</span><span class="p">(</span><span class="mi">1920</span><span class="o">*</span><span class="mi">1080</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span>
    <span class="n">textureid</span> <span class="o">=</span> <span class="n">create_texture_for_dmabuf</span><span class="p">(</span><span class="n">dmabuf_fd</span><span class="p">,</span> <span class="mi">1920</span><span class="p">,</span> <span class="mi">1080</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eglImg</span><span class="p">);</span>

    <span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FBO2</span><span class="p">);</span>
    <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">FBO2</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="n">textureid</span><span class="p">);</span>
    <span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="n">textureid</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">glCheckFramebufferStatus</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">)</span> <span class="o">!=</span> <span class="n">GL_FRAMEBUFFER_COMPLETE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="c1">// 得到当前附加纹理ID为 1</span>
    <span class="n">glGetFramebufferAttachmentParameteriv</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">);</span>

    <span class="n">free_dmabuf</span><span class="p">(</span><span class="n">dmabuf_fd</span><span class="p">);</span>
    <span class="n">glDeleteTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">textureid</span><span class="p">);</span>
    <span class="n">eglDestroyImageKHR</span><span class="p">(</span><span class="n">g_EGLDisplay</span><span class="p">,</span> <span class="n">eglImg</span><span class="p">);</span>
    <span class="c1">// 完成后 /sys/kernel/debug/dmabuf/bufferinfo 中dmabuf已经释放</span>

    <span class="c1">// 得到当前附加纹理ID为 0</span>
    <span class="n">glGetFramebufferAttachmentParameteriv</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">);</span>
    
    <span class="n">glDeleteFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FBO2</span><span class="p">);</span>
    
    <span class="n">eglDestroyContext</span><span class="p">(</span><span class="n">g_EGLDisplay</span><span class="p">,</span> <span class="n">g_EGLContext</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">init_dev</span><span class="p">();</span>

    <span class="n">egl_Init</span><span class="p">();</span>

    <span class="n">dmabuf_fd1</span> <span class="o">=</span> <span class="n">allocate_dmabuf</span><span class="p">(</span><span class="mi">1920</span><span class="o">*</span><span class="mi">1080</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span>
    <span class="n">textureid1</span> <span class="o">=</span> <span class="n">create_texture_for_dmabuf</span><span class="p">(</span><span class="n">dmabuf_fd1</span><span class="p">,</span> <span class="mi">1920</span><span class="p">,</span> <span class="mi">1080</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eglImg1</span><span class="p">);</span>

    <span class="n">dmabuf_fd2</span> <span class="o">=</span> <span class="n">allocate_dmabuf</span><span class="p">(</span><span class="mi">1920</span><span class="o">*</span><span class="mi">1080</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span>
    <span class="n">textureid2</span> <span class="o">=</span> <span class="n">create_texture_for_dmabuf</span><span class="p">(</span><span class="n">dmabuf_fd2</span><span class="p">,</span> <span class="mi">1920</span><span class="p">,</span> <span class="mi">1080</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">eglImg2</span><span class="p">);</span>


    <span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FBO1</span><span class="p">);</span>
    <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">FBO1</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="n">textureid1</span><span class="p">);</span>
    <span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="n">textureid1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">glCheckFramebufferStatus</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">)</span> <span class="o">!=</span> <span class="n">GL_FRAMEBUFFER_COMPLETE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="c1">// 注意要设置FBO 的纹理为0， 否则后面不能真正释放</span>
    <span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>


    <span class="n">glGenFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FBO2</span><span class="p">);</span>
    <span class="n">glBindFramebuffer</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">FBO2</span><span class="p">);</span>
    <span class="n">glBindTexture</span><span class="p">(</span><span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="n">textureid2</span><span class="p">);</span>
    <span class="n">glFramebufferTexture2D</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">,</span> <span class="n">GL_COLOR_ATTACHMENT0</span><span class="p">,</span> <span class="n">GL_TEXTURE_EXTERNAL_OES</span><span class="p">,</span> <span class="n">textureid2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">glCheckFramebufferStatus</span><span class="p">(</span><span class="n">GL_FRAMEBUFFER</span><span class="p">)</span> <span class="o">!=</span> <span class="n">GL_FRAMEBUFFER_COMPLETE</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">free_dmabuf</span><span class="p">(</span><span class="n">dmabuf_fd1</span><span class="p">);</span>
    <span class="n">glDeleteTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">textureid1</span><span class="p">);</span>
    <span class="n">eglDestroyImageKHR</span><span class="p">(</span><span class="n">g_EGLDisplay</span><span class="p">,</span> <span class="n">eglImg1</span><span class="p">);</span>
    <span class="n">free_dmabuf</span><span class="p">(</span><span class="n">dmabuf_fd2</span><span class="p">);</span>
    <span class="n">glDeleteTextures</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">textureid2</span><span class="p">);</span>
    <span class="n">eglDestroyImageKHR</span><span class="p">(</span><span class="n">g_EGLDisplay</span><span class="p">,</span> <span class="n">eglImg2</span><span class="p">);</span>    
    <span class="c1">// 完成后 /sys/kernel/debug/dmabuf/bufferinfo 中dmabuf已经释放</span>


    <span class="n">glDeleteFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FBO1</span><span class="p">);</span>
    <span class="n">glDeleteFramebuffers</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FBO2</span><span class="p">);</span>

    <span class="n">eglDestroyContext</span><span class="p">(</span><span class="n">g_EGLDisplay</span><span class="p">,</span> <span class="n">g_EGLContext</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="纹理过滤">纹理过滤</h1>

<p>一个纹理通常是由很多的像素点组成的，那么通过纹理坐标如何得到对应点应该的颜色，这就是纹理采样方式或纹理过滤。</p>

<p>下面是两种重要的纹理采样(纹理过滤)：</p>

<ul>
  <li><strong>GL_NEAREST</strong>:邻近过滤，这个是默认纹理过滤方式，OpenGL会选择中心点最接近纹理坐标的那个像素. 这种方式放大有颗粒感</li>
</ul>

<p><img src="/blog/assets/OpenGL/filter_nearest.png" alt="filter_nearest" /></p>

<ul>
  <li><strong>GL_LINEAR</strong>：线性过滤，它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色，一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大， 放大后较平滑。</li>
</ul>

<p><img src="/blog/assets/OpenGL/filter_linear.png" alt="filter_linear" /></p>

<p><strong>二者放大后的效果比较</strong></p>

<p><img src="/blog/assets/OpenGL/texture_filtering.png" alt="texture_filtering" /></p>

<p>当纹理被放大或缩小贴到一个平面时，我们可以设置不同的纹理采样(纹理过滤)方式，达到不同的效果。它所涉及到的OpenGL 函数如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">glTexParameteri</span><span class="o">(</span><span class="no">GL_TEXTURE_2D</span><span class="o">,</span> <span class="no">GL_TEXTURE_MIN_FILTER</span><span class="o">,</span> <span class="no">GL_NEAREST</span><span class="o">);</span> <span class="c1">// 缩小</span>
    <span class="n">glTexParameteri</span><span class="o">(</span><span class="no">GL_TEXTURE_2D</span><span class="o">,</span> <span class="no">GL_TEXTURE_MAG_FILTER</span><span class="o">,</span> <span class="no">GL_LINEAR</span><span class="o">);</span>  <span class="c1">// 放大</span>
</code></pre></div></div>

<h1 id="纹理环绕">纹理环绕</h1>

<p>纹理坐标的范围通常是从(0, 0)到(1, 1)，那如果我们把纹理坐标设置在范围之外会发生什么？OpenGL默认的行为是重复这个纹理图像。</p>

<table>
  <thead>
    <tr>
      <th>环绕方式</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GL_REPEAT</td>
      <td>对纹理的默认行为。重复纹理图像。</td>
    </tr>
    <tr>
      <td>GL_MIRRORED_REPEAT</td>
      <td>和GL_REPEAT一样，但每次重复图片是镜像放置的。</td>
    </tr>
    <tr>
      <td>GL_CLAMP_TO_EDGE</td>
      <td>纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。</td>
    </tr>
    <tr>
      <td>GL_CLAMP_TO_BORDER</td>
      <td>超出的坐标为用户指定的边缘颜色</td>
    </tr>
  </tbody>
</table>

<p><img src="/blog/assets/OpenGL/texture_wrapping.png" alt="texture_wrapping" /></p>

<p>相关函数</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">glTexParameteri</span><span class="o">(</span><span class="no">GL_TEXTURE_2D</span><span class="o">,</span> <span class="no">GL_TEXTURE_WRAP_S</span><span class="o">,</span> <span class="no">GL_MIRRORED_REPEAT</span><span class="o">);</span>
    <span class="n">glTexParameteri</span><span class="o">(</span><span class="no">GL_TEXTURE_2D</span><span class="o">,</span> <span class="no">GL_TEXTURE_WRAP_T</span><span class="o">,</span> <span class="no">GL_MIRRORED_REPEAT</span><span class="o">);</span>
</code></pre></div></div>

<p>如果我们选择GL_CLAMP_TO_BORDER选项，我们还需要指定一个边缘的颜色。这需要使用glTexParameter函数的fv后缀形式，用GL_TEXTURE_BORDER_COLOR作为它的选项，并且传递一个float数组作为边缘的颜色值：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">float</span> <span class="n">borderColor</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span> <span class="mf">1.0f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">1.0f</span> <span class="o">};</span>
    <span class="n">glTexParameterfv</span><span class="o">(</span><span class="no">GL_TEXTURE_2D</span><span class="o">,</span> <span class="no">GL_TEXTURE_BORDER_COLOR</span><span class="o">,</span> <span class="n">borderColor</span><span class="o">);</span>
</code></pre></div></div>

<h1 id="freetype">freetype</h1>

<p>下图是freetype调用的基本框架。</p>

<p><img src="/blog/assets/OpenGL/freetype_func.png" alt="freetype_funcs" /></p>

<p><img src="/blog/assets/OpenGL/freetype_glyph.png" alt="freetype_glyph" /></p>

<p>参看上图，在绘制字符时以baseline为水平基准，则所有的字符就会对齐。</p>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[glInvalidateFramebuffer vs glClear]]></summary></entry><entry><title type="html">kernel misc</title><link href="http://localhost:4000/blog/jekyll/2020-06-22-misc.html" rel="alternate" type="text/html" title="kernel misc" /><published>2020-06-22T00:00:00+08:00</published><updated>2020-06-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/misc</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2020-06-22-misc.html"><![CDATA[<h1 id="kref">kref</h1>

<p>kref_init 是一个用于初始化内核对象引用计数器（krefs）的函数。它允许你为你的对象添加引用计数，确保在多个地方使用和传递对象时，代码的正确性。以下是关于 kref_init 的一些重要信息：</p>

<ul>
  <li>初始化：</li>
</ul>

<p>在分配内存并创建对象后，你需要调用 kref_init 来初始化引用计数器。例如：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">kmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
<span class="n">kref_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">);</span>
</code></pre></div></div>

<p>这将在 kref 中的 refcount 设置为 1。</p>

<ul>
  <li>使用规则：</li>
</ul>

<p>在对指针进行非临时拷贝（尤其是传递给另一个执行线程）之前，必须使用 kref_get 增加引用计数。
在完成对指针的处理后，必须调用 kref_put。如果这是对指针的最后一次引用，释放程序将被调用。</p>

<ul>
  <li>示例：</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">data_release</span><span class="p">(</span><span class="k">struct</span> <span class="n">kref</span> <span class="o">*</span><span class="n">ref</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">container_of</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span> <span class="k">struct</span> <span class="n">my_data</span><span class="p">,</span> <span class="n">refcount</span><span class="p">);</span>
    <span class="n">kfree</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">more_data_handling</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">cb_data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">cb_data</span><span class="p">;</span>
    <span class="c1">// 处理 data</span>
    <span class="n">kref_put</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">,</span> <span class="n">data_release</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">my_data_handler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">rv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">my_data</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">kmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">data</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="n">kref_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">);</span>
    <span class="n">kref_get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">);</span>
    <span class="c1">// 创建线程处理数据</span>
    <span class="c1">// ...</span>
    <span class="n">kref_put</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="o">-&gt;</span><span class="n">refcount</span><span class="p">,</span> <span class="n">data_release</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">rv</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在上述示例中，两个线程处理数据的顺序并不重要，kref_put 会在数据不再被引用时释放它。
请注意，遵循这些规则可以确保正确管理内核对象的引用计数，避免内存泄漏和悬挂指针。</p>

<h1 id="idrid-range">IDR(ID Range)</h1>

<p>IDR 是一种用于管理连续整数范围的数据结构，通常用于内核中需要为对象分配唯一标识符的场景。
idr_alloc 函数用于在 Linux 内核中分配 IDR（ID Range）对象中的未使用的 ID。</p>

<p>以下是 idr_alloc 函数的用法：</p>

<ol>
  <li>首先，您需要初始化一个 IDR。对于静态分配的 IDR，您可以使用 DEFINE_IDR() 宏；对于动态分配的 IDR，您可以使用 idr_init() 函数。</li>
  <li>调用 idr_alloc() 来分配一个未使用的 ID。</li>
  <li>使用 idr_find() 查询与该 ID 相关的指针。</li>
  <li>使用 idr_remove() 释放该 ID。</li>
</ol>

<p>如果需要更改与某个 ID 相关联的指针，您可以调用 idr_replace()。这通常用于保留 ID，通过将 NULL 指针传递给分配函数，然后使用保留的 ID 初始化对象，最后将初始化的对象插入 IDR。</p>

<p>到目前为止，所有用户都满足了 UINT_MAX 的限制，因此他们使用 idr_alloc_u32()。</p>

<p>如果需要按顺序分配 ID，您可以使用 idr_alloc_cyclic()。请注意，处理较大数量的 ID 时，IDR 的效率会降低，因此使用这个函数会有一些代价。</p>

<p>当您使用完 IDR 后，可以调用 idr_destroy() 来释放 IDR 占用的内存。这不会释放 IDR 指向的对象；如果您想这样做，请使用其中一个迭代器来执行此操作。</p>

<p>您可以使用 idr_is_empty() 来查看当前是否分配了任何 ID。</p>

<p>如果在从 IDR 分配一个新 ID 时需要带锁，您可能需要传递一组限制性的 GFP 标志，但这可能导致 IDR 无法分配内存。为了解决该问题，您可以在获取锁之前调用 idr_preload()，然后在分配之后调用 idr_preload_end()。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/idr.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">idr</span> <span class="n">my_idr</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">;</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">ptr1</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr2</span><span class="p">;</span>

    <span class="c1">// Initialize the IDR</span>
    <span class="n">idr_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">);</span>

    <span class="c1">// Allocate two unused IDs</span>
    <span class="n">id1</span> <span class="o">=</span> <span class="n">idr_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="s">"sample1"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="n">id2</span> <span class="o">=</span> <span class="n">idr_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="s">"sample2"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>

    <span class="c1">// Associate pointers with the IDs</span>
    <span class="n">ptr1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0xdeadbeef</span><span class="p">;</span>
    <span class="n">ptr2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0xcafebabe</span><span class="p">;</span>
    <span class="n">idr_replace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">ptr1</span><span class="p">,</span> <span class="n">id1</span><span class="p">);</span>
    <span class="n">idr_replace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">ptr2</span><span class="p">,</span> <span class="n">id2</span><span class="p">);</span>

    <span class="c1">// Look up pointers by ID</span>
    <span class="n">ptr1</span> <span class="o">=</span> <span class="n">idr_find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id1</span><span class="p">);</span>
    <span class="n">ptr2</span> <span class="o">=</span> <span class="n">idr_find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id2</span><span class="p">);</span>

    <span class="c1">// Free the IDs</span>
    <span class="n">idr_remove</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id1</span><span class="p">);</span>
    <span class="n">idr_remove</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">,</span> <span class="n">id2</span><span class="p">);</span>

    <span class="c1">// Destroy the IDR</span>
    <span class="n">idr_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_idr</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h1 id="非一致性内存-和一致性">非一致性内存 和一致性</h1>

<h2 id="dma_alloc_noncoherent">dma_alloc_noncoherent</h2>

<p>它是Linux内核中的一个DMA内存分配函数，用于分配一段物理内存，使其可以被DMA硬件访问12. 这个函数的作用是在非一致性内存（non-coherent memory）上分配一块区域，以便设备可以使用它作为DMA的源或目标地址。让我详细解释一下这个函数的用途和参数。</p>

<p>dma_alloc_noncoherent函数的原型如下：</p>

<p><code class="language-plaintext highlighter-rouge">void *dma_alloc_noncoherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t flag);</code></p>

<ul>
  <li>dev: 指向设备结构的指针，表示要为哪个设备分配内存。</li>
  <li>size: 要分配的内存大小（以字节为单位）。</li>
  <li>dma_handle: 用于返回DMA地址的指针。这个地址可以转换为与总线宽度相同的无符号整数，并传递给设备作为分配区域的DMA地址基址。</li>
  <li>flag: 用于指定内存分配的GFP_标志（类似于kmalloc()中的标志）。例如，可以使用GFP_KERNEL来分配普通内核内存。
非一致性内存是一种特殊类型的内存，写入它的数据可以立即被处理器或设备读取，而无需考虑缓存效应。需要注意的是，CPU不能直接引用dma_addr_t，因为物理地址空间和DMA地址空间之间可能存在转换。</li>
</ul>

<p>使用dma_alloc_noncoherent分配的内存区域不保证一致性，因此在使用之前，可能需要手动刷新处理器的写缓冲区，以确保设备可以正确读取该内存。
释放由dma_alloc_noncoherent分配的内存时，应使用dma_free_noncoherent函数：</p>

<p><code class="language-plaintext highlighter-rouge">void dma_free_noncoherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle);</code></p>

<p>dev、size和dma_handle参数必须与传递给dma_alloc_noncoherent的相同。
cpu_addr是由dma_alloc_noncoherent返回的虚拟地址。
请注意，与其他内存分配函数不同，这些函数只能在启用IRQ的情况下调用。</p>

<p>如果你的驱动程序需要大量较小的DMA一致性内存区域，你可以使用DMA池（dma_pool）来分配和管理这些区域，而不是使用dma_alloc_coherent()。DMA池类似于kmem_cache，但它使用dma_alloc_coherent()而不是__get_free_pages()</p>

<h2 id="dma_alloc_wc">dma_alloc_wc</h2>
<p>这个函数允许驱动程序申请带缓存一致性的DMA内存。缓存一致性是指确保CPU和DMA设备之间的数据一致性，以避免数据不一致的问题。使用dma_alloc_wc分配的内存区域旨在在CPU和DMA设备之间保持一致，以便数据正确传输。</p>

<p>释放由dma_alloc_wc分配的内存时，应使用dma_free_wc函数：</p>

<p><code class="language-plaintext highlighter-rouge">void dma_free_wc(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle);</code></p>

<ul>
  <li>dev、size和dma_handle参数必须与传递给dma_alloc_wc的相同。</li>
  <li>cpu_addr是由dma_alloc_wc返回的虚拟地址。</li>
</ul>

<p><u>adf</u></p>

<h1 id="定时器">定时器</h1>

<h2 id="timer_setup">timer_setup</h2>

<p>它是Linux内核中用于初始化定时器的函数。它能够方便地设置和初始化一个计时器，并通过设置参数来灵活地控制计时器的行为1. 合理使用timer_setup函数可以让我们更好地处理时间相关的任务，提高操作系统的性能和可靠性。</p>

<p>在Linux内核中，定时器通常使用timer_list结构体来表示。下面是timer_list结构体的一些关键字段：</p>

<ul>
  <li>entry: 定时器列表元素，用于将定时器挂载在内核定时器链表上。</li>
  <li>expires: 定时器定时时间。</li>
  <li>function: 定时器回调函数，定时器时间到时执行该函数。</li>
  <li>flags: 标志位，用于设置定时器的属性。</li>
</ul>

<p>在旧版本的内核中，我们使用init_timer函数来初始化定时器。而在新版本中，这个函数变成了timer_setup函数。下面是timer_setup函数的定义：</p>

<p><code class="language-plaintext highlighter-rouge">void timer_setup(struct timer_list *timer, void (*callback)(struct timer_list *), unsigned int flags);</code></p>

<p>使用timer_setup函数时，我们需要传入以下参数：</p>

<ul>
  <li>timer: 要初始化的定时器。</li>
  <li>callback: 定时器的回调函数，此函数的形参是当前定时器的变量。</li>
  <li>flags: 标志位，可以设置定时器的属性。</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/kernel.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/timer.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">timer_list</span> <span class="n">my_timer</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">my_timer_callback</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer_list</span> <span class="o">*</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"This line is printed after 5 seconds.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">init_module_with_timer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Initializing a module with timer.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="c1">// Setup the timer for initial use</span>
    <span class="n">timer_setup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">my_timer_callback</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="c1">// Set the timer interval to 5000 milliseconds (5 seconds)</span>
    <span class="n">mod_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">jiffies</span> <span class="o">+</span> <span class="n">msecs_to_jiffies</span><span class="p">(</span><span class="mi">5000</span><span class="p">));</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">exit_module_with_timer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Goodbye, cruel world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">del_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">init_module_with_timer</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">exit_module_with_timer</span><span class="p">);</span>

</code></pre></div></div>
<h2 id="高精度定时器">高精度定时器</h2>

<p><code class="language-plaintext highlighter-rouge">hrtimer_init</code> 是 Linux 内核中与高精度定时器（HRTimer）相关的函数之一。让我为您详细介绍一下，并提供一个示例代码：</p>

<ol>
  <li><strong>HRTimer 简介</strong>：
    <ul>
      <li>HRTimer 是 Linux 内核中的高精度定时器，用于提供纳秒级别的时钟精度。</li>
      <li>与传统的定时器相比，HRTimer 允许更精确地控制定时事件，适用于对时间要求较高的场景，如看门狗、USB、以太网、块设备、虚拟机等子系统。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">hrtimer_init</code> 函数</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">hrtimer_init</code> 用于初始化一个 <code class="language-plaintext highlighter-rouge">struct hrtimer</code> 实例。</li>
      <li>参数：
        <ul>
          <li><code class="language-plaintext highlighter-rouge">timer</code>：指向要初始化的 HRTimer 实例的指针。</li>
          <li><code class="language-plaintext highlighter-rouge">clock_id</code>：时钟的种类，例如 <code class="language-plaintext highlighter-rouge">CLOCK_MONOTONIC</code> 表示自系统开机以来的单调递增时间。</li>
          <li><code class="language-plaintext highlighter-rouge">mode</code>：定时器的模式，可以是绝对时间（<code class="language-plaintext highlighter-rouge">HRTIMER_MODE_ABS</code>）或相对时间（<code class="language-plaintext highlighter-rouge">HRTIMER_MODE_REL</code>）。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>示例代码</strong>：
    <ul>
      <li>下面是一个使用 HRTimer 的简单示例代码，用于在内核中启动一个相对时间的 HRTimer：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/hrtimer.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/ktime.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
</span>     
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
     
<span class="k">static</span> <span class="k">struct</span> <span class="n">hrtimer</span> <span class="n">my_timer</span><span class="p">;</span>
<span class="k">static</span> <span class="n">ktime_t</span> <span class="n">interval</span><span class="p">;</span>
     
<span class="k">static</span> <span class="k">enum</span> <span class="n">hrtimer_restart</span> <span class="nf">my_timer_callback</span><span class="p">(</span><span class="k">struct</span> <span class="n">hrtimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Your timer callback logic here</span>
    <span class="c1">// For demonstration purposes, let's print a message.</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"HRTimer callback executed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">HRTIMER_RESTART</span><span class="p">;</span>
<span class="p">}</span>
     
<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Initialize the HRTimer</span>
    <span class="n">interval</span> <span class="o">=</span> <span class="n">ktime_set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// Set interval to 1 second</span>
    <span class="n">hrtimer_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">CLOCK_MONOTONIC</span><span class="p">,</span> <span class="n">HRTIMER_MODE_REL</span><span class="p">);</span>
    <span class="n">my_timer</span><span class="p">.</span><span class="n">function</span> <span class="o">=</span> <span class="n">my_timer_callback</span><span class="p">;</span>
     
    <span class="c1">// Start the timer</span>
    <span class="n">hrtimer_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">,</span> <span class="n">interval</span><span class="p">,</span> <span class="n">HRTIMER_MODE_REL</span><span class="p">);</span>
     
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"HRTimer module initialized</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
     
<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Cleanup: Stop the timer</span>
    <span class="n">hrtimer_cancel</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_timer</span><span class="p">);</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"HRTimer module removed</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
     
<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>在上述示例中，我们初始化了一个相对时间的 HRTimer，设置了回调函数 <code class="language-plaintext highlighter-rouge">my_timer_callback</code>，并启动了定时器。</li>
    </ul>
  </li>
</ol>

<h1 id="内核线程">内核线程</h1>

<p><strong>kthread_create_worker()</strong> 函数是Linux内核中用于创建内核线程的一个函数。通过设置标志参数和格式化字符串，可以指定创建内核线程的行为和名称。它分配并初始化了一个kthread_worker结构体，并使用它来创建内核线程.</p>

<p>以下是kthread_create_worker函数的一些关键参数：</p>

<ul>
  <li>cpu: 如果大于等于0，将创建特定于某个CPU的工作线程；如果不想创建特定于CPU的工作线程，可以将CPU域赋值为-1。</li>
  <li>flags: 可以设置一些标志位，根据需要来控制内核线程的行为。</li>
  <li>namefmt: 一个格式化字符串，用于指定内核线程的名称。</li>
</ul>

<p>这个函数会分配内存并初始化kthread_worker结构，然后返回指向该结构的指针。您可以根据具体需求使用这个函数来创建和管理内核线程。</p>

<p>如果您需要一个示例代码，以下是一个简单的例子，展示了如何在模块初始化时创建一个内核线程，以及如何在卸载模块时关闭该内核线程：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kthread.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/delay.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">demo_thr</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">kthread_should_stop</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">msleep_interruptible</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
        <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"Thread is running...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">thr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">kthread_demo_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">thr</span> <span class="o">=</span> <span class="n">kthread_run</span><span class="p">(</span><span class="n">demo_thr</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">"kthread-demo"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">thr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ERR</span> <span class="s">"Failed to create kthread</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">kthread_demo_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">thr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">kthread_stop</span><span class="p">(</span><span class="n">thr</span><span class="p">);</span>
        <span class="n">thr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">kthread_demo_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">kthread_demo_exit</span><span class="p">);</span>
</code></pre></div></div>
<p>在这个示例中，我们使用kthread_run函数创建一个名为kthread-demo的内核线程，它每隔2秒打印一条信息。在卸载模块时，我们使用kthread_stop来关闭该内核线程。</p>

<h1 id="工作队列">工作队列</h1>

<h2 id="schedule_work">schedule_work</h2>

<p>函数是Linux内核中的一个重要函数，用于将一个工作项（work）添加到工作队列（workqueue）中。这个函数的作用是在后台执行一些延迟较长的任务，而不会阻塞主线程的执行。</p>

<p>以下是关于schedule_work函数的一些要点：</p>

<ul>
  <li>功能：将工作项添加到<strong>默认的工作队列</strong>（通常是system_wq）中，以便稍后执行。</li>
  <li>调用方式：schedule_work(&amp;my_work);，其中my_work是一个已经初始化的工作项。</li>
  <li>工作队列：工作队列是一种异步执行机制，用于处理延迟的或非实时的任务。</li>
  <li>延迟执行：schedule_work会将工作项添加到工作队列中，等待系统调度执行。这样，主线程可以继续执行其他任务，而不必等待工作项完成。</li>
  <li>工作项回调函数：工作项的实际执行逻辑由回调函数定义。当工作项被调度执行时，会调用这个回调函数。</li>
</ul>

<p>以下是一个简单的示例代码，展示了如何使用INIT_WORK和schedule_work来创建和调度一个工作项：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kernel.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/workqueue.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">work_struct</span> <span class="n">my_work</span><span class="p">;</span>

<span class="c1">// 工作项的回调函数</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">my_work_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"My work handler is running...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="c1">// 在这里执行您的工作逻辑</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">init_my_module</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"Initializing my kernel module with workqueue...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="c1">// 初始化工作项</span>
    <span class="n">INIT_WORK</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_work</span><span class="p">,</span> <span class="n">my_work_handler</span><span class="p">);</span>

    <span class="c1">// 将工作项添加到工作队列</span>
    <span class="n">schedule_work</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_work</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">cleanup_my_module</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">"Cleaning up my kernel module...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">init_my_module</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">cleanup_my_module</span><span class="p">);</span>
</code></pre></div></div>
<p>在这个示例中，我们首先定义了一个名为my_workqueue的工作队列结构体，以及一个名为my_work的工作项。然后，在init_my_module函数中使用create_singlethread_workqueue来创建一个名为my_workqueue的工作队列。接着，我们使用INIT_WORK来初始化工作项，并使用schedule_work来调度它。</p>

<h2 id="alloc_ordered_workqueue">alloc_ordered_workqueue</h2>

<p>用于创建<strong>有序</strong>的工作队列（workqueue）。让我详细介绍一下，并提供一个示例代码：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">alloc_ordered_workqueue</code> 简介</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">alloc_ordered_workqueue</code> 函数用于分配一个有序的工作队列。</li>
      <li>有序工作队列是一种特殊类型的工作队列，它确保工作项按照提交的顺序执行。</li>
    </ul>
  </li>
  <li><strong>函数签名</strong>：
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="nf">alloc_ordered_workqueue</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong>参数说明</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">name</code>：工作队列的名称。</li>
      <li><code class="language-plaintext highlighter-rouge">flags</code>：标志位，用于配置工作队列的行为。</li>
    </ul>
  </li>
  <li>
    <p><strong>示例代码</strong>：</p>

    <p>下面是一个简单的示例代码，展示如何使用 <code class="language-plaintext highlighter-rouge">alloc_ordered_workqueue</code> 创建一个有序的工作队列：</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/workqueue.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">my_ordered_wq</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">my_work_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Work item executed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="nf">DECLARE_WORK</span><span class="p">(</span><span class="n">my_work</span><span class="p">,</span> <span class="n">my_work_handler</span><span class="p">);</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">my_ordered_wq</span> <span class="o">=</span> <span class="n">alloc_ordered_workqueue</span><span class="p">(</span><span class="s">"my_ordered_wq"</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_ordered_wq</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pr_err</span><span class="p">(</span><span class="s">"Failed to create ordered workqueue</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">queue_work</span><span class="p">(</span><span class="n">my_ordered_wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_work</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">destroy_workqueue</span><span class="p">(</span><span class="n">my_ordered_wq</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">"Ordered Workqueue Example"</span><span class="p">);</span>
</code></pre></div>    </div>

    <p>在此示例中，我们创建了一个名为 “my_ordered_wq” 的有序工作队列，并将一个工作项 <code class="language-plaintext highlighter-rouge">my_work</code> 提交到队列中。工作项的处理函数 <code class="language-plaintext highlighter-rouge">my_work_handler</code> 将在有序的顺序中执行。</p>
  </li>
</ol>

<h2 id="create_singlethread_workqueue">create_singlethread_workqueue</h2>

<p><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 是 Linux 内核中的一个函数，用于创建一个只包含单个工作线程的工作队列（workqueue）。让我详细介绍一下：🙂</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 简介</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 函数用于创建一个只包含一个工作线程的工作队列。</li>
      <li><strong>无论系统中有多少个 CPU，这个工作队列都只会有一个工作线程</strong>。</li>
    </ul>
  </li>
  <li><strong>函数签名</strong>：
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="nf">create_singlethread_workqueue</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong>参数说明</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">name</code>：工作队列的名称。</li>
    </ul>
  </li>
  <li><strong>工作原理</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 创建的工作队列只有一个工作线程。</li>
      <li>所有提交到这个工作队列的工作项都会由这个单一的工作线程按顺序执行。</li>
    </ul>
  </li>
  <li>
    <p><strong>示例代码</strong>：
下面是一个简单的示例代码，展示如何使用 <code class="language-plaintext highlighter-rouge">create_singlethread_workqueue</code> 创建一个只包含单个工作线程的工作队列：</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/workqueue.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">workqueue_struct</span> <span class="o">*</span><span class="n">my_singlethread_wq</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">my_work_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">work_struct</span> <span class="o">*</span><span class="n">work</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Work item executed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="nf">DECLARE_WORK</span><span class="p">(</span><span class="n">my_work</span><span class="p">,</span> <span class="n">my_work_handler</span><span class="p">);</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">my_singlethread_wq</span> <span class="o">=</span> <span class="n">create_singlethread_workqueue</span><span class="p">(</span><span class="s">"my_singlethread_wq"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_singlethread_wq</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pr_err</span><span class="p">(</span><span class="s">"Failed to create singlethread workqueue</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">queue_work</span><span class="p">(</span><span class="n">my_singlethread_wq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_work</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">destroy_workqueue</span><span class="p">(</span><span class="n">my_singlethread_wq</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">"Singlethread Workqueue Example"</span><span class="p">);</span>
</code></pre></div>    </div>

    <p>在此示例中，我们创建了一个名为 “my_singlethread_wq” 的工作队列，并将一个工作项 <code class="language-plaintext highlighter-rouge">my_work</code> 提交到队列中。这个工作项的处理函数 <code class="language-plaintext highlighter-rouge">my_work_handler</code> 将在单一的工作线程中按顺序执行。</p>
  </li>
</ol>

<h1 id="completion">completion</h1>

<p>init_completion() 是Linux内核中用于完成事件通知机制的一个函数，主要用于进程间或线程间的同步。这个函数初始化一个 completion 结构体，该结构体用于表示某个事件是否已经发生。在多线程或多进程编程中，有时需要一个线程或进程等待另一个线程或进程完成某个任务。</p>

<p>让我们来详细了解一下 init_completion() 函数的功能和用法：</p>

<ul>
  <li>初始化completion结构体：
    <ul>
      <li>completion 结构体用于维护“complete”状态，表示某个任务是否已完成。</li>
      <li>结构体定义如下：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">completion</span> <span class="p">{</span>
   <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">done</span><span class="p">;</span>
   <span class="k">struct</span> <span class="n">swait_queue_head</span> <span class="n">wait</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>        </div>
      </li>
      <li>done 字段表示完成状态，初始值为 0。</li>
      <li>swait_queue_head 是一个等待队列头，用于管理等待该完成事件的线程。</li>
    </ul>
  </li>
  <li>init_completion() 函数：
    <ul>
      <li>动态定义及初始化一个信号量：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define init_completion(x) __init_completion(x)
</span><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">__init_completion</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
   <span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="n">init_swait_queue_head</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>这个函数实际上是初始化了 completion 结构体中的信号量。</li>
    </ul>
  </li>
  <li>等待完成：
    <ul>
      <li>等待信号量的释放：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">__sched</span> <span class="nf">wait_for_completion</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wait_for_common</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">MAX_SCHEDULE_TIMEOUT</span><span class="p">,</span> <span class="n">TASK_UNINTERRUPTIBLE</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>发信端：</p>

    <ul>
      <li>complete() 函数用于唤醒等待该完成事件的单个线程：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">complete</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">flags</span><span class="p">;</span>
    <span class="n">raw_spin_lock_irqsave</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">!=</span> <span class="n">UINT_MAX</span><span class="p">)</span>
       <span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span><span class="o">++</span><span class="p">;</span>
    <span class="n">swake_up_locked</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">);</span>
    <span class="n">raw_spin_unlock_irqrestore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>同时唤醒所有等待线程：
    <ul>
      <li>complete_all() 函数用于唤醒等待此特定完成事件的所有线程：
        <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">complete_all</span><span class="p">(</span><span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">flags</span><span class="p">;</span>
    <span class="n">lockdep_assert_RT_in_threaded_ctx</span><span class="p">();</span>
    <span class="n">raw_spin_lock_irqsave</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
    <span class="n">x</span><span class="o">-&gt;</span><span class="n">done</span> <span class="o">=</span> <span class="n">UINT_MAX</span><span class="p">;</span>
    <span class="n">swake_up_all_locked</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">);</span>
    <span class="n">raw_spin_unlock_irqrestore</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">wait</span><span class="p">.</span><span class="n">lock</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>完整示例</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/completion.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/delay.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kthread.h&gt;</span><span class="cp">
</span><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
<span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">"kevin"</span><span class="p">);</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">completion</span> <span class="n">my_completion</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">my_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">){</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"My thread is waiting for completion...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">wait_for_completion</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_completion</span><span class="p">);</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"My thread woke up! Event completed.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_init</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Initializing my module...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">init_completion</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_completion</span><span class="p">);</span>
    <span class="c1">// Start a new kernel thread</span>
    <span class="n">kthread_run</span><span class="p">(</span><span class="n">my_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="s">"my_thread"</span><span class="p">);</span>
    <span class="c1">// Simulate some work...</span>
    <span class="n">msleep</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Completing the event...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">complete</span><span class="p">(</span><span class="o">&amp;</span><span class="n">my_completion</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">pr_info</span><span class="p">(</span><span class="s">"Exiting my module...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">module_init</span><span class="p">(</span><span class="n">my_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_exit</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="kobject_uevent_env">kobject_uevent_env</h1>

<p>它是 <strong>Linux 内核</strong> 中的一个函数，用于在 <strong>kobject</strong> 状态发生变化时发送 <strong>uevent</strong> 到用户空间。让我详细解释一下：</p>

<ol>
  <li><strong>kobject</strong>：
    <ul>
      <li><strong>kobject</strong> 是内核中的一个抽象对象，用于表示各种内核数据结构，例如设备、驱动程序、总线等。</li>
      <li>每个 <strong>kobject</strong> 都有一个名称、引用计数和其他属性。</li>
    </ul>
  </li>
  <li><strong>uevent</strong>：
    <ul>
      <li><strong>uevent</strong> 是用户空间事件的缩写，用于通知用户空间程序内核中的状态变化。</li>
      <li>例如，当设备插入或移除时，内核会生成相应的 <strong>uevent</strong>。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">kobject_uevent_env</code> 函数</strong>：
    <ul>
      <li>这个函数用于发送 <strong>uevent</strong> 到用户空间。</li>
      <li>它接受一个指向 <strong>kobject</strong> 的指针和一个表示 <strong>uevent</strong> 的环境变量数组。</li>
      <li>用户空间程序可以监听这些事件并做出相应的处理。</li>
    </ul>
  </li>
  <li><strong>使用示例</strong>：
    <ul>
      <li>在设备驱动程序中，当设备状态发生变化时，例如设备插入或移除，可以使用 <code class="language-plaintext highlighter-rouge">kobject_uevent_env</code> 发送相应的 <strong>uevent</strong>。</li>
      <li>用户空间程序收到这些事件后，可以根据需要执行操作。</li>
    </ul>
  </li>
</ol>

<p>以下是一个简单的示例代码，展示了如何在内核模块中使用 <code class="language-plaintext highlighter-rouge">kobject_uevent_env</code> 发送 <strong>uevent</strong>：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/kobject.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">kobject</span> <span class="o">*</span><span class="n">my_kobj</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">my_uevent</span><span class="p">(</span><span class="k">struct</span> <span class="n">kset</span> <span class="o">*</span><span class="n">kset</span><span class="p">,</span> <span class="k">struct</span> <span class="n">kobject</span> <span class="o">*</span><span class="n">kobj</span><span class="p">,</span> <span class="k">struct</span> <span class="n">kobj_uevent_env</span> <span class="o">*</span><span class="n">env</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Add custom environment variables to the uevent</span>
    <span class="n">add_uevent_var</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"MY_CUSTOM_VAR=hello_world"</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">kset_uevent_ops</span> <span class="n">my_uevent_ops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">uevent</span> <span class="o">=</span> <span class="n">my_uevent</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">my_module_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">my_kobj</span> <span class="o">=</span> <span class="n">kobject_create_and_add</span><span class="p">(</span><span class="s">"my_kobject"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_kobj</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>

    <span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span> <span class="o">=</span> <span class="n">kset_create_and_add</span><span class="p">(</span><span class="s">"my_kset"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">kobject_put</span><span class="p">(</span><span class="n">my_kobj</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span><span class="o">-&gt;</span><span class="n">uevent_ops</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">my_uevent_ops</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">my_module_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">kset_unregister</span><span class="p">(</span><span class="n">my_kobj</span><span class="o">-&gt;</span><span class="n">kset</span><span class="p">);</span>
    <span class="n">kobject_put</span><span class="p">(</span><span class="n">my_kobj</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">my_module_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">my_module_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
</code></pre></div></div>

<p>在此示例中，我们创建了一个名为 <code class="language-plaintext highlighter-rouge">my_kobject</code> 的 <strong>kobject</strong>，并将其添加到一个名为 <code class="language-plaintext highlighter-rouge">my_kset</code> 的 <strong>kset</strong> 中。然后，我们设置了一个自定义的 <strong>uevent</strong>，将环境变量 <code class="language-plaintext highlighter-rouge">MY_CUSTOM_VAR</code> 添加到 <strong>uevent</strong> 中。</p>

<p>请注意，实际应用中，您需要根据您的需求自定义更多的环境变量和处理逻辑。</p>

<h1 id="benchmark">benchmark</h1>

<ul>
  <li>
    <p>DRM kernel aspects (display and render):</p>

    <p>IGT GPU Tools (IGT): main DRM test suite, used for CI</p>

    <p><a href="https://gitlab.freedesktop.org/drm/igt-gpu-tools/">https://gitlab.freedesktop.org/drm/igt-gpu-tools/</a></p>
  </li>
  <li>
    <p>OpenGL aspects:</p>

    <ul>
      <li>
        <p>drawElements Quality Program (dEQP): OpenGL/OpenGL ES/Vulkan conformance tests</p>

        <p><a href="https://android.googlesource.com/platform/external/deqp/">https://android.googlesource.com/platform/external/deqp/</a></p>
      </li>
      <li>
        <p>glmark2: OpenGL 2.0 and ES 2.0 benchmark tool</p>

        <p><a href="https://github.com/glmark2/glmark2/">https://github.com/glmark2/glmark2/</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Patch series continuous integration:</p>

    <p>EzBench: a collection of tools to benchmark graphics-related patch-series</p>

    <p><a href="https://github.com/freedesktop/ezbench/">https://github.com/freedesktop/ezbench/</a></p>
  </li>
  <li>
    <p>General benchmarking (including graphics):</p>

    <p>Phoronix Test Suite: automated benchmarking tool</p>

    <p><a href="https://github.com/phoronix-test-suite/phoronix-test-suite/">https://github.com/phoronix-test-suite/phoronix-test-suite/</a></p>
  </li>
</ul>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[kref]]></summary></entry><entry><title type="html">Wayland Misc</title><link href="http://localhost:4000/blog/jekyll/2019-08-10-Wayland-Misc.html" rel="alternate" type="text/html" title="Wayland Misc" /><published>2019-08-10T00:00:00+08:00</published><updated>2019-08-10T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/Wayland-Misc</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2019-08-10-Wayland-Misc.html"><![CDATA[<h1 id="expat">Expat</h1>

<p><strong>Expat</strong> 是一个用 <strong>C</strong> 编写的流式 <strong>XML 解析库</strong>。它在处理文件大小超出内存限制且性能和灵活性至关重要的情况下表现出色。许多应用程序、库和硬件都使用了 <strong>Expat</strong>，并且还有一些绑定和第三方封装。</p>

<p>以下是关于 <strong>Expat</strong> 的一些重要信息：</p>

<ul>
  <li><strong>什么是 Expat？</strong> Expat 是一个流式解析器，应用程序在开始解析之前向解析器注册处理程序，以处理 XML 文档中发现的相关结构（例如开始标签等）。</li>
  <li><strong>主要特点</strong>：
    <ul>
      <li><strong>流式解析</strong>：Expat 是流式解析器，它在解析之前注册处理程序，然后在文档中发现相关结构时调用这些处理程序。</li>
      <li><strong>适用于大文件</strong>：Expat 适用于那些文件太大而无法放入内存的情况。</li>
      <li><strong>性能优越</strong>：Expat 在解析速度和灵活性方面表现出色。</li>
      <li><strong>广泛使用</strong>：许多应用程序、库和硬件都使用了 Expat。</li>
      <li><strong>绑定和封装</strong>：Expat 还有一些绑定和第三方封装，使其更易于在不同环境中使用。</li>
    </ul>
  </li>
</ul>

<p>请查看 <a href="https://libexpat.github.io/doc/getting-started/">这篇介绍性文章</a></p>

<ul>
  <li>
    <p><strong>示例</strong></p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>  <span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>  <span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>  <span class="cp">#include</span> <span class="cpf">&lt;expat.h&gt;</span><span class="cp">
</span>    
  <span class="c1">// 回调函数：处理开始标签</span>
  <span class="kt">void</span> <span class="nf">startElement</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">userData</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">atts</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Start element: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
  <span class="p">}</span>
    
  <span class="c1">// 回调函数：处理结束标签</span>
  <span class="kt">void</span> <span class="nf">endElement</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">userData</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"End element: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
  <span class="p">}</span>
    
  <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 创建解析器</span>
      <span class="n">XML_Parser</span> <span class="n">parser</span> <span class="o">=</span> <span class="n">XML_ParserCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parser</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Error creating XML parser.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
    
      <span class="c1">// 设置回调函数</span>
      <span class="n">XML_SetElementHandler</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">startElement</span><span class="p">,</span> <span class="n">endElement</span><span class="p">);</span>
    
      <span class="c1">// XML 数据（示例）</span>
      <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">xmlData</span> <span class="o">=</span> <span class="s">"&lt;root&gt;&lt;item&gt;Apple&lt;/item&gt;&lt;item&gt;Banana&lt;/item&gt;&lt;/root&gt;"</span><span class="p">;</span>
    
      <span class="c1">// 解析 XML 数据</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">XML_Parse</span><span class="p">(</span><span class="n">parser</span><span class="p">,</span> <span class="n">xmlData</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">xmlData</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">XML_STATUS_ERROR</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Error parsing XML data.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
          <span class="n">XML_ParserFree</span><span class="p">(</span><span class="n">parser</span><span class="p">);</span>
          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
    
      <span class="c1">// 释放解析器</span>
      <span class="n">XML_ParserFree</span><span class="p">(</span><span class="n">parser</span><span class="p">);</span>
    
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

</code></pre></div>    </div>
  </li>
</ul>

<h1 id="libffi">libffi</h1>

<p><strong>libffi</strong> 是一个用 <strong>C</strong> 编写的<strong>可移植的外部函数接口库</strong>。它为不同的调用约定提供了一个高级别的编程接口，允许程序员在运行时调用任何由调用接口描述指定的函数。<strong>FFI</strong> 代表<strong>外部函数接口</strong>，是允许在一种语言中编写的代码调用另一种语言中编写的代码的接口。<strong>libffi</strong> 实际上只提供了完整特性的外部函数接口的最底层、与机器相关的部分。在<strong>libffi</strong>之上必须存在一个处理两种语言之间传递的值的类型转换层。</p>

<p>以下是关于 <strong>libffi</strong> 的一些重要信息：</p>

<ul>
  <li>
    <p><strong>什么是 libffi？</strong> 编译器为高级语言生成遵循某些约定的代码。其中之一是<strong>“调用约定”</strong>。<strong>“调用约定”</strong>实际上是编译器对函数参数在进入函数时的位置的一组假设。<strong>“调用约定”</strong>还指定了函数的返回值在哪里找到。有些程序在编译时可能不知道要传递给函数的参数。例如，解释器可能在运行时告知调用给定函数所使用的参数的数量和类型。<strong>libffi</strong> 可以在这些程序中使用，以提供从解释器程序到编译代码的桥梁。<strong>libffi</strong> 库为各种调用约定提供了一个可移植的高级别编程接口，允许程序员在运行时调用任何由调用接口描述指定的函数。<strong>FFI</strong> 代表<strong>外部函数接口</strong>。外部函数接口是允许在一种语言中编写的代码调用另一种语言中编写的代码的接口。<strong>libffi</strong> 实际上只提供了完整特性的外部函数接口的最底层、与机器相关的部分。在<strong>libffi</strong>之上必须存在一个处理两种语言之间传递的值的类型转换层。</p>
  </li>
  <li>
    <p><strong>支持的平台</strong>：<strong>libffi</strong> 已经移植到许多不同的平台。发布时，已经测试了以下基本配置：</p>
    <ul>
      <li><strong>架构</strong>：AArch64（ARM64）、Alpha、ARC、ARM、AVR32、Blackfin 等。</li>
      <li><strong>操作系统</strong>：Linux、iOS、Windows 等。</li>
      <li><strong>编译器</strong>：Clang、GCC、MSVC 等。</li>
    </ul>
  </li>
</ul>

<p>如想了解更多关于 <strong>libffi</strong> 的细节，可以查看 <a href="http://sourceware.org/libffi/">libffi 官方网页</a>。</p>

<ul>
  <li>
    <p><strong>示例</strong> : 在这个示例中，我们使用了 libffi 来调用标准库函数 puts，并传递了不同的字符串作为参数。这个示例展示了如何使用 libffi 动态地调用外部函数。</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>  <span class="cp">#include</span> <span class="cpf">&lt;ffi.h&gt;</span><span class="cp">
</span>    
  <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">ffi_cif</span> <span class="n">cif</span><span class="p">;</span>
      <span class="n">ffi_type</span> <span class="o">*</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
      <span class="n">ffi_arg</span> <span class="n">rc</span><span class="p">;</span>
    
      <span class="c1">// 初始化参数信息向量</span>
      <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ffi_type_pointer</span><span class="p">;</span>
      <span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">;</span>
    
      <span class="c1">// 初始化 cif</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ffi_prep_cif</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cif</span><span class="p">,</span> <span class="n">FFI_DEFAULT_ABI</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ffi_type_sint</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">==</span> <span class="n">FFI_OK</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">s</span> <span class="o">=</span> <span class="s">"Hello World!"</span><span class="p">;</span>
          <span class="n">ffi_call</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cif</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span><span class="n">puts</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rc</span><span class="p">,</span> <span class="n">values</span><span class="p">);</span>
          <span class="c1">// rc 现在保存了对 puts 的调用结果</span>
          <span class="c1">// 更改 s 的值后，可以再次调用 puts()</span>
          <span class="n">s</span> <span class="o">=</span> <span class="s">"This is cool!"</span><span class="p">;</span>
          <span class="n">ffi_call</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cif</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span><span class="n">puts</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rc</span><span class="p">,</span> <span class="n">values</span><span class="p">);</span>
      <span class="p">}</span>
    
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[Expat]]></summary></entry><entry><title type="html">硬中断</title><link href="http://localhost:4000/blog/jekyll/2019-02-03-interrupte.html" rel="alternate" type="text/html" title="硬中断" /><published>2019-02-03T00:00:00+08:00</published><updated>2019-02-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/interrupte</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2019-02-03-interrupte.html"><![CDATA[<p>【转帖】</p>

<p>本来想写内核如何接收一个网络包这个过程，但发现把整个过程捋顺了，还是很难的。</p>

<p>推导整个过程的起点是<strong>中断</strong>，包括<strong>硬中断</strong>和<strong>软中断</strong>。</p>

<p>而这个过程要是讲清楚吧，感觉在整个网络包接收原理的大流程中有点喧宾夺主。但要是一笔带过吧，那对于这块有困惑的人就很难受，一切的起点没整明白在心里总是个疙瘩。所以，单拎出来一个主题中断，给大家把这个问题搞明白了。</p>

<p>另外，<strong>整个操作系统就是一个中断驱动的死循环</strong>，操作系统原理如果用一行代码解释，下面这样再合适不过了。</p>

<pre><code class="language-C">while(true) {
	doNothing();
}
</code></pre>

<p><strong>其他所有事情都是由操作系统提前注册的中断机制和其对应的中断处理函数完成</strong>，我们点击一下鼠标，敲击一下键盘，执行一个程序，都是用中断的方式来通知操作系统帮我们处理这些事件，当没有任何需要操作系统处理的事件时，它就乖乖停在死循环里不出来。</p>

<p>所以，中断，非常重要，它也是理解整个操作系统的根基，掌握它，不亏！</p>

<p>那我们开始吧。</p>

<p><strong>五花八门的中断分类</strong></p>

<p>关于中断的分类，教科书上和网上有很多”标准”答案了，如果你用搜索引擎去寻找答案，可能会找出很多不一样的分类结果。</p>

<p>所以我打算直接在 Intel 手册上找个最官方的标准答案。</p>

<p>在 <em>Intel 手册 Volume 1 Chapter 6.4 Interrupts and Exception</em> 给出。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXRaebHKiaWevE73umedjHIDmQ3eQXdDdbee9wMwIwic5eNK9N2Erm01239eKbz1hl6ZWLSo3BRf6UBg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>

<p>翻译过来就是，<strong>中断可以分为中断和异常，异常又可以分为故障、陷阱、中止</strong>。</p>

<p>第一句话有点奇怪，啥叫中断分为中断和异常呢？你看好多文章的时候也是这么写的，不知道你有没有曾疑惑过。</p>

<p>但其实原文的意思准确说是，<strong>CPU 提供了两种中断程序执行的机制，中断和异常</strong>。第一个中断是个动词，第二个中断才是真正的机制种类。</p>

<p>好吧，我感觉原文也挺奇怪的，但人家就这么叫，没辙。</p>

<p>接下来我只需要翻译一下就好了，再夹杂点自己的解读。</p>

<p>An interrupt is an asynchronous event that is typically triggered by an I/O device.</p>

<p>先说第一个机制中断（interrupt），<strong>中断是一个异步事件，通常由 IO 设备触发</strong>。比如点击一下鼠标、敲击一下键盘等。</p>

<p>An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction.</p>

<p>再说第二个机制异常（exception），<strong>异常是一个同步事件，是 CPU 在执行指令时检测到的反常条件</strong>。比如除法异常、错误指令异常，缺页异常等。</p>

<p>这两个机制，殊途同归，<strong>都是让 CPU 收到一个中断号</strong>，至于 CPU 收到这个中断号之后干嘛，我们暂且不管。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXRaebHKiaWevE73umedjHIDmq0gPkgWwLqjwEibZabXqibsCoCtG03GLQzxIvXh7UK3WYHYNHYWluPNQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>

<p>我们先看看收到中断号之前，具体就是中断和异常到底是怎么做到给 CPU 一个中断号的。</p>

<p>先说中断，别眨眼。</p>

<p>有一个设备叫做<strong>可编程中断控制器</strong>，它有很多的 <strong>IRQ</strong> 引脚线，接入了一堆能发出中断请求的硬件设备，当这些硬件设备给 IRQ 引脚线发一个信号时，由于可编程中断控制器提前被设置好了 IRQ 与中断号的对应关系，所以就转化成了对应的中断号，把这个中断号存储在自己的一个端口上，然后给 CPU 的 <strong>INTR</strong> 引脚发送一个信号，CPU 收到 INTR 引脚信号后去刚刚的那个端口读取到这个中断号的值。</p>

<p>估计你被绕晕了，但读我的文章有个好处，太复杂就上动图，来吧。
![[image-20230320094930185.png]]</p>

<p>你看，<strong>最终的目标，就是让 CPU 知道，有中断了，并且也知道中断号是多少</strong>。</p>

<p>比如上图中按下了键盘，最终到 CPU 那里的反应就是，得到了一个中断号 <strong>0x21</strong>。</p>

<p>那异常的机制就更简单了，是 CPU 自己执行指令时检测到的一些反常情况，然后自己给自己一个中断号即可，无需外界给。</p>

<p>比如 CPU 执行到了一个无效的指令，则自己给自己一个中断号 <strong>0x06</strong>，这个中断号是 Intel 的 CPU 提前就规定好写死了的硬布线逻辑。</p>

<p>好了，到目前为止，我们知道了无论是<strong>中断</strong>还是<strong>异常</strong>，最终都是通过各种方式，让 CPU 得到一个中断号。只不过中断是通过外部设备给 CPU 的 INTR 引脚发信号，异常是 CPU 自己执行指令的时候发现特殊情况触发的，自己给自己一个中断号。</p>

<p>还有一种方式可以给到 CPU 一个中断号，但 Intel 手册写在了后面，<em>Chapter 6.4.4 INT n</em>，就是大名鼎鼎的 <strong>INT 指令</strong>。
![[image-20230320095004648.png]]</p>

<p>INT 指令后面跟一个数字，就相当于直接用指令的形式，告诉 CPU 一个中断号。</p>

<p>比如 <strong>INT 0x80</strong>，就是告诉 CPU 中断号是 <strong>0x80</strong>。Linux 内核提供的<strong>系统调用</strong>，就是用了 INT 0x80 这种指令。</p>

<p>那我们上面的图又丰富了起来。
![[image-20230320095040034.png]]</p>

<p>有的地方喜欢把他们做一些区分，把 INT n 这种方式叫做<strong>软件中断</strong>，因为他是由软件程序主动触发的。相应的把上面的中断和异常叫做<strong>硬件中断</strong>，因为他们都是硬件自动触发的。</p>

<p>但我觉得大可不必，一共就这么几个分类，干嘛还要增加一层理解的成本呢，记三个方式不好么？</p>

<p>好了，总结一下，给 CPU 一个中断号有三种方式，而这也是中断分类的依据。</p>

<p><em><strong>1.</strong></em> <strong>通过中断控制器给 CPU 的 INTR 引脚发送信号</strong>，并且允许 CPU 从中断控制器的一个端口上读取中断号，比如按下键盘的一个按键，最终会给到 CPU 一个 0x21 中断号。</p>

<p><em><strong>2.</strong></em> <strong>CPU 执行某条指令发现了异常</strong>，会自己触发并给自己一个中断号，比如执行到了无效指令，CPU 会给自己一个 0x06 的中断号。</p>

<p><em><strong>3.</strong></em> <strong>执行 INT n 指令</strong>，会直接给 CPU 一个中断号 n，比如触发了 Linux 的系统调用，实际上就是执行了 INT 0x80 指令，那么 CPU 收到的就是一个 0x80 中断号。</p>

<p>再往后，CPU 以各种不同的方式收到的这些 0x21 0x06 0x80，都会<strong>一视同仁</strong>，做同样的后续处理流程，所以从现在开始，前面的事情就不用再管了，这也体现了分层的好处。</p>

<p><strong>收到中断号之后 CPU 干嘛？</strong></p>

<p>那 CPU 收到中断号后，如何处理呢？</p>

<p>先用一句不太准确的话总结，<strong>CPU 收到一个中断号 n 后，会去中断向量表中寻找第 n 个中断描述符，从中断描述符中找到中断处理程序的地址，然后跳过去执行</strong>。</p>

<p>为什么说不准确呢？因为从中断描述符中找到的，并不直接是程序的地址，而是<strong>段选择子</strong>和<strong>段内偏移地址</strong>。然后段选择子又会去<strong>全局描述符表</strong>中寻找<strong>段描述符</strong>，从中取出<strong>段基址</strong>。之后段基址 + 段内偏移地址，才是最终处理程序的入口地址。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" />当然这个入口地址，还不是最终的物理地址，如果开启了分页，又要经历分页机制的转换，就像下面这样。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" />不过不要担心，这不是中断的主流程，<strong>因为分段机制和分页机制是所有地址转换过程的必经之路，并不是中断这个流程所特有的</strong>。</p>

<p>所以我们简单的把中断描述符表中存储的地址，直接当做 CPU 可以跳过去执行的中断处理程序的入口地址，就好了，不影响理解他们。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>你看，这是不是简单很多。</p>

<p>那接下来的问题就很简单了，这里出现了两个名词，那就分别对他们进行发问。</p>

<p><em><strong>1.</strong></em> 中断描述符表是啥？</p>

<p><em><strong>2.</strong></em> 中断描述符是啥？</p>

<p><em><strong>3.</strong></em> 去哪里找他们？</p>

<p>分别回答即可</p>

<blockquote>
  <blockquote>
    <p><strong>中断描述符表是啥？</strong></p>

  </blockquote>
</blockquote>

<p><strong>就是一个在内存中的数组而已</strong>，操作系统初始化过程中，有很多结构都称之为 XXX 表，其实就是个数组罢了。</p>

<p>以 linux-2.6.0 源码为例，就很直观了。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct desc_struct idt_table[256] = { {0, 0}, };
</code></pre></div></div>

<p>你看，是一个大小为 256 的数组。idt_table 这个名字就是 <strong>Interrupt Descriptor Table</strong>，逐字翻译过来确实就是<strong>中断描述符表</strong>。</p>

<blockquote>
  <blockquote>
    <p><strong>中断描述符是啥？</strong></p>

  </blockquote>
</blockquote>

<p><strong>就是中断描述符表这个数组里的存储的数据结构</strong>，通过刚刚的源码也可以看出来，是一个叫 <strong>desc_struct</strong> 的结构。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct desc_struct {    unsigned long a,b;};
</code></pre></div></div>

<p>好家伙，Linux 源码里就这么简单粗暴表示，一个中断描述符的大小为 64 位，也就是 8 个字节，具体里面存的啥通过这个源码看不出来。</p>

<p>翻一下 Intel 手册，在 <em>Volumn 3 Chapter 5.11 IDT Descriptors</em> 中找到了一张图。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>可以看到，中断描述符具体还分成好几个种类，有：</p>

<p><strong>Task Gate</strong>：任务门描述符</p>

<p><strong>Interrupt Gate</strong>：中断门描述符</p>

<p><strong>Trap Gate</strong>：陷阱门描述符</p>

<p>不要慌，其中任务门描述符 Linux 中几乎没有用到。</p>

<p>中断门描述符和陷阱门描述符的区别仅仅是<strong>是否允许中断嵌套</strong>，实现方式非常简单粗暴，就是 CPU 如果收到的中断号对应的是一个中断门描述符，就修改 IF 标志位（就是一个寄存器中一位的值），修改了这个值后就屏蔽了中断，也就防止了中断的嵌套。而陷阱门没有改这个标志位，也就允许了中断的嵌套。</p>

<p>所以简单理解的话，你把他们当做同样一个描述符就好了，先别管这些细节，他们的结构几乎完全一样，只是差了一个类型标识罢了。</p>

<p>那这个中断描述符的结构长什么样呢？我们可以清晰地看到，里面有<strong>段选择子</strong>和<strong>段内偏移地址</strong>。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>回顾下刚刚说的中断处理流程。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" />没骗你吧。</p>

<p>但以上这些如果你都搞不明白，还是那句话，记这个最简单的流程就好了，不影响理解。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>好了，现在我们直观地看到了中断描述符表这个 256 大小的数组，以及它里面存的中断描述符长什么样子，<strong>最终的目的，还是帮助 CPU 找到一个程序的入口地址，然后跳转过去</strong>。</p>

<p>OK，下一个问题，就是 CPU 怎么寻找到这个中断描述符表的位置呢？它是在内存中一个固定的位置么？</p>

<blockquote>
  <blockquote>
    <p><strong>CPU 怎么找到中断描述符表</strong></p>

  </blockquote>
</blockquote>

<p>答案是否定的，<strong>中断描述符表在哪里，全凭各个操作系统的喜好，想放在哪里就放在哪里</strong>，但需要通过某种方式告诉 CPU，即可。</p>

<p>怎么告诉呢？CPU 提前预留了一个寄存器叫 <strong>IDTR 寄存器</strong>，这里面存放的就是中断描述符表的起始地址，以及中断描述符表的大小。</p>

<p>在 <em>Volumn 3 Chapter 5.10 Interrupt Descriptor Table</em> 中告诉了我们 IDTR 寄存器的结构。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>操作系统的代码可以通过 <strong>LIDT 指令</strong>，将中断描述符表的地址放在这个寄存器里。</p>

<p>还记得刚刚看的源码么？中断描述符表就是这个。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct desc_struct idt_table[256] = { {0, 0}, };
</code></pre></div></div>

<p>然后操作系统把这个的地址用 <strong>LIDT</strong> 指令放在 <strong>IDTR 寄存器</strong>就行了。IDTR 寄存器里的值一共 48 位，前 16 位是中断描述符表大小（字节数），后 32 位是中断描述符表的起始内存地址，就是这个 idt_table 的位置。</p>

<p>Linux-2.6.0 源码中是这样构造这个结构的，简单粗暴。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>idt_descr:    .word 256 * 8 - 1    .long idt_table
</code></pre></div></div>

<p>紧接着，一个 LIDT 指令把这个结构放到 IDTR 寄存器中。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lidt idt_descr
</code></pre></div></div>

<p>整个过程一气呵成，呵得我连代码格式都懒得调了，是不是很清晰明了。</p>

<p>这样，CPU 收到一个中断号后，<strong>中断描述符表的起始位置从 IDTR 寄存器中可以知道，而且里面的每个中断描述符都是 64 位大小，也就是 8 个字节，那自然就可以找到这个中断号对应的中断描述符</strong>。</p>

<p>接下来的问题就是，这个中断描述符表是谁来提前写好的？又是怎么写的？</p>

<blockquote>
  <blockquote>
    <p><strong>谁把中断描述符表这个结构写在内存的</strong></p>

  </blockquote>
</blockquote>

<p>很简单，操作系统呗。</p>

<p>在 Linux-2.6.0 内核源码的 traps.c 文件中，有这样一段代码。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void __init trap_init(void) {    set_trap_gate(0, &amp;divide_error);    ...    set_trap_gate(6, &amp;invalid_op);    ...    set_intr_gate(14, &amp;page_fault);    ...    set_system_gate(0x80, &amp;system_call);}
</code></pre></div></div>

<p>你看，我们刚刚提到的<strong>除法异常、非法指令异常、缺页异常</strong>，以及之后可能通过 INT 0x80 触发<strong>系统调用</strong>的中断处理函数 system_call，就是这样被写到了中断描述符表里。</p>

<p>经过这样一番操作后，我们的中断描述符表里的值就丰富了起来。</p>

<p>好了，现在只剩下最后一个问题了，CPU 在找到一个中断描述符后，如何跳过去执行？</p>

<blockquote>
  <blockquote>
    <p><strong>找到中断描述符后，干嘛</strong></p>

  </blockquote>
</blockquote>

<p>现在这个问题可以再问得大一些了，就是 <strong>CPU 在收到一个中断号并且找到了中断描述符之后，究竟做了哪些事</strong>？</p>

<p>当然，最简单的办法就是，<strong>直接把中断描述符里的中断程序地址取出来，放在自己的 CS:IP 寄存器中</strong>，因为这里存的值就是下一跳指令的地址，只要放进去了，到下一个 CPU 指令周期时，就会去那里继续执行了。</p>

<p>但 CPU 并没有这样简单粗暴，而是帮助我们程序员做了好多额外的事情，这增加了我们的学习和理解成本，但方便了写操作系统的程序员，拿到一些中断的信息，以及中断程序结束后的返回工作。</p>

<p>但其实，就是做了一些<strong>压栈操作</strong>。</p>

<p><em><strong>1.</strong></em> 如果发生了特权级转移，压入之前的堆栈段寄存器 SS 及栈顶指针 ESP 保存到栈中，并将堆栈切换为 TSS 中的堆栈。</p>

<p><em><strong>2.</strong></em> 压入标志寄存器 EFLAGS。</p>

<p><em><strong>3.</strong></em> 压入之前的代码段寄存器 CS 和指令寄存器 EIP，相当于压入返回地址。</p>

<p><em><strong>4.</strong></em> 如果此中断有错误码的，压入错误码 ERROR_CODE</p>

<p><em><strong>5.</strong></em> 结束（之后就跳转到中断程序了）</p>

<p>压栈操作结束后，栈就变成了这个样子。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>特权级的转移需要切换栈，所以提前将之前的<strong>栈指针</strong>压入。<strong>错误码</strong>可以方便中断处理程序做一些工作，如果需要，从栈顶拿到就好了。</p>

<p>抛开这两者不说，剩下的就只有<strong>标志寄存器</strong>和<strong>中断发生前的代码地址</strong>，被压入了栈，这很好理解，就是方便中断程序结束后，返回原来的代码嘛~</p>

<p>具体的压栈工作，以及如何利用这些栈的信息达到结束中断并返回原程序的效果，Intel 手册中也写得很清楚。</p>

<p><em>Volumn 3A System Programming Guide  Chapter 5.12.1Exception- or Interrupt-Handler Procedures</em></p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>看下面的话，通过配合 <strong>IRET</strong> 或 <strong>IRETD</strong> 指令返回。</p>

<p>由于后续版本的 Linux 自己的玩法比较多，已经不用 Intel 提供的现成指令了，所以这回我们从 Linux-0.11 版源码中寻找答案。</p>

<p>比如除法异常的中断处理函数，在 asm.s 中。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_divide_error: push dword ptr _do_divide_error ;no_error_code: ; xchg [esp],eax ; push ebx push ecx push edx push edi push esi push ebp push ds ; push es push fs push 0 ; lea edx,[esp+44] ; push edx mov edx,10h ; mov ds,dx mov es,dx mov fs,dx call eax ; add esp,8 ; pop fs pop es pop ds pop ebp pop esi pop edi pop edx pop ecx pop ebx pop eax ;// 弹出原来eax 中的内容。 iretd
</code></pre></div></div>

<p>只看最后一行，确实用了 iretd 指令。</p>

<p>这个指令会依次弹出栈顶的三个元素，把它们分别赋值给 <strong>EIP，CS 和 EFLAGS</strong>，而栈顶的三个元素，又恰好是 <strong>EIP，CS 和 EFLAGS</strong> 这样的顺序，你说这巧不巧？</p>

<p>当然不巧，人家 CPU 执行中断函数前做了压栈操作，然后又提供了 iret 指令做弹栈操作，当然是给你配套使用的！</p>

<p>你看，<strong>中断是如何切到中断处理程序的？就是靠中断描述符表中记录的地址。那中断又如何回到原来的代码继续执行呢？是通过 CPU 帮我们把中断发生前的地址压入了栈中</strong>，然后我们程序自己利用他们去返回，当然也可以不返回。</p>

<p>这就是 CPU 和操作系统配合的结果，把中断这个事给解决了。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p><strong>总结</strong></p>

<p>所以总结起来就是，理解中断，只要回答了这几个问题就好。</p>

<p><strong>如何给 CPU 一个中断号？</strong></p>

<p>外部设备通过 INTR 引脚，或者 CPU 执行指令的过程中自己触发，或者由软件通过 INT n 指令强行触发。</p>

<p>同样中断也是这样进行分类的。</p>

<p><strong>CPU 收到中断号后如何寻找到中断程序的入口地址？</strong></p>

<p>通过 IDTR 寄存器找到中断描述符表，通过中断描述符表和中断号定位到中断描述符，取出中断描述符表中存储的程序入口地址。</p>

<p><strong>中断描述符表是谁写的？</strong></p>

<p>操作系统代码写上去的。</p>

<p><strong>找到程序入口地址之后，CPU 做了什么？</strong></p>

<p>简单说，实际上做的事情就是压栈，并跳转到入口地址处执行代码。而压栈的目的，就是保护现场（原来的程序地址、原来的程序堆栈、原来的标志位）和传递信息（错误码）</p>

<p>好了，中断讲完了，如果再往后扩大一点点概念，以上说的中断，统统都是<strong>硬中断</strong>。注意，不叫硬件中断哦。</p>

<p>为什么叫硬中断呢？因为这是 Intel CPU 这个硬件实现的中断机制，注意这里是实现机制，并不是触发机制，因为触发可以通过外部硬件，也可以通过软件的 INT 指令。</p>

<p>那与硬中断对应的还有<strong>软中断</strong>，这个概念网上好多地方都讲错了，把软中断和 INT 指令这种软件中断混淆了，<strong>所以我觉得软件中断最好称其为，由软件触发的中断，而软中断称其为软件实现的中断</strong>。</p>

<p><strong>软中断是纯粹由软件实现的一种类似中断的机制</strong>，实际上它就是模仿硬件，在内存中有一个地方存储着软中断的标志位，然后由内核的一个线程不断轮询这些标志位，如果有哪个标志位有效，则再去另一个地方寻找这个软中断对应的中断处理程序。</p>

<p>软中断是 Linux 实现中断的<strong>下半部</strong>的一种非常常见的方式，之后我讲 Linux 内核如何接受网络包这个事情的时候也可以看到，软中断是研究整个过程的一个突破口。</p>

<ul>
  <li>EOF -</li>
</ul>

<p>推荐阅读  点击标题可跳转</p>

<p>1、<a href="http://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666558962&amp;idx=1&amp;sn=ede9eea879107df21557e1b9dcfeeb28&amp;chksm=80dcb159b7ab384f22e68fc32d5556afd3e98c29d08757a871582d526bf5985b0c7c3fd3ec6d&amp;scene=21#wechat_redirect">10 分钟看懂 Docker 和 K8S</a></p>

<p>2、<a href="http://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666558647&amp;idx=1&amp;sn=f9f02d09c89ec081c61a717b3724b7fd&amp;chksm=80dcb01cb7ab390a0d89664294542d564e7cc4d539cc6dc30ef997158d1b1ac496a21a991407&amp;scene=21#wechat_redirect">这才是中国被卡脖子最严重的软件！</a></p>

<p>3、<a href="http://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666558954&amp;idx=2&amp;sn=775617c1787bb8ab5251444c8762cd44&amp;chksm=80dcb141b7ab38576e44e8149b6f64aab5812d557f7f50a6b8543b375c7a67acac0fe75f00ac&amp;scene=21#wechat_redirect">如果让你来设计网络，你会把它弄成啥样？</a></p>

<p>看完本文有收获？请分享给更多人</p>

<p>推荐关注「Linux 爱好者」，提升Linux技能</p>

<p><img src="http://mmbiz.qpic.cn/mmbiz_png/9aPYe0E1fb3sjicd8JxDra10FRIqT54Zke2sfhibTDdtdnVhv5Qh3wLHZmKPjiaD7piahMAzIH6Cnltd1Nco17Ihjw/0?wx_fmt=png" alt="" /></p>

<p><strong>Linux爱好者</strong></p>

<p>点击获取《每天一个Linux命令》系列和精选Linux技术资源。「Linux爱好者」日常分享 Linux/Unix 相关内容，包括：工具资源、使用技巧、课程书籍等。</p>

<p>75篇原创内容</p>

<p>公众号</p>

<p>点赞和在看就是最大的支持❤️</p>

<p>分享收藏</p>

<p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&amp;size=102&amp;__biz=MzAxODI5ODMwOA==&amp;mid=2666559053&amp;idx=2&amp;sn=cdd9e3e14102740664c93bfe99bb0044&amp;send_time=" alt="" /></p>

<p>微信扫一扫<br />
关注该公众号</p>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[【转帖】]]></summary></entry><entry><title type="html">Weston</title><link href="http://localhost:4000/blog/jekyll/2019-01-11-Weston.html" rel="alternate" type="text/html" title="Weston" /><published>2019-01-11T00:00:00+08:00</published><updated>2019-01-11T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/Weston</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2019-01-11-Weston.html"><![CDATA[<h1 id="1-启动weston">1. 启动Weston</h1>

<h2 id="11-实现内容">1.1 实现内容</h2>

<ol>
  <li>解析cmdline</li>
  <li>初始化log系统</li>
  <li>创建wl_display对象，并<strong>侦听client接入</strong></li>
  <li>创建weston_compositor对象，从而创建global resource <strong>compositor</strong> 和 <strong>shm</strong>， 以前其他资源</li>
  <li><strong>load backend</strong>， 默认为drm_backend, 在drm_backend初始化的过程中会<strong>load gl_renderer</strong></li>
  <li><strong>load shell</strong>, 默认为desktop-shell.so</li>
  <li>调用wl_display_run( ) <strong>循环等待event的发生</strong></li>
</ol>

<h2 id="12-伪代码">1.2 伪代码</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">wet_main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[],</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">weston_testsuite_data</span> <span class="o">*</span><span class="n">test_data</span><span class="p">){</span>

    <span class="c1">// 初始化 layoutput_list</span>
    <span class="n">wl_list_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wet</span><span class="p">.</span><span class="n">layoutput_list</span><span class="p">);</span>
    <span class="p">...</span>
    <span class="c1">//  parse command line</span>
    <span class="p">...</span>
    <span class="c1">//  init log system</span>
    <span class="p">...</span>
    
    <span class="c1">// 调用wayland提供的函数wl_display_create()</span>
    <span class="c1">// 创建 wl_display 对象</span>
    <span class="n">display</span> <span class="o">=</span> <span class="n">wl_display_create</span><span class="p">();</span>
    <span class="p">...</span>
    
    <span class="c1">// 创建 weston_compositor 对象  </span>
    <span class="c1">// --&gt; 创建 global resource compositor and shm 以及其他resource</span>
    <span class="n">weston_compositor_create</span><span class="p">(</span> <span class="p">);</span>    
    <span class="c1">// 读取config for compositor</span>
    <span class="p">...</span>
    
    <span class="c1">// load backend，通用的为load_drm_backend( )</span>
    <span class="c1">// 最终调用 对应backend实现的weston_backend_init( )</span>
    <span class="c1">// 在backend 初始化的过程中会装载 gl_renderer</span>
    <span class="n">load_backend</span><span class="p">(</span><span class="n">compositor</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
    <span class="p">...</span>
    
    <span class="c1">// 创建socket， 侦听client的连接请求</span>
    <span class="n">weston_create_listening_socket</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">socket_name</span><span class="p">)</span>
    <span class="p">...</span>
    <span class="c1">// load shell, 默认为 desktop-shell.so</span>
    <span class="n">wet_load_shell</span><span class="p">(</span><span class="n">compositor</span><span class="p">,</span> <span class="n">shell</span><span class="p">,</span> <span class="p">...)</span>
    <span class="p">...</span>
    <span class="c1">// loop, 循环等待event的发生</span>
    <span class="n">wl_display_run</span><span class="p">(</span><span class="n">display</span><span class="p">)</span>
    <span class="p">...</span>
    <span class="c1">// 退出流程，资源的释放</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="13-backend-renderer-shell的作用">1.3 backend, renderer, shell的作用</h2>

<p>结构图</p>

<p><img src="/blog/assets/wayland/image-20230209140244854.png" alt="image" /></p>

<p>backend</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
 <span class="n">destroy</span><span class="p">()</span>
 <span class="n">repaint_begin</span><span class="p">()</span>   <span class="c1">//composite之前调用</span>
 <span class="n">repaint_cancel</span><span class="p">()</span>  <span class="c1">// 中途取消</span>
 <span class="n">repaint_flush</span><span class="p">()</span>   <span class="c1">// composite 完成后调用， 可用于实现提交到display</span>
 <span class="n">create_output</span><span class="p">()</span>   <span class="c1">// 创建weston_output</span>
 <span class="n">device_changed</span><span class="p">()</span>
 <span class="n">can_scanout_dmabuf</span><span class="p">()</span>
<span class="p">}</span><span class="n">Weston_backend</span><span class="p">,</span> <span class="n">Compositor</span><span class="o">-&gt;</span><span class="n">backend</span>

</code></pre></div></div>

<p>renderer: 
renderer接口供backend内部使用，外部通过调用backend接口触发</p>
<pre><code class="language-C">{
   display_create()
   output_window_create()
   output_pbuffer_create()
   output_destroy()
   output_set_border()
   create_fence_fd()
} gl_renderer_interface
</code></pre>

<h1 id="2-client-动作">2. Client 动作</h1>

<h2 id="21-client的接入和global资源代理的创建">2.1 Client的接入和global资源代理的创建</h2>

<h3 id="流程">流程</h3>
<ol>
  <li>连接display</li>
  <li>获得registry，注册listener，用于处理weston资源变化时的callback</li>
  <li>根据资源变化的callback， 创建各类资源的proxy</li>
  <li>进入loop，不断调用wl_display_dispatch( )，使得wayland内部循环处理各类event</li>
</ol>

<h3 id="伪代码">伪代码</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">void</span> <span class="nf">global_resource_found</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">,</span> <span class="k">struct</span> <span class="n">wl_registry</span><span class="o">*</span> <span class="n">registry</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">interface</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">version</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 通过字符串interface 判断是什么resource，</span>
    <span class="c1">// 通过wl_registry_bind() 创建对应的 resource proxy</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">interface</span><span class="p">,</span> <span class="s">"wl_compositor"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 构建了 compositor 的 proxy    </span>
        <span class="n">compositor</span> <span class="o">=</span> <span class="n">wl_registry_bind</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wl_compositor_interface</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
        
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">interface</span><span class="p">,</span> <span class="s">"wl_shm"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 构建了 shm 的proxy</span>
        <span class="n">shm</span> <span class="o">=</span> <span class="n">wl_registry_bind</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wl_shm_interface</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="p">...</span>

<span class="p">}</span>

<span class="c1">// 当weston的global resoure发生变化时，通过如下回调函数通知到client</span>
<span class="n">wl_registry_listener</span> <span class="n">registry_listener</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 发现新global resource的回调函数</span>
    <span class="n">global_resource_found</span><span class="p">,</span>
    <span class="c1">// global resource remove的回调函数</span>
    <span class="n">global_resource_remove</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 调用wayland提供的 wl_display_connect( ), 连接到weston( wayland server)</span>
    <span class="c1">//    对应到weston启动中的weston_create_listening_socket()</span>
    <span class="n">display</span> <span class="o">=</span> <span class="n">wl_display_connect</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="p">...</span>
    
    <span class="c1">// 2. 获取 wl_registry, 并侦听它的callback</span>
    <span class="n">registry</span><span class="o">=</span> <span class="n">wl_display_get_registry</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
    <span class="n">wl_registry_add_listener</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">registry_listener</span><span class="p">,</span> <span class="n">display</span><span class="p">);</span>
    <span class="p">...</span>
    
    <span class="c1">// 3. 循环等待，</span>
    <span class="c1">//    调用wl_display_dispatch( )，由wayland处理weston发来的event</span>
    <span class="k">while</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">wl_display_dispatch</span><span class="p">(</span> <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="22-内部weston---client-通讯机制">2.2 内部weston - client 通讯机制</h2>

<p><mark>request</mark>:  Client –&gt; Server</p>

<p><mark>event</mark>  :  Server –&gt; Client</p>

<p>术语上，Wayland 中把 Client 发给 Server 的跨进程函数调用称为 request，反方向的跨进程函数调用称为 event。 本质上，它们处理的方式是类似的。</p>

<p>要让两个进程通过 socket 进行函数调用，首先需要将调用抽象成数据流的形式。这个数据流应该包含函数名、参数等信息。</p>

<p>IPC 函数的接口定义是应该同时包含在 Client 和 Server 端的库中的，其中包含了接口对象所支持的 request 和 event 的函数签名。因此这部分不用传输，只要传输目标<strong>对象 id</strong>，<strong>方法 id</strong> 和<strong>参数列表</strong>这些信息就可以了。</p>

<p>这些信息会通过 wl_closure_marshal()写入 wl_closure 结构，再由 serialize_closure()变成数据流。</p>

<p>等到了目标进程后， 会从数据流通过 wl_connection_demarshal()转回 wl_closure。</p>

<h3 id="ipc-图示">IPC 图示</h3>
<p><img src="/blog/assets/wayland/image-20230210145327279.png" alt="image-20230210145327279.png" /></p>

<h3 id="object-ipc-机制">object IPC 机制</h3>

<p>这个过程类似于 Android 中的 Parcel 机制。那么 问题来了，参数中的整形，字符串什么的都好搞，拷贝就行。但如果参数中包含对象，我们不能把整个对象 拷贝过去，也不能传引用过去。那么需要一种机制来作<strong>同一对象在 Server 和 Client 端的映射</strong>，这是通过 wl_map 实现的。</p>

<p>wl_map 在 Client 和 Server 端各有一个，它们分别存了 wl_proxy 和 wl_resource 的数组，且是 一一对应的。这些对象在这个数组中的索引作为它们的 id。这样，参数中的对象只要传 id，这个 id 被传到目 的地后会通过查找这个 wl_map 表来得到本地相应的对象。在功能上类似于 Android 中的 BpXXX 和 BnXXX。</p>

<p>wl_proxy 和 wl_resource 都包含 wl_object 对象。这个 wl_object 和面向对象语言里的对象概念类似，它有 interface 成员描述了这个对象所实现的接口，implementation 是这些接口的实现函数的函数指针数组，id 就是 在 wl_map 结构里数组中的索引。</p>

<p>前面所说的 Client 绑定 Server 端资源的过程就是在 Client 端创建 wl_proxy， 在 Server 端创建 wl_resource。然后 Client 就可以通过 wl_proxy 调用 Server 端对应 wl_resource 的 request， Server 端就可以通过 wl_resource 调用 Client 端对应 wl_proxy 的 event。</p>

<p>这个映射过程如下图所示(以 wl_registry 为例)</p>

<p><img src="/blog/assets/wayland/20141019204223671.png" alt="image" /></p>

<h2 id="23-client-创建各类资源proxy">2.3 Client 创建各类资源proxy</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// wl_surface</span>
<span class="n">wl_surface</span> <span class="o">=</span> <span class="n">wl_compositor_create_surface</span><span class="p">(</span><span class="n">compositor</span><span class="p">)</span>

<span class="c1">// wl_buffer</span>
<span class="n">wl_shm_pool</span> <span class="o">=</span> <span class="n">wl_shm_create_pool</span><span class="p">(</span> <span class="p">)</span>
<span class="n">wl_buffer</span> <span class="o">=</span> <span class="n">wl_shm_pool_create_buffer</span><span class="p">(</span> <span class="p">)</span>

<span class="c1">// attach buffer to surface</span>
<span class="n">wl_surface_attach</span><span class="p">(</span><span class="n">wl_surface</span><span class="p">,</span> <span class="n">wl_buffer</span><span class="p">)</span>

<span class="cm">/* 以下与窗口的管理\显示相关 */</span>

<span class="c1">// xdg_surface</span>
<span class="c1">// xdg_wm_base 它也是一个global resouce，对应到 desktop-shell</span>
<span class="n">xdg_surface</span> <span class="o">=</span> <span class="n">xdg_wm_base_get_xdg_surface</span><span class="p">(</span><span class="n">xdg_wm_base</span><span class="p">,</span> <span class="n">wl_surface</span><span class="p">)</span>

<span class="c1">// xdg_toplevel</span>
<span class="n">xdg_toplevel</span> <span class="o">=</span> <span class="n">xdg_surface_get_toplevel</span><span class="p">(</span><span class="n">xdg_toplevel</span><span class="p">)</span>

<span class="c1">// wl_keyboard</span>
<span class="c1">// wl_seat 是一个global resource</span>
<span class="c1">// 通过wl_keyboard 创建一个listener就可接收按键</span>
<span class="n">wl_keyboard</span> <span class="o">=</span> <span class="n">wl_seat_get_keyboard</span><span class="p">(</span><span class="n">wl_seat</span><span class="p">)</span>
<span class="n">wl_keyboard_add_listener</span><span class="p">(</span><span class="n">wl_keyboard</span><span class="p">,</span> <span class="n">keyboard_listener</span><span class="p">)</span>

<span class="c1">// wl_pointer 鼠标指针</span>
<span class="c1">// 通过wl_pointer 创建一个listener可以接收鼠标的移动信息</span>
<span class="n">wl_pointre</span> <span class="o">=</span> <span class="n">wl_seat_get_pointer</span><span class="p">(</span><span class="n">wl_weat</span><span class="p">)</span>
<span class="n">wl_pointer_add_listener</span><span class="p">(</span><span class="n">wl_pointer</span><span class="p">,</span> <span class="n">pointer_listener</span><span class="p">)</span>

<span class="p">...</span> <span class="p">...</span>

</code></pre></div></div>

<h2 id="24-client-渲染">2.4 Client 渲染</h2>

<p>伪代码
simple-egl.c</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*-------------------- egl 初始化工作 ------------------------*/</span>

<span class="c1">// egl lib 应该要支持wayland。</span>
<span class="c1">// 这样在调用一些egl接口时，在其内部会调用wayland接口与Wayland server交换信息</span>
<span class="c1">// 如函数：eglGetDisplay( ) , eglCreateWindowSurface( )， eglSwapBuffers 等</span>

<span class="c1">// 1. 获取egl_display</span>
<span class="n">egl_display</span> <span class="o">=</span> <span class="n">weston_platform_get_egl_display</span><span class="p">(</span><span class="n">EGL_PLATFORM_WAYLAND_KHR</span><span class="p">,</span> <span class="n">wl_display</span><span class="p">,</span> <span class="p">...)</span>
<span class="n">or</span>
<span class="n">egl_display</span> <span class="o">=</span> <span class="n">eglGetDisplay</span><span class="p">(</span><span class="n">wl_display</span><span class="p">)</span>

<span class="c1">// 2. 初始化 egl</span>
<span class="n">eglInitialize</span><span class="p">(</span><span class="n">egl_display</span><span class="p">)</span>

<span class="c1">// 3. 通用elg 配置</span>
<span class="n">eglGetConfigs</span><span class="p">()</span>
<span class="n">eglChooseConfig</span><span class="p">(</span> <span class="p">)</span>
<span class="n">eglCreateContext</span><span class="p">(</span> <span class="p">)</span>


<span class="cm">/* ----------------------gl 准备工作------------------------------*/</span>

<span class="c1">// 1.创建 shader</span>
<span class="n">glCreateShader</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 2.创建 Program</span>
<span class="n">glCreateProgram</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 3. attach shader to program</span>
<span class="n">glAttachShader</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 4. Link program</span>
<span class="n">glLinkProgram</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 5. 使用program</span>
<span class="n">glUseProgram</span><span class="p">(</span> <span class="p">)</span>

<span class="cm">/*-------------------------wl_surface 关联egl_surface----------------*/</span>
<span class="n">wl_egl_window</span><span class="o">-&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">wl_surface</span><span class="p">;</span>
<span class="n">wl_egl_window</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
<span class="n">wl_egl_window</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
<span class="n">eglCreateWindowSurface</span><span class="p">(</span><span class="n">egl_display</span><span class="p">,</span> <span class="p">...</span> <span class="p">,</span> <span class="n">wl_egl_window</span><span class="p">)</span>

<span class="cm">/*------------------------------------------------------------------*/</span>
<span class="n">gl</span> <span class="err">绘制图形</span>
<span class="cm">/*-------------------------------------------------------------------*/</span>

<span class="c1">// 内部实现应该调用wayland接口来swap buffer</span>
<span class="n">eglSwapBuffers</span><span class="p">(</span><span class="n">egl_display</span><span class="p">,</span> <span class="n">egl_surface</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div>

<h2 id="25-client-提交渲染好的surface">2.5. Client 提交渲染好的surface</h2>

<p>wl_surface_commit( )</p>

<h1 id="3-各个surface的合成与呈现呈现">3. 各个Surface的合成与呈现呈现·</h1>

<h2 id="31-流程">3.1 流程</h2>
<ol>
  <li>compositor遍历每个weston_output 发起repaint。weston_output_schedule_repaint( )</li>
  <li>通知weston_output具体实现–backend_output, 开始repaint的前期准备工作, 对应函数start_repaint_loop( )， drm实现暂无内容</li>
  <li>backend_output通知compositor可以开始output repaint</li>
  <li>compositor 调用weston_output相关backend的repaint_begin( )，drm_backend 创建了pending_state</li>
  <li>compoistor 调用weston_output_repaint(), 开始repaint。
 调用weston_compositor_build_view_list( ) 构建view_list, 得到output的一个paint_node_z_order_list</li>
  <li>调用drm_backend  assign_planes( ) 设置输出plane</li>
  <li>调用drm_backend  drm_output_repaint( ), 最终指向gl_renderer_repaint_output( )</li>
  <li>依据paint_node_z_order_list, OpenGL依次建立shader，texture等进行渲染</li>
  <li>全部完成后，提交呈现</li>
</ol>

<pre><code class="language-mermaid">sequenceDiagram
participant C as Compositor
participant O as Weston_output
participant B as Backend

loop 遍历weston_output_list
    C -&gt;&gt; O: 要开始repaint_loop &lt;br /&gt;call backend_output start_repaint_loop( )    
    C -&gt;&gt; B: repaint_begin( )
    Note right of B: 创建 pending_state
    C -&gt;&gt; O: 通知output repaint
    O -&gt;&gt; C: 构建view_list, build_view_list( )
    Note left of C:构建paint_node_z_order_list

    C -&gt;&gt; B: assign_planes( ),设置输出plane
    C -&gt;&gt; B: drm_output_repaint( )
    Note right of B: 调用OpenGL API &lt;br/&gt;结合paint_node_z_order_list&lt;br/&gt;进行渲染
end
</code></pre>]]></content><author><name>Kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1. 启动Weston]]></summary></entry><entry><title type="html">设备资源管理模块</title><link href="http://localhost:4000/blog/linux/2018-08-01-DeviceResourceManage.html" rel="alternate" type="text/html" title="设备资源管理模块" /><published>2018-08-01T00:00:00+08:00</published><updated>2018-08-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/linux/DeviceResourceManage</id><content type="html" xml:base="http://localhost:4000/blog/linux/2018-08-01-DeviceResourceManage.html"><![CDATA[<h1 id="1解决的问题">1.解决的问题</h1>

<p>相信每一个写过Linux driver的工程师，都在probe函数中遇到过上面的困惑：在顺序申请多种资源（IRQ、Clock、memory、regions、ioremap、dma、等等）的过程中，只要任意一种资源申请失败，就要回滚释放之前申请的所有资源。 于是在函数的最后，就一定会出现很多的goto标签，用于释放不同的资源（如上面的exit_free_irq、exit_free_dma、等等）。 在申请资源出错时，小心翼翼的goto到正确的标签上，以便释放已申请资源。</p>

<p>这样在代码中，整个函数被大段的、重复的如下代码充斥。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">condition</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="n">err</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span> 
    <span class="k">goto</span> <span class="n">xxx</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>
<p>既浪费精力容易出错，也不美观。 有困惑，就有改善的办法。 方法就是Linux设备模型中的device resource management（设备资源管理）。</p>

<h1 id="2解决的思路">2.解决的思路</h1>

<p>devres提供了一种机制，<font style="background:#8EE5EE">用资源节点的形式记录它申请的资源，并在系统中为设备分配一个链表，当申请某个资源时，就构建一个资源节点，然后把它加入到这个链表中，对应的释放函数也会被记录，以便在driver detach的时候，自动释放。</font></p>

<p>为了使用devres机制，资源要对各自的资源分配函数重新封装，加入资源节点的申请、添加和释放，一般新函数名改成了<font color="#ff0000">devm_xxx()</font>的形式。driver作者只管调用这些devm_xxx()接口来申请资源，不用考虑释放，设备模型会在适当的时候释放它们。</p>

<p>device resource management位于“drivers/base/devres.c”中，它实现了上述机制。
<img src="/blog/assets/DeviceResourceManagement/1.png" alt="1.png" /></p>

<h1 id="3提供的接口">3.提供的接口</h1>

<p>以下是devres提供的几个基本接口</p>

<table>
  <thead>
    <tr>
      <th>interface</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>devres_alloc( )</td>
      <td>// 分配资源节点</td>
    </tr>
    <tr>
      <td>devres_free( )</td>
      <td>// 释放资源节点</td>
    </tr>
    <tr>
      <td>devres_add( )</td>
      <td>// 添加资源节点到链表</td>
    </tr>
    <tr>
      <td>devres_destroy( )</td>
      <td>// 释放资源</td>
    </tr>
    <tr>
      <td>devres_release_all()</td>
      <td>//释放所有资源</td>
    </tr>
  </tbody>
</table>

<h1 id="4接口的使用">4.接口的使用</h1>

<p>其他资源模块，可以通过调用devres提供的接口，利用devres机制实现资源的自动释放。</p>

<h2 id="41-资源节点函数的应用举例">4.1 资源节点函数的应用举例</h2>

<p>下面的代码是利用devres机制实现分配中断资源函数 devm_request_threaded_irq( ), 上层模块可以调用它来分配中断资源，在出错时，不必考虑对该资源的释放，系统会自动释放。</p>

<p>主要涉及到devres_alloc()、devres_free()和devres_add()</p>

<p><img src="/blog/assets/DeviceResourceManagement/2.png" alt="2.png" /></p>

<h2 id="42-资源释放函数的应用举例">4.2 资源释放函数的应用举例</h2>

<p>资源释放函数devres_destroy()的使用举例，资源模块可以用它来封装资源释放函数。</p>

<p><img src="/blog/assets/DeviceResourceManagement/3.png" alt="3.png" width="500px" /></p>

<h1 id="5-函数的内部实现">5. 函数的内部实现</h1>

<h2 id="51-devres_alloc">5.1 devres_alloc()</h2>

<p>devrs_alloc()函数的实现，主要调用了内部函数alloc_dr(), 它会分配<font color="#ff0000">size+sizeof(struct devres)</font>的内存大小, struct devres用于存储资源节点信息，并记录release 函数。</p>

<p><img src="/blog/assets/DeviceResourceManagement/4.png" alt="4.png" /></p>

<h2 id="52-devres_add">5.2 devres_add()</h2>

<p>devres_add()主要实现把资源节点添加到设备的资源链表中。</p>

<p><img src="/blog/assets/DeviceResourceManagement/5.png" alt="5.png" width="550px" /></p>

<h2 id="53-devres_destroy">5.3 devres_destroy()</h2>

<p>devres_destroy()主要涉及到以下几个内部函数：</p>
<ul>
  <li>devres_remove()   //查找到资源节点，并从链表中删除</li>
  <li>find_dr()         //根据release函数指针、match函数查找资源节点</li>
  <li>devres_free()     //释放资源节点</li>
</ul>

<p>可以结合上面它的使用实例来学习。</p>

<p><img src="/blog/assets/DeviceResourceManagement/6.png" alt="6.png" /></p>

<h2 id="54-devers_release_all">5.4 devers_release_all()</h2>

<p>devers_release_all()的调用会释放所有资源。它的被调用时机有两个：</p>
<ul>
  <li>really_probe()失败</li>
  <li>设备与驱动分离时, deriver_dettach时 就是driver_remove时。</li>
</ul>

<p><img src="/blog/assets/DeviceResourceManagement/7.png" alt="7.png" /></p>]]></content><author><name>kevin</name></author><category term="linux" /><summary type="html"><![CDATA[1.解决的问题]]></summary></entry></feed>