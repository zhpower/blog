<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2024-03-13T10:40:48+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">学习笔记</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>kevin_zh</name></author><entry><title type="html">位运算</title><link href="http://localhost:4000/blog/jekyll/2023-04-27-bit.html" rel="alternate" type="text/html" title="位运算" /><published>2023-04-27T00:00:00+08:00</published><updated>2023-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/bit</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2023-04-27-bit.html"><![CDATA[<h3 id="1位运算概述">1.位运算概述</h3>

<p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算。</p>

<p>口说无凭，举一个简单的例子来看下 CPU 是如何进行计算的，比如这行代码：</p>

<p>int a = 35;
int b = 47;
int c = a + b;</p>

<p>计算两个数的和，因为在计算机中都是以二进制来进行运算，所以上面我们所给的 int 变量会在机器内部先转换为二进制在进行相加：</p>

<p>35:  0 0 1 0 0 0 1 1
47:  0 0 1 0 1 1 1 1
————————————————————
82:  0 1 0 1 0 0 1 0</p>

<p>所以，相比在代码中直接使用(<code class="language-plaintext highlighter-rouge">+、-、*、/ </code>)运算符，合理的运用位运算更能显著提高代码在机器上的执行效率。</p>

<h3 id="2位运算概览">2.位运算概览</h3>

<p>![[image-20230313173955848.png]]</p>

<h3 id="3按位与运算符">3.按位与运算符（&amp;）</h3>

<p>定义：参加运算的两个数据，按二进制位进行”与”运算。</p>

<h4 id="31-运算规则">3.1 运算规则：</h4>

<p><code class="language-plaintext highlighter-rouge">0&amp;0=0  0&amp;1=0  1&amp;0=0  1&amp;1=1</code></p>

<p>总结：两位同时为1，结果才为1，否则结果为0。</p>

<p>例如：3&amp;5 即 0000 0011&amp; 0000 0101 = 0000 0001，因此 3&amp;5 的值得1。</p>

<p>注意：负数按补码形式参加按位与运算。</p>

<h4 id="32-与运算的用途">3.2 与运算的用途：</h4>

<h5 id="1清零">1）清零</h5>

<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>

<h5 id="2取一个数的指定位">2）取一个数的指定位</h5>

<p>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p>

<h5 id="3判断奇偶">3）判断奇偶</h5>

<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a &amp; 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。</p>

<h3 id="4-按位或运算符">4. 按位或运算符（|）</h3>

<p>定义：参加运算的两个对象，按二进制位进行”或”运算。</p>

<h4 id="41-运算规则">4.1 运算规则：</h4>

<table>
  <tbody>
    <tr>
      <td>0</td>
      <td>0=0  0</td>
      <td>1=1  1</td>
      <td>0=1  1</td>
      <td>1=1</td>
    </tr>
  </tbody>
</table>

<p>总结：参加运算的两个对象只要有一个为1，其值为1。</p>

<table>
  <tbody>
    <tr>
      <td>例如：3</td>
      <td>5即 0000 0011</td>
      <td>0000 0101 = 0000 0111，因此，3</td>
      <td>5的值得7。　</td>
    </tr>
  </tbody>
</table>

<p>注意：负数按补码形式参加按位或运算。</p>

<h4 id="42-或运算的用途">4.2 或运算的用途：</h4>

<h5 id="1常用来对一个数据的某些位设置为1">1）常用来对一个数据的某些位设置为1</h5>

<table>
  <tbody>
    <tr>
      <td>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X</td>
      <td>Y=1010 1111）即可得到。</td>
    </tr>
  </tbody>
</table>

<h3 id="5异或运算符">5.异或运算符（^）</h3>

<p>定义：参加运算的两个数据，按二进制位进行”异或”运算。</p>

<h4 id="51-运算规则">5.1 运算规则：</h4>

<p>0^0=0  0^1=1  1^0=1  1^1=0</p>

<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</p>

<p>异或的几条性质:</p>

<ul>
  <li>1、交换律</li>
  <li>2、结合律 (a^b)^c == a^(b^c)</li>
  <li>3、对于任何数x，都有 x^x=0，x^0=x</li>
  <li>4、自反性: a^b^b=a^0=a;</li>
</ul>

<h4 id="52-异或运算的用途">5.2 异或运算的用途：</h4>

<h5 id="1翻转指定位">1）翻转指定位</h5>

<p>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p>

<h5 id="2与0相异或值不变">2）与0相异或值不变</h5>

<p>例如：1010 1110 ^ 0000 0000 = 1010 1110</p>

<h5 id="3交换两个数">3）交换两个数</h5>

<pre><code class="language-C">void Swap(int &amp;a, int &amp;b){  
    if (a != b){  
        a ^= b;  
        b ^= a;  
        a ^= b;  
    }  
}  
</code></pre>

<h3 id="6取反运算符-">6.取反运算符 (~)</h3>

<p>定义：参加运算的一个数据，按二进制进行”取反”运算。</p>

<h4 id="61-运算规则">6.1 运算规则：　</h4>

<p>~1=0
~0=1</p>

<p>总结：对一个二进制数按位取反，即将0变1，1变0。</p>

<h4 id="62-取反运算符的用途">6.2 取反运算符的用途：</h4>

<h5 id="1使一个数的最低位为零">1）使一个数的最低位为零</h5>

<p>使a的最低位为0，可以表示为：a &amp; ~1。~1的值为 1111 1111 1111 1110，再按”与”运算，最低位一定为0。因为” ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p>

<h3 id="7左移运算符">7.左移运算符（«）</h3>

<p>定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p>

<p>设 a=1010 1110，a = a« 2 将a的二进制位左移2位、右补0，即得a=1011 1000。</p>

<h5 id="71-1-左移-1位-相当于乘2">7.1 «1 左移 1位 相当于乘2</h5>
<p>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>

<h3 id="8右移运算符">8.右移运算符（»）</h3>

<p>定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p>

<p>例如：a=a»2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。</p>

<h4 id="811-右移一位相当于除2">8.1 »1 右移一位相当于除2</h4>
<p>操作数每右移一位，相当于该数除以2。</p>

<h3 id="9复合赋值运算符">9.复合赋值运算符</h3>

<p>位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是：</p>

<p>&amp;=        例：a&amp;=b    相当于     a=a&amp;b</p>

<table>
  <tbody>
    <tr>
      <td>=        例：a</td>
      <td>=b    相当于     a=a</td>
      <td>b</td>
    </tr>
  </tbody>
</table>

<p>&gt;&gt;=      例：a»=b   相当于     a=a»b</p>

<p>«=      例：a«=b     相当于      a=a« b</p>

<p>^=        例：a^=b    相当于   a=a^b</p>

<p>运算规则：和前面讲的复合赋值运算符的运算规则相似。</p>

<p>不同长度的数据进行位运算：如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。</p>

<p>以”与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行”与运算”，右端对齐后，左边不足的位依下面三种情况补足，</p>

<ul>
  <li>1）如果整型数据为正数，左边补16个0。</li>
  <li>2）如果整型数据为负数，左边补16个1。</li>
  <li>3）如果整形数据为无符号数，左边也补16个0。
如：long a=123；int b=1；计算a&amp; b。</li>
</ul>

<p>如：long a=123；int b=-1；计算a&amp; b。</p>

<p>如：long a=123；unsigned intb=1；计算a &amp; b。</p>]]></content><author><name>kevin_zh</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1.位运算概述]]></summary></entry><entry><title type="html">ffmpeg命令</title><link href="http://localhost:4000/blog/jekyll/2022-04-27-ffmpeg.html" rel="alternate" type="text/html" title="ffmpeg命令" /><published>2022-04-27T00:00:00+08:00</published><updated>2022-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/ffmpeg</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2022-04-27-ffmpeg.html"><![CDATA[<h3 id="01-视频分割">01. 视频分割</h3>
<pre><code class="language-cobol">ffmpeg -ss 00:00:00 -i input.mp4 -c copy -t 60 output.mp4
</code></pre>
<p>-ss 表示视频分割的起始时间，-t 表示分割时长，同时也可以用 00:01:00表示</p>

<p>==<em>注意</em>== ：-ss 要放在 -i 之前</p>

<h3 id="02-视频区域裁剪">02. 视频区域裁剪：</h3>
<pre><code class="language-cobol">ffmpeg -i 3.mkv -filter_complex crop=1024:50:0:550 -y 4.mkv  
</code></pre>
<h3 id="03-视频预览">03. 视频预览</h3>
<p>ffplay 3.mkv -vf crop=1024:50:0:550</p>

<h3 id="04-视频放大缩小">04. 视频放大,缩小</h3>
<pre><code class="language-cobol">ffmpeg  -i 2.mp4 -vf "scale=1280:64" 4.mp4
</code></pre>
<p>==scale== =w:h 表示放大后的大小</p>

<h3 id="05-列出所有format">05. 列出所有format</h3>
<p>// list all pix format</p>
<pre><code class="language-cobol">ffmpeg -pix_fmts 
</code></pre>
<h3 id="06-图片转换">06. 图片转换</h3>
<pre><code class="language-cobol">ffmpeg -i temp.jpg -s 1024x680 -pix_fmt yuvj420p 9.yuv
ffmpeg.exe -i agf-dog-1280x960.jpg  -vf scale=1920:1080 agf-dog-1920x1080.jpg
</code></pre>
<h3 id="07-视频format转换">07. 视频format转换</h3>

<p>YUV -&gt; RGB</p>

<pre><code class="language-cobol">ffmpeg -s 360x270 -pix_fmt yuv420p -i  2_test_360x270_50.yuv -pix_fmt rgb24  aaaa.rgb  
</code></pre>
<pre><code class="language-cobol">ffmpeg -s 640x480 -pix_fmt nv12 -i 640x480_1.jpg -vf scale=640:480,setsar=1:1 640x480_1_nv12.yuv -hide_banner  
</code></pre>
<h3 id="08-视频叠加">08. 视频叠加</h3>
<pre><code class="language-cobol"> ffmpeg -i input1 -i input2 -filter_complex overlay=x:y output
</code></pre>
<h3 id="09-视频旋转">09. 视频旋转</h3>

<p>//mp4向左旋转90度
 ffmpeg -i input.mp4 -metadata:s:v rotate=”90” -codec copy outut.mp4</p>

<p>//mp4向右旋转90度
 ffmpeg -i input.mp4 -metadata:s:v rotate=”-90” -codec copy outut.mp4</p>

<h3 id="10-视频镜像">10. 视频镜像</h3>
<p>//mp4左右镜像翻转</p>
<pre><code class="language-cobol"> ffmpeg -i input.mp4 -vf "hflip" outut.mp4
</code></pre>
<p>//mp4上下镜像翻转</p>
<pre><code class="language-cobol"> ffmpeg -i input.mp4 -vf "vflip" outut.mp4
</code></pre>

<h3 id="10-图片旋转">10. 图片旋转</h3>
<p>//图片向右旋转90度</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf rotate='90*PI/180' -y rotate60.png
</code></pre>
<p>//图片向右旋转90度</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf rotate='-90*PI/180' -y rotate_90.png
</code></pre>
<p>//图片像左旋转90度</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf transpose=2 -y transpose2.png
</code></pre>
<p>//图片像右旋转90度</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf transpose=1 -y transpose2.png
</code></pre>
<p>//逆时针(向左)旋转90°，然后垂直（上下）翻转</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf transpose=0 -y transpose0.png
</code></pre>
<h3 id="11--图片镜像">11.  图片镜像</h3>
<p>//图片左右镜像翻转</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf hflip -y hflip.png
</code></pre>
<p>//图片上下镜像翻转</p>
<pre><code class="language-cobol"> ffmpeg -i input.png -vf vflip -y vflip.png
</code></pre>
<p>//yuv数据左右镜像翻转</p>
<pre><code class="language-cobol"> ffmpeg -s 1920x1080 -pix_fmt nv12 -i nv12_1.yuv -vf hflip -y hflip_nv12.yuv
</code></pre>
<p>//播放左右翻转后的yuv数据</p>
<pre><code class="language-cobol"> ffplay -video_size 1920x1080 -pixel_format nv12 hflip_nv12.yuv
</code></pre>

<h3 id="12-音频音量调节大小">12. 音频音量调节大小</h3>
<p>//音量翻倍，写在滤镜里</p>
<pre><code class="language-cobol"> ffmpeg -i input.wav -af volume=2 -y output.wav
</code></pre>
<p>//音量翻倍，不写在滤镜中</p>
<pre><code class="language-cobol">ffmpeg -i input.wav -vol 2000 -y output.wav
</code></pre>
<h3 id="13-调节播放速度">13. 调节播放速度</h3>

<pre><code class="language-cobol">ffmpeg -i test1.mp4 -vf  "setpts=0.25*PTS" test2.mp4
</code></pre>

<p>四倍慢速：</p>

<pre><code class="language-cobol">ffmpeg -i test1.mp4 -vf  "setpts=4*PTS" test2.mp4
</code></pre>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[01. 视频分割 ffmpeg -ss 00:00:00 -i input.mp4 -c copy -t 60 output.mp4 -ss 表示视频分割的起始时间，-t 表示分割时长，同时也可以用 00:01:00表示]]></summary></entry><entry><title type="html">weston</title><link href="http://localhost:4000/blog/jekyll/2021-04-27-Weston.html" rel="alternate" type="text/html" title="weston" /><published>2021-04-27T00:00:00+08:00</published><updated>2021-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/Weston</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2021-04-27-Weston.html"><![CDATA[<h1 id="一-启动weston">一. 启动Weston</h1>

<h2 id="11-实现内容">1.1 实现内容</h2>

<ol>
  <li>解析cmdline</li>
  <li>初始化log系统</li>
  <li>创建wl_display对象，并<strong>侦听client接入</strong></li>
  <li>创建weston_compositor对象，从而创建global resource <strong>compositor</strong> 和 <strong>shm</strong>， 以前其他资源</li>
  <li><strong>load backend</strong>， 默认为drm_backend, 在drm_backend初始化的过程中会<strong>load gl_renderer</strong></li>
  <li><strong>load shell</strong>, 默认为desktop-shell.so</li>
  <li>调用wl_display_run( ) <strong>循环等待event的发生</strong></li>
</ol>

<h2 id="12-伪代码">1.2 伪代码</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">wet_main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[],</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">weston_testsuite_data</span> <span class="o">*</span><span class="n">test_data</span><span class="p">){</span>

    <span class="c1">// 初始化 layoutput_list</span>
    <span class="n">wl_list_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wet</span><span class="p">.</span><span class="n">layoutput_list</span><span class="p">);</span>
    <span class="p">...</span>
    <span class="c1">//  parse command line</span>
    <span class="p">...</span>
    <span class="c1">//  init log system</span>
    <span class="p">...</span>
    
    <span class="c1">// 调用wayland提供的函数wl_display_create()</span>
    <span class="c1">// 创建 wl_display 对象</span>
    <span class="n">display</span> <span class="o">=</span> <span class="n">wl_display_create</span><span class="p">();</span>
    <span class="p">...</span>
    
    <span class="c1">// 创建 weston_compositor 对象  </span>
    <span class="c1">// --&gt; 创建 global resource compositor and shm 以及其他resource</span>
    <span class="n">weston_compositor_create</span><span class="p">(</span> <span class="p">);</span>    
    <span class="c1">// 读取config for compositor</span>
    <span class="p">...</span>
    
    <span class="c1">// load backend，通用的为load_drm_backend( )</span>
    <span class="c1">// 最终调用 对应backend实现的weston_backend_init( )</span>
    <span class="c1">// 在backend 初始化的过程中会装载 gl_renderer</span>
    <span class="n">load_backend</span><span class="p">(</span><span class="n">compositor</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
    <span class="p">...</span>
    
    <span class="c1">// 创建socket， 侦听client的连接请求</span>
    <span class="n">weston_create_listening_socket</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">socket_name</span><span class="p">)</span>
    <span class="p">...</span>
    <span class="c1">// load shell, 默认为 desktop-shell.so</span>
    <span class="n">wet_load_shell</span><span class="p">(</span><span class="n">compositor</span><span class="p">,</span> <span class="n">shell</span><span class="p">,</span> <span class="p">...)</span>
    <span class="p">...</span>
    <span class="c1">// loop, 循环等待event的发生</span>
    <span class="n">wl_display_run</span><span class="p">(</span><span class="n">display</span><span class="p">)</span>
    <span class="p">...</span>
    <span class="c1">// 退出流程，资源的释放</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="13-backend-renderer-shell的作用">1.3 backend, renderer, shell的作用</h2>

<p>结构图</p>

<p><img src="/blog/assets/wayland/image-20230209140244854.png" alt="image" /></p>

<p>backend</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
 <span class="n">destroy</span><span class="p">()</span>
 <span class="n">repaint_begin</span><span class="p">()</span>   <span class="c1">//composite之前调用</span>
 <span class="n">repaint_cancel</span><span class="p">()</span>  <span class="c1">// 中途取消</span>
 <span class="n">repaint_flush</span><span class="p">()</span>   <span class="c1">// composite 完成后调用， 可用于实现提交到display</span>
 <span class="n">create_output</span><span class="p">()</span>   <span class="c1">// 创建weston_output</span>
 <span class="n">device_changed</span><span class="p">()</span>
 <span class="n">can_scanout_dmabuf</span><span class="p">()</span>
<span class="p">}</span><span class="n">Weston_backend</span><span class="p">,</span> <span class="n">Compositor</span><span class="o">-&gt;</span><span class="n">backend</span>

</code></pre></div></div>

<p>renderer: 
renderer接口供backend内部使用，外部通过调用backend接口触发</p>
<pre><code class="language-C">{
   display_create()
   output_window_create()
   output_pbuffer_create()
   output_destroy()
   output_set_border()
   create_fence_fd()
} gl_renderer_interface
</code></pre>

<h1 id="二-client-动作">二. Client 动作</h1>

<h2 id="21-client的接入和global资源代理的创建">2.1 Client的接入和global资源代理的创建</h2>

<h3 id="流程">流程</h3>
<ol>
  <li>连接display</li>
  <li>获得registry，注册listener，用于处理weston资源变化时的callback</li>
  <li>根据资源变化的callback， 创建各类资源的proxy</li>
  <li>进入loop，不断调用wl_display_dispatch( )，使得wayland内部循环处理各类event</li>
</ol>

<h3 id="伪代码">伪代码</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">void</span> <span class="nf">global_resource_found</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">,</span> <span class="k">struct</span> <span class="n">wl_registry</span><span class="o">*</span> <span class="n">registry</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">interface</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">version</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 通过字符串interface 判断是什么resource，</span>
    <span class="c1">// 通过wl_registry_bind() 创建对应的 resource proxy</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">interface</span><span class="p">,</span> <span class="s">"wl_compositor"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 构建了 compositor 的 proxy    </span>
        <span class="n">compositor</span> <span class="o">=</span> <span class="n">wl_registry_bind</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wl_compositor_interface</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
        
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">interface</span><span class="p">,</span> <span class="s">"wl_shm"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 构建了 shm 的proxy</span>
        <span class="n">shm</span> <span class="o">=</span> <span class="n">wl_registry_bind</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wl_shm_interface</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="p">...</span>

<span class="p">}</span>

<span class="c1">// 当weston的global resoure发生变化时，通过如下回调函数通知到client</span>
<span class="n">wl_registry_listener</span> <span class="n">registry_listener</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// 发现新global resource的回调函数</span>
    <span class="n">global_resource_found</span><span class="p">,</span>
    <span class="c1">// global resource remove的回调函数</span>
    <span class="n">global_resource_remove</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1. 调用wayland提供的 wl_display_connect( ), 连接到weston( wayland server)</span>
    <span class="c1">//    对应到weston启动中的weston_create_listening_socket()</span>
    <span class="n">display</span> <span class="o">=</span> <span class="n">wl_display_connect</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="p">...</span>
    
    <span class="c1">// 2. 获取 wl_registry, 并侦听它的callback</span>
    <span class="n">registry</span><span class="o">=</span> <span class="n">wl_display_get_registry</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
    <span class="n">wl_registry_add_listener</span><span class="p">(</span><span class="n">registry</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">registry_listener</span><span class="p">,</span> <span class="n">display</span><span class="p">);</span>
    <span class="p">...</span>
    
    <span class="c1">// 3. 循环等待，</span>
    <span class="c1">//    调用wl_display_dispatch( )，由wayland处理weston发来的event</span>
    <span class="k">while</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">wl_display_dispatch</span><span class="p">(</span> <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="22-内部weston---client-通讯机制">2.2 内部weston - client 通讯机制</h2>

<p><mark>request</mark>:  Client –&gt; Server</p>

<p><mark>event</mark>  :  Server –&gt; Client</p>

<p>术语上，Wayland 中把 Client 发给 Server 的跨进程函数调用称为 request，反方向的跨进程函数调用称为 event。 本质上，它们处理的方式是类似的。</p>

<p>要让两个进程通过 socket 进行函数调用，首先需要将调用抽象成数据流的形式。这个数据流应该包含函数名、参数等信息。</p>

<p>RPC 函数的接口定义是应该同时包含在 Client 和 Server 端的库中的，其中包含了接口对象所支持的 request 和 event 的函数签名。因此这部分不用传输，只要传输目标<strong>对象 id</strong>，<strong>方法 id</strong> 和<strong>参数列表</strong>这些信息就可以了。</p>

<p>这些信息会通过 wl_closure_marshal()写入 wl_closure 结构，再由 serialize_closure()变成数据流。</p>

<p>等到了目标进程后， 会从数据流通过 wl_connection_demarshal()转回 wl_closure。</p>

<h4 id="rpc-图示">RPC 图示</h4>
<p><img src="/blog/assets/wayland/image-20230210145327279.png" alt="image-20230210145327279.png" /></p>

<h4 id="object-rpc-机制">object RPC 机制</h4>

<p>这个过程类似于 Android 中的 Parcel 机制。那么 问题来了，参数中的整形，字符串什么的都好搞，拷贝就行。但如果参数中包含对象，我们不能把整个对象 拷贝过去，也不能传引用过去。那么需要一种机制来作<strong>同一对象在 Server 和 Client 端的映射</strong>，这是通过 wl_map 实现的。</p>

<p>wl_map 在 Client 和 Server 端各有一个，它们分别存了 wl_proxy 和 wl_resource 的数组，且是 一一对应的。这些对象在这个数组中的索引作为它们的 id。这样，参数中的对象只要传 id，这个 id 被传到目 的地后会通过查找这个 wl_map 表来得到本地相应的对象。在功能上类似于 Android 中的 BpXXX 和 BnXXX。</p>

<p>wl_proxy 和 wl_resource 都包含 wl_object 对象。这个 wl_object 和面向对象语言里的对象概念类似，它有 interface 成员描述了这个对象所实现的接口，implementation 是这些接口的实现函数的函数指针数组，id 就是 在 wl_map 结构里数组中的索引。</p>

<p>前面所说的 Client 绑定 Server 端资源的过程就是在 Client 端创建 wl_proxy， 在 Server 端创建 wl_resource。然后 Client 就可以通过 wl_proxy 调用 Server 端对应 wl_resource 的 request， Server 端就可以通过 wl_resource 调用 Client 端对应 wl_proxy 的 event。</p>

<p>这个映射过程如下图所示(以 wl_registry 为例)</p>

<p><img src="/blog/assets/wayland/20141019204223671.png" alt="image" /></p>

<h3 id="23-client-创建各类资源proxy">2.3 Client 创建各类资源proxy</h3>

<h4 id="主要资源proxy">主要资源proxy</h4>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// wl_surface</span>
<span class="n">wl_surface</span> <span class="o">=</span> <span class="n">wl_compositor_create_surface</span><span class="p">(</span><span class="n">compositor</span><span class="p">)</span>

<span class="c1">// wl_buffer</span>
<span class="n">wl_shm_pool</span> <span class="o">=</span> <span class="n">wl_shm_create_pool</span><span class="p">(</span> <span class="p">)</span>
<span class="n">wl_buffer</span> <span class="o">=</span> <span class="n">wl_shm_pool_create_buffer</span><span class="p">(</span> <span class="p">)</span>

<span class="c1">// attach buffer to surface</span>
<span class="n">wl_surface_attach</span><span class="p">(</span><span class="n">wl_surface</span><span class="p">,</span> <span class="n">wl_buffer</span><span class="p">)</span>

<span class="cm">/* 以下与窗口的管理\显示相关 */</span>

<span class="c1">// xdg_surface</span>
<span class="c1">// xdg_wm_base 它也是一个global resouce，对应到 desktop-shell</span>
<span class="n">xdg_surface</span> <span class="o">=</span> <span class="n">xdg_wm_base_get_xdg_surface</span><span class="p">(</span><span class="n">xdg_wm_base</span><span class="p">,</span> <span class="n">wl_surface</span><span class="p">)</span>

<span class="c1">// xdg_toplevel</span>
<span class="n">xdg_toplevel</span> <span class="o">=</span> <span class="n">xdg_surface_get_toplevel</span><span class="p">(</span><span class="n">xdg_toplevel</span><span class="p">)</span>

<span class="c1">// wl_keyboard</span>
<span class="c1">// wl_seat 是一个global resource</span>
<span class="c1">// 通过wl_keyboard 创建一个listener就可接收按键</span>
<span class="n">wl_keyboard</span> <span class="o">=</span> <span class="n">wl_seat_get_keyboard</span><span class="p">(</span><span class="n">wl_seat</span><span class="p">)</span>
<span class="n">wl_keyboard_add_listener</span><span class="p">(</span><span class="n">wl_keyboard</span><span class="p">,</span> <span class="n">keyboard_listener</span><span class="p">)</span>

<span class="c1">// wl_pointer 鼠标指针</span>
<span class="c1">// 通过wl_pointer 创建一个listener可以接收鼠标的移动信息</span>
<span class="n">wl_pointre</span> <span class="o">=</span> <span class="n">wl_seat_get_pointer</span><span class="p">(</span><span class="n">wl_weat</span><span class="p">)</span>
<span class="n">wl_pointer_add_listener</span><span class="err">（</span><span class="n">wl_pointer</span><span class="p">,</span> <span class="n">pointer_listener</span><span class="p">)</span>

<span class="p">...</span> <span class="p">...</span>

</code></pre></div></div>

<h3 id="24-client-渲染">2.4 Client 渲染</h3>

<h4 id="伪代码-1">伪代码</h4>
<p>simple-egl.c</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*-------------------- egl 初始化工作 ------------------------*/</span>

<span class="c1">// egl lib 应该要支持wayland。</span>
<span class="c1">// 这样在调用一些egl接口时，在其内部会调用wayland接口与Wayland server交换信息</span>
<span class="c1">// 如函数：eglGetDisplay( ) , eglCreateWindowSurface( )， eglSwapBuffers 等</span>

<span class="c1">// 1. 获取egl_display</span>
<span class="n">egl_display</span> <span class="o">=</span> <span class="n">weston_platform_get_egl_display</span><span class="p">(</span><span class="n">EGL_PLATFORM_WAYLAND_KHR</span><span class="p">,</span> <span class="n">wl_display</span><span class="p">,</span> <span class="p">...)</span>
<span class="n">or</span>
<span class="n">egl_display</span> <span class="o">=</span> <span class="n">eglGetDisplay</span><span class="p">(</span><span class="n">wl_display</span><span class="p">)</span>

<span class="c1">// 2. 初始化 egl</span>
<span class="n">eglInitialize</span><span class="p">(</span><span class="n">egl_display</span><span class="p">)</span>

<span class="c1">// 3. 通用elg 配置</span>
<span class="n">eglGetConfigs</span><span class="p">()</span>
<span class="n">eglChooseConfig</span><span class="p">(</span> <span class="p">)</span>
<span class="n">eglCreateContext</span><span class="p">(</span> <span class="p">)</span>


<span class="cm">/* ----------------------gl 准备工作------------------------------*/</span>

<span class="c1">// 1.创建 shader</span>
<span class="n">glCreateShader</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 2.创建 Program</span>
<span class="n">glCreateProgram</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 3. attach shader to program</span>
<span class="n">glAttachShader</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 4. Link program</span>
<span class="n">glLinkProgram</span><span class="p">(</span> <span class="p">)</span>
<span class="c1">// 5. 使用program</span>
<span class="n">glUseProgram</span><span class="p">(</span> <span class="p">)</span>

<span class="cm">/*-------------------------wl_surface 关联egl_surface----------------*/</span>
<span class="n">wl_egl_window</span><span class="o">-&gt;</span><span class="n">surface</span> <span class="o">=</span> <span class="n">wl_surface</span><span class="p">;</span>
<span class="n">wl_egl_window</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
<span class="n">wl_egl_window</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span><span class="p">;</span>
<span class="n">eglCreateWindowSurface</span><span class="p">(</span><span class="n">egl_display</span><span class="p">,</span> <span class="p">...</span> <span class="p">,</span> <span class="n">wl_egl_window</span><span class="p">)</span>

<span class="cm">/*------------------------------------------------------------------*/</span>
<span class="n">gl</span> <span class="err">绘制图形</span>
<span class="cm">/*-------------------------------------------------------------------*/</span>

<span class="c1">// 内部实现应该调用wayland接口来swap buffer</span>
<span class="n">eglSwapBuffers</span><span class="p">(</span><span class="n">egl_display</span><span class="p">,</span> <span class="n">egl_surface</span><span class="p">)</span>
<span class="p">...</span>
</code></pre></div></div>

<h3 id="25-client-提交渲染好的surface">2.5. Client 提交渲染好的surface</h3>

<h4 id="提交函数">提交函数</h4>
<p>wl_surface_commit( )</p>

<h1 id="三-weston-合成各个app的surface并呈现">三. Weston 合成各个App的surface并呈现</h1>

<h2 id="流程-1">流程</h2>
<ol>
  <li>compositor遍历每个weston_output 发起repaint。weston_output_schedule_repaint( )</li>
  <li>通知weston_output具体实现–backend_output, 开始repaint的前期准备工作, 对应函数start_repaint_loop( )， drm实现暂无内容</li>
  <li>backend_output通知compositor可以开始output repaint</li>
  <li>compositor 调用weston_output相关backend的repaint_begin( )，drm_backend 创建了pending_state</li>
  <li>compoistor 调用weston_output_repaint(), 开始repaint。
 调用weston_compositor_build_view_list( ) 构建view_list, 得到output的一个paint_node_z_order_list</li>
  <li>调用drm_backend  assign_planes( ) 设置输出plane</li>
  <li>调用drm_backend  drm_output_repaint( ), 最终指向gl_renderer_repaint_output( )</li>
  <li>依据paint_node_z_order_list, OpenGL依次建立shader，texture等进行渲染</li>
  <li>全部完成后，提交呈现</li>
</ol>

<pre><code class="language-mermaid">sequenceDiagram
participant C as Compositor
participant O as Weston_output
participant B as Backend

loop 遍历weston_output_list
    C -&gt;&gt; O: 要开始repaint_loop &lt;br /&gt;call backend_output start_repaint_loop( )    
    C -&gt;&gt; B: repaint_begin( )
    Note right of B: 创建 pending_state
    C -&gt;&gt; O: 通知output repaint
    O -&gt;&gt; C: 构建view_list, build_view_list( )
    Note left of C:构建paint_node_z_order_list

    C -&gt;&gt; B: assign_planes( ),设置输出plane
    C -&gt;&gt; B: drm_output_repaint( )
    Note right of B: 调用OpenGL API &lt;br/&gt;结合paint_node_z_order_list&lt;br/&gt;进行渲染
end
</code></pre>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[一. 启动Weston]]></summary></entry><entry><title type="html">设备资源管理模块</title><link href="http://localhost:4000/blog/linux/2018-08-01-DeviceResourceManage.html" rel="alternate" type="text/html" title="设备资源管理模块" /><published>2018-08-01T00:00:00+08:00</published><updated>2018-08-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/linux/DeviceResourceManage</id><content type="html" xml:base="http://localhost:4000/blog/linux/2018-08-01-DeviceResourceManage.html"><![CDATA[<h1 id="1解决的问题">1.解决的问题</h1>

<p>相信每一个写过Linux driver的工程师，都在probe函数中遇到过上面的困惑：在顺序申请多种资源（IRQ、Clock、memory、regions、ioremap、dma、等等）的过程中，只要任意一种资源申请失败，就要回滚释放之前申请的所有资源。 于是在函数的最后，就一定会出现很多的goto标签，用于释放不同的资源（如上面的exit_free_irq、exit_free_dma、等等）。 在申请资源出错时，小心翼翼的goto到正确的标签上，以便释放已申请资源。</p>

<p>这样在代码中，整个函数被大段的、重复的如下代码充斥。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">condition</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="n">err</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span> 
    <span class="k">goto</span> <span class="n">xxx</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>
<p>既浪费精力容易出错，也不美观。 有困惑，就有改善的办法。 方法就是Linux设备模型中的device resource management（设备资源管理）。</p>

<h1 id="2解决的思路">2.解决的思路</h1>

<p>devres提供了一种机制，<font style="background:#8EE5EE">用资源节点的形式记录它申请的资源，并在系统中为设备分配一个链表，当申请某个资源时，就构建一个资源节点，然后把它加入到这个链表中，对应的释放函数也会被记录，以便在driver detach的时候，自动释放。</font></p>

<p>为了使用devres机制，资源要对各自的资源分配函数重新封装，加入资源节点的申请、添加和释放，一般新函数名改成了<font color="#ff0000">devm_xxx()</font>的形式。driver作者只管调用这些devm_xxx()接口来申请资源，不用考虑释放，设备模型会在适当的时候释放它们。</p>

<p>device resource management位于“drivers/base/devres.c”中，它实现了上述机制。
<img src="/blog/assets/DeviceResourceManagement/1.png" alt="1.png" /></p>

<h1 id="3提供的接口">3.提供的接口</h1>

<p>以下是devres提供的几个基本接口</p>

<table>
  <thead>
    <tr>
      <th>interface</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>devres_alloc( )</td>
      <td>// 分配资源节点</td>
    </tr>
    <tr>
      <td>devres_free( )</td>
      <td>// 释放资源节点</td>
    </tr>
    <tr>
      <td>devres_add( )</td>
      <td>// 添加资源节点到链表</td>
    </tr>
    <tr>
      <td>devres_destroy( )</td>
      <td>// 释放资源</td>
    </tr>
    <tr>
      <td>devres_release_all()</td>
      <td>//释放所有资源</td>
    </tr>
  </tbody>
</table>

<h1 id="4接口的使用">4.接口的使用</h1>

<p>其他资源模块，可以通过调用devres提供的接口，利用devres机制实现资源的自动释放。</p>

<h2 id="41-资源节点函数的应用举例">4.1 资源节点函数的应用举例</h2>

<p>下面的代码是利用devres机制实现分配中断资源函数 devm_request_threaded_irq( ), 上层模块可以调用它来分配中断资源，在出错时，不必考虑对该资源的释放，系统会自动释放。</p>

<p>主要涉及到devres_alloc()、devres_free()和devres_add()</p>

<p><img src="/blog/assets/DeviceResourceManagement/2.png" alt="2.png" /></p>

<h2 id="42-资源释放函数的应用举例">4.2 资源释放函数的应用举例</h2>

<p>资源释放函数devres_destroy()的使用举例，资源模块可以用它来封装资源释放函数。</p>

<p><img src="/blog/assets/DeviceResourceManagement/3.png" alt="3.png" width="500px" /></p>

<h1 id="5-函数的内部实现">5. 函数的内部实现</h1>

<h2 id="51-devres_alloc">5.1 devres_alloc()</h2>

<p>devrs_alloc()函数的实现，主要调用了内部函数alloc_dr(), 它会分配<font color="#ff0000">size+sizeof(struct devres)</font>的内存大小, struct devres用于存储资源节点信息，并记录release 函数。</p>

<p><img src="/blog/assets/DeviceResourceManagement/4.png" alt="4.png" /></p>

<h2 id="52-devres_add">5.2 devres_add()</h2>

<p>devres_add()主要实现把资源节点添加到设备的资源链表中。</p>

<p><img src="/blog/assets/DeviceResourceManagement/5.png" alt="5.png" width="550px" /></p>

<h2 id="53-devres_destroy">5.3 devres_destroy()</h2>

<p>devres_destroy()主要涉及到以下几个内部函数：</p>
<ul>
  <li>devres_remove()   //查找到资源节点，并从链表中删除</li>
  <li>find_dr()         //根据release函数指针、match函数查找资源节点</li>
  <li>devres_free()     //释放资源节点</li>
</ul>

<p>可以结合上面它的使用实例来学习。</p>

<p><img src="/blog/assets/DeviceResourceManagement/6.png" alt="6.png" /></p>

<h2 id="54-devers_release_all">5.4 devers_release_all()</h2>

<p>devers_release_all()的调用会释放所有资源。它的被调用时机有两个：</p>
<ul>
  <li>really_probe()失败</li>
  <li>设备与驱动分离时, deriver_dettach时 就是driver_remove时。</li>
</ul>

<p><img src="/blog/assets/DeviceResourceManagement/7.png" alt="7.png" /></p>]]></content><author><name>kevin</name></author><category term="linux" /><summary type="html"><![CDATA[1.解决的问题]]></summary></entry><entry><title type="html">only test</title><link href="http://localhost:4000/blog/jekyll/2018-04-27-test.html" rel="alternate" type="text/html" title="only test" /><published>2018-04-27T00:00:00+08:00</published><updated>2018-04-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/test</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2018-04-27-test.html"><![CDATA[<p>only for test new txt</p>

<p>123
dsf</p>

<pre><code class="language-mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</code></pre>

<table>
  <thead>
    <tr>
      <th>Syntax</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Header</td>
      <td>Title</td>
    </tr>
    <tr>
      <td>Paragraph</td>
      <td>Text</td>
    </tr>
  </tbody>
</table>

<p><a href="/blog/assets/abc.md" title=":include">test_abc</a></p>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[only for test new txt]]></summary></entry><entry><title type="html">YUV 资料</title><link href="http://localhost:4000/blog/jekyll/2018-03-21-YUV.html" rel="alternate" type="text/html" title="YUV 资料" /><published>2018-03-21T00:00:00+08:00</published><updated>2018-03-21T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/YUV</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2018-03-21-YUV.html"><![CDATA[<h1 id="1简介">1.简介</h1>

<p>YUV数据由Y、U、V三个分量组成，现在通常说的YUV指的是YCbCr。</p>

<p>Y：表示<strong>亮度</strong>（Luminance、Luma），占8bit（1字节）</p>

<p>Cb、Cr：表示<strong>色度</strong>（Chrominance、Chroma）</p>

<p>Cb（U）：蓝色色度分量，占8bit（1字节）</p>

<p>Cr（V）：红色色度分量，占8bit（1字节）</p>

<h1 id="2采样方式444-422-420的区别">2.采样方式(444, 422, 420的区别)</h1>
<p>把Y、U、V数据转变为R、G、B时用到</p>

<h2 id="21-采样方式">2.1 采样方式</h2>
<p>采样方式通常用A:B:C的形式来表示，比如4:4:4、4:2:2、4:2:0等</p>
<ul>
  <li>
    <p>A：假定在一块A*2个像素的概念区域，一般都是4.</p>
  </li>
  <li>
    <p>B：第1行的色度(UV)采样数目。</p>
  </li>
  <li>
    <p>C：第2行的色度(UV)采样数目</p>
  </li>
</ul>

<p>所以这里的B,C指的分别是在第一行，第二行UV采样的数目。 C的值一般要么等于B，要么等于0</p>

<p>示意图1：
<img src="/blog/assets/YUV/sampling.png" alt="sampling" /></p>

<p>示意图2</p>

<p><img src="/blog/assets/YUV/sampling_2.jpg" alt="sampling_2" /></p>

<p>上图中，不管是哪种采样格式，Y分量都是全水平、全垂直分辨率采样的，每一个像素都有自己独立的Y分量</p>

<h2 id="22-占用字节数">2.2 占用字节数</h2>

<p>由上可以推算出不同采样方式下每个像素需要的平均字节数。</p>

<p>4:4:4 
一个像素YUV各占一个字节，总共3个字节 24bit</p>

<p>4:2:2
8个像素 ： 8个Y + 2个U +2个V +2个U +2个V = 16字节 
每个像素：16字节/8 = 2个字节 16bit</p>

<p>4:2:0
8个像素 ： 8个Y + 2个U +2个V  = 12字节 
每个像素：12字节/8 = 1.5个字节 12bit</p>

<h1 id="3-存储方式planar-semi-planar和packed的区别">3. 存储方式(Planar, Semi-Planar和Packed的区别)</h1>

<p>存储格式，表示的是Y、U、V数据是如何排列和存储的。 读取或写入Y、U、V数据时用到.</p>

<h2 id="31-分类">3.1 分类</h2>
<p>YUV的存储格式可以分为3大类：</p>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>特点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Planar(平面)</td>
      <td>Y、U、V分量分开单独存储,名称通常以字母p结尾,  3个planar</td>
    </tr>
    <tr>
      <td>Semi-Planar（半平面）</td>
      <td>Y分量单独存储，U、V分量交错存储, 名称通常以字母sp结尾, 1个planar</td>
    </tr>
    <tr>
      <td>Packed（紧凑）</td>
      <td>或者叫Interleaved(交错), Y、U、V分量交错存储,  1个planar</td>
    </tr>
  </tbody>
</table>

<h2 id="32-444">3.2 444</h2>

<p><img src="/blog/assets/YUV/444.png" alt="" width="540px" height="150px" /></p>

<p>I444 和YV24 主要是UV次序的不同</p>

<p><img src="/blog/assets/YUV/I444.png" alt="" width="540px" height="200px" /></p>

<p>semi-planar NV24 和NV42 主要是UV交替次序的不同</p>

<p><img src="/blog/assets/YUV/NV24.png" alt="" width="540px" height="200px" /></p>

<h2 id="33-422">3.3 422</h2>

<p><img src="/blog/assets/YUV/422.png" alt="" width="540px" height="150px" /></p>

<p><strong>Planar I422 YV16 区别：VU 次序</strong></p>

<p><img src="/blog/assets/YUV/YV16.png" alt="" width="540px" height="200px" /></p>

<p><strong>Semi-Planar NV16 NV61 区别：VU 次序</strong></p>

<p><img src="/blog/assets/YUV/NV16.png" alt="" width="540px" height="200px" /></p>

<p><strong>Packed UYVY YUYV YVYU 区别：VU 次序</strong></p>

<p><img src="/blog/assets/YUV/YUYV.png" alt="" width="540px" height="200px" /></p>

<h2 id="34-420">3.4 420</h2>

<p><img src="/blog/assets/YUV/420.png" alt="" width="540px" height="150px" /></p>

<p><strong>Planar I420 YV12</strong></p>

<p><img src="/blog/assets/YUV/I420.png" alt="" width="540px" height="200px" /></p>

<p><strong>采样方式420 I420，像素示意图</strong></p>

<p><img src="/blog/assets/YUV/I420_pixel.png" alt="" width="540px" height="200px" /></p>

<p><strong>Semi-Planar NV12 NV21</strong></p>

<p><img src="/blog/assets/YUV/NV12.png" alt="" width="540px" height="200px" /></p>

<p><strong>采样方式420，各种存储方式， 像素示意图</strong></p>

<p><img src="/blog/assets/YUV/420_pixel.png" alt="" width="540px" height="350px" /></p>

<h1 id="4-借助ffmpeg格式转换">4. 借助ffmpeg格式转换</h1>

<ol>
  <li>PNG -&gt; YUV
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-i</span> <span class="k">in</span>.png <span class="nt">-s</span> 512x512 <span class="nt">-pix_fmt</span> yuv420p out.yuv
</code></pre></div>    </div>
  </li>
  <li>YUV -&gt; PNG
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ffmpeg <span class="nt">-s</span> 512x512 <span class="nt">-pix_fmt</span> yuv420p <span class="nt">-i</span> <span class="k">in</span>.yuv out.jpg
</code></pre></div>    </div>
  </li>
</ol>

<p><strong>YUV 文件只是存储数据的文件，没有大小信息，所以转换时一定要给出它的尺寸</strong></p>

<p><strong>PNG 文件含有尺寸信息，所以转YUV时可以不指定大小，默认原大小</strong></p>

<h1 id="5-借助ffplay显示yuv">5. 借助ffplay显示YUV</h1>

<p>可以通过ffplay显示YUV数据。</p>

<ul>
  <li>
    <p>YUV中直接存储的是所有像素的颜色信息（可以理解为是图像的一种原始数据）</p>
  </li>
  <li>
    <p>必须得设置YUV的尺寸（-s）、像素格式（-pix_fmt）才能正常显示</p>
  </li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffplay <span class="nt">-s</span> 512x512 <span class="nt">-pix_fmt</span> yuv420p <span class="k">in</span>.yuv
<span class="c"># 在ffplay中</span>
<span class="c"># -s已经过期，建议改为：-video_size</span>
<span class="c"># -pix_fmt已经过期，建议改为：-pixel_format</span>
ffplay <span class="nt">-video_size</span> 512x512 <span class="nt">-pixel_format</span> yuv420p <span class="k">in</span>.yuv
</code></pre></div></div>]]></content><author><name>Kevin</name></author><category term="Jekyll" /><summary type="html"><![CDATA[1.简介]]></summary></entry><entry><title type="html">硬中断</title><link href="http://localhost:4000/blog/jekyll/2018-02-27-interrupte.html" rel="alternate" type="text/html" title="硬中断" /><published>2018-02-27T00:00:00+08:00</published><updated>2018-02-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/jekyll/interrupte</id><content type="html" xml:base="http://localhost:4000/blog/jekyll/2018-02-27-interrupte.html"><![CDATA[<p>【转帖】</p>

<p>本来想写内核如何接收一个网络包这个过程，但发现把整个过程捋顺了，还是很难的。</p>

<p>推导整个过程的起点是<strong>中断</strong>，包括<strong>硬中断</strong>和<strong>软中断</strong>。</p>

<p>而这个过程要是讲清楚吧，感觉在整个网络包接收原理的大流程中有点喧宾夺主。但要是一笔带过吧，那对于这块有困惑的人就很难受，一切的起点没整明白在心里总是个疙瘩。所以，单拎出来一个主题中断，给大家把这个问题搞明白了。</p>

<p>另外，<strong>整个操作系统就是一个中断驱动的死循环</strong>，操作系统原理如果用一行代码解释，下面这样再合适不过了。</p>

<pre><code class="language-C">while(true) {
	doNothing();
}
</code></pre>

<p><strong>其他所有事情都是由操作系统提前注册的中断机制和其对应的中断处理函数完成</strong>，我们点击一下鼠标，敲击一下键盘，执行一个程序，都是用中断的方式来通知操作系统帮我们处理这些事件，当没有任何需要操作系统处理的事件时，它就乖乖停在死循环里不出来。</p>

<p>所以，中断，非常重要，它也是理解整个操作系统的根基，掌握它，不亏！</p>

<p>那我们开始吧。</p>

<p><strong>五花八门的中断分类</strong></p>

<p>关于中断的分类，教科书上和网上有很多”标准”答案了，如果你用搜索引擎去寻找答案，可能会找出很多不一样的分类结果。</p>

<p>所以我打算直接在 Intel 手册上找个最官方的标准答案。</p>

<p>在 <em>Intel 手册 Volume 1 Chapter 6.4 Interrupts and Exception</em> 给出。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXRaebHKiaWevE73umedjHIDmQ3eQXdDdbee9wMwIwic5eNK9N2Erm01239eKbz1hl6ZWLSo3BRf6UBg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>

<p>翻译过来就是，<strong>中断可以分为中断和异常，异常又可以分为故障、陷阱、中止</strong>。</p>

<p>第一句话有点奇怪，啥叫中断分为中断和异常呢？你看好多文章的时候也是这么写的，不知道你有没有曾疑惑过。</p>

<p>但其实原文的意思准确说是，<strong>CPU 提供了两种中断程序执行的机制，中断和异常</strong>。第一个中断是个动词，第二个中断才是真正的机制种类。</p>

<p>好吧，我感觉原文也挺奇怪的，但人家就这么叫，没辙。</p>

<p>接下来我只需要翻译一下就好了，再夹杂点自己的解读。</p>

<p>An interrupt is an asynchronous event that is typically triggered by an I/O device.</p>

<p>先说第一个机制中断（interrupt），<strong>中断是一个异步事件，通常由 IO 设备触发</strong>。比如点击一下鼠标、敲击一下键盘等。</p>

<p>An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction.</p>

<p>再说第二个机制异常（exception），<strong>异常是一个同步事件，是 CPU 在执行指令时检测到的反常条件</strong>。比如除法异常、错误指令异常，缺页异常等。</p>

<p>这两个机制，殊途同归，<strong>都是让 CPU 收到一个中断号</strong>，至于 CPU 收到这个中断号之后干嘛，我们暂且不管。</p>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/GLeh42uInXRaebHKiaWevE73umedjHIDmq0gPkgWwLqjwEibZabXqibsCoCtG03GLQzxIvXh7UK3WYHYNHYWluPNQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" /></p>

<p>我们先看看收到中断号之前，具体就是中断和异常到底是怎么做到给 CPU 一个中断号的。</p>

<p>先说中断，别眨眼。</p>

<p>有一个设备叫做<strong>可编程中断控制器</strong>，它有很多的 <strong>IRQ</strong> 引脚线，接入了一堆能发出中断请求的硬件设备，当这些硬件设备给 IRQ 引脚线发一个信号时，由于可编程中断控制器提前被设置好了 IRQ 与中断号的对应关系，所以就转化成了对应的中断号，把这个中断号存储在自己的一个端口上，然后给 CPU 的 <strong>INTR</strong> 引脚发送一个信号，CPU 收到 INTR 引脚信号后去刚刚的那个端口读取到这个中断号的值。</p>

<p>估计你被绕晕了，但读我的文章有个好处，太复杂就上动图，来吧。
![[image-20230320094930185.png]]</p>

<p>你看，<strong>最终的目标，就是让 CPU 知道，有中断了，并且也知道中断号是多少</strong>。</p>

<p>比如上图中按下了键盘，最终到 CPU 那里的反应就是，得到了一个中断号 <strong>0x21</strong>。</p>

<p>那异常的机制就更简单了，是 CPU 自己执行指令时检测到的一些反常情况，然后自己给自己一个中断号即可，无需外界给。</p>

<p>比如 CPU 执行到了一个无效的指令，则自己给自己一个中断号 <strong>0x06</strong>，这个中断号是 Intel 的 CPU 提前就规定好写死了的硬布线逻辑。</p>

<p>好了，到目前为止，我们知道了无论是<strong>中断</strong>还是<strong>异常</strong>，最终都是通过各种方式，让 CPU 得到一个中断号。只不过中断是通过外部设备给 CPU 的 INTR 引脚发信号，异常是 CPU 自己执行指令的时候发现特殊情况触发的，自己给自己一个中断号。</p>

<p>还有一种方式可以给到 CPU 一个中断号，但 Intel 手册写在了后面，<em>Chapter 6.4.4 INT n</em>，就是大名鼎鼎的 <strong>INT 指令</strong>。
![[image-20230320095004648.png]]</p>

<p>INT 指令后面跟一个数字，就相当于直接用指令的形式，告诉 CPU 一个中断号。</p>

<p>比如 <strong>INT 0x80</strong>，就是告诉 CPU 中断号是 <strong>0x80</strong>。Linux 内核提供的<strong>系统调用</strong>，就是用了 INT 0x80 这种指令。</p>

<p>那我们上面的图又丰富了起来。
![[image-20230320095040034.png]]</p>

<p>有的地方喜欢把他们做一些区分，把 INT n 这种方式叫做<strong>软件中断</strong>，因为他是由软件程序主动触发的。相应的把上面的中断和异常叫做<strong>硬件中断</strong>，因为他们都是硬件自动触发的。</p>

<p>但我觉得大可不必，一共就这么几个分类，干嘛还要增加一层理解的成本呢，记三个方式不好么？</p>

<p>好了，总结一下，给 CPU 一个中断号有三种方式，而这也是中断分类的依据。</p>

<p><em><strong>1.</strong></em> <strong>通过中断控制器给 CPU 的 INTR 引脚发送信号</strong>，并且允许 CPU 从中断控制器的一个端口上读取中断号，比如按下键盘的一个按键，最终会给到 CPU 一个 0x21 中断号。</p>

<p><em><strong>2.</strong></em> <strong>CPU 执行某条指令发现了异常</strong>，会自己触发并给自己一个中断号，比如执行到了无效指令，CPU 会给自己一个 0x06 的中断号。</p>

<p><em><strong>3.</strong></em> <strong>执行 INT n 指令</strong>，会直接给 CPU 一个中断号 n，比如触发了 Linux 的系统调用，实际上就是执行了 INT 0x80 指令，那么 CPU 收到的就是一个 0x80 中断号。</p>

<p>再往后，CPU 以各种不同的方式收到的这些 0x21 0x06 0x80，都会<strong>一视同仁</strong>，做同样的后续处理流程，所以从现在开始，前面的事情就不用再管了，这也体现了分层的好处。</p>

<p><strong>收到中断号之后 CPU 干嘛？</strong></p>

<p>那 CPU 收到中断号后，如何处理呢？</p>

<p>先用一句不太准确的话总结，<strong>CPU 收到一个中断号 n 后，会去中断向量表中寻找第 n 个中断描述符，从中断描述符中找到中断处理程序的地址，然后跳过去执行</strong>。</p>

<p>为什么说不准确呢？因为从中断描述符中找到的，并不直接是程序的地址，而是<strong>段选择子</strong>和<strong>段内偏移地址</strong>。然后段选择子又会去<strong>全局描述符表</strong>中寻找<strong>段描述符</strong>，从中取出<strong>段基址</strong>。之后段基址 + 段内偏移地址，才是最终处理程序的入口地址。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" />当然这个入口地址，还不是最终的物理地址，如果开启了分页，又要经历分页机制的转换，就像下面这样。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" />不过不要担心，这不是中断的主流程，<strong>因为分段机制和分页机制是所有地址转换过程的必经之路，并不是中断这个流程所特有的</strong>。</p>

<p>所以我们简单的把中断描述符表中存储的地址，直接当做 CPU 可以跳过去执行的中断处理程序的入口地址，就好了，不影响理解他们。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>你看，这是不是简单很多。</p>

<p>那接下来的问题就很简单了，这里出现了两个名词，那就分别对他们进行发问。</p>

<p><em><strong>1.</strong></em> 中断描述符表是啥？</p>

<p><em><strong>2.</strong></em> 中断描述符是啥？</p>

<p><em><strong>3.</strong></em> 去哪里找他们？</p>

<p>分别回答即可</p>

<blockquote>
  <blockquote>
    <p><strong>中断描述符表是啥？</strong></p>

  </blockquote>
</blockquote>

<p><strong>就是一个在内存中的数组而已</strong>，操作系统初始化过程中，有很多结构都称之为 XXX 表，其实就是个数组罢了。</p>

<p>以 linux-2.6.0 源码为例，就很直观了。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct desc_struct idt_table[256] = { {0, 0}, };
</code></pre></div></div>

<p>你看，是一个大小为 256 的数组。idt_table 这个名字就是 <strong>Interrupt Descriptor Table</strong>，逐字翻译过来确实就是<strong>中断描述符表</strong>。</p>

<blockquote>
  <blockquote>
    <p><strong>中断描述符是啥？</strong></p>

  </blockquote>
</blockquote>

<p><strong>就是中断描述符表这个数组里的存储的数据结构</strong>，通过刚刚的源码也可以看出来，是一个叫 <strong>desc_struct</strong> 的结构。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct desc_struct {    unsigned long a,b;};
</code></pre></div></div>

<p>好家伙，Linux 源码里就这么简单粗暴表示，一个中断描述符的大小为 64 位，也就是 8 个字节，具体里面存的啥通过这个源码看不出来。</p>

<p>翻一下 Intel 手册，在 <em>Volumn 3 Chapter 5.11 IDT Descriptors</em> 中找到了一张图。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>可以看到，中断描述符具体还分成好几个种类，有：</p>

<p><strong>Task Gate</strong>：任务门描述符</p>

<p><strong>Interrupt Gate</strong>：中断门描述符</p>

<p><strong>Trap Gate</strong>：陷阱门描述符</p>

<p>不要慌，其中任务门描述符 Linux 中几乎没有用到。</p>

<p>中断门描述符和陷阱门描述符的区别仅仅是<strong>是否允许中断嵌套</strong>，实现方式非常简单粗暴，就是 CPU 如果收到的中断号对应的是一个中断门描述符，就修改 IF 标志位（就是一个寄存器中一位的值），修改了这个值后就屏蔽了中断，也就防止了中断的嵌套。而陷阱门没有改这个标志位，也就允许了中断的嵌套。</p>

<p>所以简单理解的话，你把他们当做同样一个描述符就好了，先别管这些细节，他们的结构几乎完全一样，只是差了一个类型标识罢了。</p>

<p>那这个中断描述符的结构长什么样呢？我们可以清晰地看到，里面有<strong>段选择子</strong>和<strong>段内偏移地址</strong>。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>回顾下刚刚说的中断处理流程。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" />没骗你吧。</p>

<p>但以上这些如果你都搞不明白，还是那句话，记这个最简单的流程就好了，不影响理解。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>好了，现在我们直观地看到了中断描述符表这个 256 大小的数组，以及它里面存的中断描述符长什么样子，<strong>最终的目的，还是帮助 CPU 找到一个程序的入口地址，然后跳转过去</strong>。</p>

<p>OK，下一个问题，就是 CPU 怎么寻找到这个中断描述符表的位置呢？它是在内存中一个固定的位置么？</p>

<blockquote>
  <blockquote>
    <p><strong>CPU 怎么找到中断描述符表</strong></p>

  </blockquote>
</blockquote>

<p>答案是否定的，<strong>中断描述符表在哪里，全凭各个操作系统的喜好，想放在哪里就放在哪里</strong>，但需要通过某种方式告诉 CPU，即可。</p>

<p>怎么告诉呢？CPU 提前预留了一个寄存器叫 <strong>IDTR 寄存器</strong>，这里面存放的就是中断描述符表的起始地址，以及中断描述符表的大小。</p>

<p>在 <em>Volumn 3 Chapter 5.10 Interrupt Descriptor Table</em> 中告诉了我们 IDTR 寄存器的结构。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>操作系统的代码可以通过 <strong>LIDT 指令</strong>，将中断描述符表的地址放在这个寄存器里。</p>

<p>还记得刚刚看的源码么？中断描述符表就是这个。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct desc_struct idt_table[256] = { {0, 0}, };
</code></pre></div></div>

<p>然后操作系统把这个的地址用 <strong>LIDT</strong> 指令放在 <strong>IDTR 寄存器</strong>就行了。IDTR 寄存器里的值一共 48 位，前 16 位是中断描述符表大小（字节数），后 32 位是中断描述符表的起始内存地址，就是这个 idt_table 的位置。</p>

<p>Linux-2.6.0 源码中是这样构造这个结构的，简单粗暴。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>idt_descr:    .word 256 * 8 - 1    .long idt_table
</code></pre></div></div>

<p>紧接着，一个 LIDT 指令把这个结构放到 IDTR 寄存器中。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lidt idt_descr
</code></pre></div></div>

<p>整个过程一气呵成，呵得我连代码格式都懒得调了，是不是很清晰明了。</p>

<p>这样，CPU 收到一个中断号后，<strong>中断描述符表的起始位置从 IDTR 寄存器中可以知道，而且里面的每个中断描述符都是 64 位大小，也就是 8 个字节，那自然就可以找到这个中断号对应的中断描述符</strong>。</p>

<p>接下来的问题就是，这个中断描述符表是谁来提前写好的？又是怎么写的？</p>

<blockquote>
  <blockquote>
    <p><strong>谁把中断描述符表这个结构写在内存的</strong></p>

  </blockquote>
</blockquote>

<p>很简单，操作系统呗。</p>

<p>在 Linux-2.6.0 内核源码的 traps.c 文件中，有这样一段代码。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void __init trap_init(void) {    set_trap_gate(0, &amp;divide_error);    ...    set_trap_gate(6, &amp;invalid_op);    ...    set_intr_gate(14, &amp;page_fault);    ...    set_system_gate(0x80, &amp;system_call);}
</code></pre></div></div>

<p>你看，我们刚刚提到的<strong>除法异常、非法指令异常、缺页异常</strong>，以及之后可能通过 INT 0x80 触发<strong>系统调用</strong>的中断处理函数 system_call，就是这样被写到了中断描述符表里。</p>

<p>经过这样一番操作后，我们的中断描述符表里的值就丰富了起来。</p>

<p>好了，现在只剩下最后一个问题了，CPU 在找到一个中断描述符后，如何跳过去执行？</p>

<blockquote>
  <blockquote>
    <p><strong>找到中断描述符后，干嘛</strong></p>

  </blockquote>
</blockquote>

<p>现在这个问题可以再问得大一些了，就是 <strong>CPU 在收到一个中断号并且找到了中断描述符之后，究竟做了哪些事</strong>？</p>

<p>当然，最简单的办法就是，<strong>直接把中断描述符里的中断程序地址取出来，放在自己的 CS:IP 寄存器中</strong>，因为这里存的值就是下一跳指令的地址，只要放进去了，到下一个 CPU 指令周期时，就会去那里继续执行了。</p>

<p>但 CPU 并没有这样简单粗暴，而是帮助我们程序员做了好多额外的事情，这增加了我们的学习和理解成本，但方便了写操作系统的程序员，拿到一些中断的信息，以及中断程序结束后的返回工作。</p>

<p>但其实，就是做了一些<strong>压栈操作</strong>。</p>

<p><em><strong>1.</strong></em> 如果发生了特权级转移，压入之前的堆栈段寄存器 SS 及栈顶指针 ESP 保存到栈中，并将堆栈切换为 TSS 中的堆栈。</p>

<p><em><strong>2.</strong></em> 压入标志寄存器 EFLAGS。</p>

<p><em><strong>3.</strong></em> 压入之前的代码段寄存器 CS 和指令寄存器 EIP，相当于压入返回地址。</p>

<p><em><strong>4.</strong></em> 如果此中断有错误码的，压入错误码 ERROR_CODE</p>

<p><em><strong>5.</strong></em> 结束（之后就跳转到中断程序了）</p>

<p>压栈操作结束后，栈就变成了这个样子。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>特权级的转移需要切换栈，所以提前将之前的<strong>栈指针</strong>压入。<strong>错误码</strong>可以方便中断处理程序做一些工作，如果需要，从栈顶拿到就好了。</p>

<p>抛开这两者不说，剩下的就只有<strong>标志寄存器</strong>和<strong>中断发生前的代码地址</strong>，被压入了栈，这很好理解，就是方便中断程序结束后，返回原来的代码嘛~</p>

<p>具体的压栈工作，以及如何利用这些栈的信息达到结束中断并返回原程序的效果，Intel 手册中也写得很清楚。</p>

<p><em>Volumn 3A System Programming Guide  Chapter 5.12.1Exception- or Interrupt-Handler Procedures</em></p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p>看下面的话，通过配合 <strong>IRET</strong> 或 <strong>IRETD</strong> 指令返回。</p>

<p>由于后续版本的 Linux 自己的玩法比较多，已经不用 Intel 提供的现成指令了，所以这回我们从 Linux-0.11 版源码中寻找答案。</p>

<p>比如除法异常的中断处理函数，在 asm.s 中。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_divide_error: push dword ptr _do_divide_error ;no_error_code: ; xchg [esp],eax ; push ebx push ecx push edx push edi push esi push ebp push ds ; push es push fs push 0 ; lea edx,[esp+44] ; push edx mov edx,10h ; mov ds,dx mov es,dx mov fs,dx call eax ; add esp,8 ; pop fs pop es pop ds pop ebp pop esi pop edi pop edx pop ecx pop ebx pop eax ;// 弹出原来eax 中的内容。 iretd
</code></pre></div></div>

<p>只看最后一行，确实用了 iretd 指令。</p>

<p>这个指令会依次弹出栈顶的三个元素，把它们分别赋值给 <strong>EIP，CS 和 EFLAGS</strong>，而栈顶的三个元素，又恰好是 <strong>EIP，CS 和 EFLAGS</strong> 这样的顺序，你说这巧不巧？</p>

<p>当然不巧，人家 CPU 执行中断函数前做了压栈操作，然后又提供了 iret 指令做弹栈操作，当然是给你配套使用的！</p>

<p>你看，<strong>中断是如何切到中断处理程序的？就是靠中断描述符表中记录的地址。那中断又如何回到原来的代码继续执行呢？是通过 CPU 帮我们把中断发生前的地址压入了栈中</strong>，然后我们程序自己利用他们去返回，当然也可以不返回。</p>

<p>这就是 CPU 和操作系统配合的结果，把中断这个事给解决了。</p>

<p><img src="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E" alt="图片" /></p>

<p><strong>总结</strong></p>

<p>所以总结起来就是，理解中断，只要回答了这几个问题就好。</p>

<p><strong>如何给 CPU 一个中断号？</strong></p>

<p>外部设备通过 INTR 引脚，或者 CPU 执行指令的过程中自己触发，或者由软件通过 INT n 指令强行触发。</p>

<p>同样中断也是这样进行分类的。</p>

<p><strong>CPU 收到中断号后如何寻找到中断程序的入口地址？</strong></p>

<p>通过 IDTR 寄存器找到中断描述符表，通过中断描述符表和中断号定位到中断描述符，取出中断描述符表中存储的程序入口地址。</p>

<p><strong>中断描述符表是谁写的？</strong></p>

<p>操作系统代码写上去的。</p>

<p><strong>找到程序入口地址之后，CPU 做了什么？</strong></p>

<p>简单说，实际上做的事情就是压栈，并跳转到入口地址处执行代码。而压栈的目的，就是保护现场（原来的程序地址、原来的程序堆栈、原来的标志位）和传递信息（错误码）</p>

<p>好了，中断讲完了，如果再往后扩大一点点概念，以上说的中断，统统都是<strong>硬中断</strong>。注意，不叫硬件中断哦。</p>

<p>为什么叫硬中断呢？因为这是 Intel CPU 这个硬件实现的中断机制，注意这里是实现机制，并不是触发机制，因为触发可以通过外部硬件，也可以通过软件的 INT 指令。</p>

<p>那与硬中断对应的还有<strong>软中断</strong>，这个概念网上好多地方都讲错了，把软中断和 INT 指令这种软件中断混淆了，<strong>所以我觉得软件中断最好称其为，由软件触发的中断，而软中断称其为软件实现的中断</strong>。</p>

<p><strong>软中断是纯粹由软件实现的一种类似中断的机制</strong>，实际上它就是模仿硬件，在内存中有一个地方存储着软中断的标志位，然后由内核的一个线程不断轮询这些标志位，如果有哪个标志位有效，则再去另一个地方寻找这个软中断对应的中断处理程序。</p>

<p>软中断是 Linux 实现中断的<strong>下半部</strong>的一种非常常见的方式，之后我讲 Linux 内核如何接受网络包这个事情的时候也可以看到，软中断是研究整个过程的一个突破口。</p>

<ul>
  <li>EOF -</li>
</ul>

<p>推荐阅读  点击标题可跳转</p>

<p>1、<a href="http://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666558962&amp;idx=1&amp;sn=ede9eea879107df21557e1b9dcfeeb28&amp;chksm=80dcb159b7ab384f22e68fc32d5556afd3e98c29d08757a871582d526bf5985b0c7c3fd3ec6d&amp;scene=21#wechat_redirect">10 分钟看懂 Docker 和 K8S</a></p>

<p>2、<a href="http://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666558647&amp;idx=1&amp;sn=f9f02d09c89ec081c61a717b3724b7fd&amp;chksm=80dcb01cb7ab390a0d89664294542d564e7cc4d539cc6dc30ef997158d1b1ac496a21a991407&amp;scene=21#wechat_redirect">这才是中国被卡脖子最严重的软件！</a></p>

<p>3、<a href="http://mp.weixin.qq.com/s?__biz=MzAxODI5ODMwOA==&amp;mid=2666558954&amp;idx=2&amp;sn=775617c1787bb8ab5251444c8762cd44&amp;chksm=80dcb141b7ab38576e44e8149b6f64aab5812d557f7f50a6b8543b375c7a67acac0fe75f00ac&amp;scene=21#wechat_redirect">如果让你来设计网络，你会把它弄成啥样？</a></p>

<p>看完本文有收获？请分享给更多人</p>

<p>推荐关注「Linux 爱好者」，提升Linux技能</p>

<p><img src="http://mmbiz.qpic.cn/mmbiz_png/9aPYe0E1fb3sjicd8JxDra10FRIqT54Zke2sfhibTDdtdnVhv5Qh3wLHZmKPjiaD7piahMAzIH6Cnltd1Nco17Ihjw/0?wx_fmt=png" alt="" /></p>

<p><strong>Linux爱好者</strong></p>

<p>点击获取《每天一个Linux命令》系列和精选Linux技术资源。「Linux爱好者」日常分享 Linux/Unix 相关内容，包括：工具资源、使用技巧、课程书籍等。</p>

<p>75篇原创内容</p>

<p>公众号</p>

<p>点赞和在看就是最大的支持❤️</p>

<p>分享收藏</p>

<p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&amp;size=102&amp;__biz=MzAxODI5ODMwOA==&amp;mid=2666559053&amp;idx=2&amp;sn=cdd9e3e14102740664c93bfe99bb0044&amp;send_time=" alt="" /></p>

<p>微信扫一扫<br />
关注该公众号</p>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[【转帖】]]></summary></entry><entry><title type="html">DRM子系统</title><link href="http://localhost:4000/blog/drm/2018-02-01-DRM.html" rel="alternate" type="text/html" title="DRM子系统" /><published>2018-02-01T00:00:00+08:00</published><updated>2018-02-01T00:00:00+08:00</updated><id>http://localhost:4000/blog/drm/DRM</id><content type="html" xml:base="http://localhost:4000/blog/drm/2018-02-01-DRM.html"><![CDATA[<h1 id="一drm总述">一、DRM总述</h1>

<h2 id="11在整个系统中的位置">1.1在整个系统中的位置</h2>

<p>App角度</p>

<p><img src="/blog/assets/DRM/user_space.png" alt="user_space" width="640px" height="300px" /></p>

<p>DRM内部</p>

<p><img src="/blog/assets/DRM/640px-DRM_architecture.png" alt="drm" /></p>

<p>wayland实例</p>

<p><img src="/blog/assets/DRM/wayland_drm.png" alt="wayland_drm" width="640px" height="550px" /></p>

<h1 id="二图形buffer相关">二、图形buffer相关</h1>

<h2 id="21-dumb-buffer">2.1 dumb buffer</h2>

<p>旧时的显卡由一块很小的显存（通常为640x480）加一块数模转换电路（DAC）组成，说白了就是一块 Framebuffer + Display Controller。显卡的功能极其简单，只负责将显存中的图像数据转换成RGB信号发送出去即可，而所有的绘图操作则都交给 CPU 来完成。行业里将这种显卡称为 VGA(Video Graphics Array) Card，它的显存则被称为“Dumb Frame Buffer”。而到了后期，随着显卡技术的不断发展，许多原来由 CPU 干的活，渐渐的都被显卡取代了。从最初支持某些特定绘图指令（如画点、画线）的显卡，到后来支持视频解码的 Video Card，再到现代支持复杂3D渲染指令（如OpenGL）的 GPU 显卡，CPU 绘图的繁重任务彻底得到了解放。与 VGA Card 相比较，行业里将后来显卡的显存称为“Smart Frame Buffer”。</p>

<p>首先从这两种称谓上我们就可以看出，dumb 是 smart 的反义词，因此 dumb 在这里的解释应该是“傻的”或“傻瓜式的”，而不是“哑的”。
dumb buffer 和 smart buffer 的区别就在于，你写到显存里的数据，是可以直接上屏显示的图像内容，还是一堆需要GPU解析的命令和资源数据。</p>

<p>与 dumb buffer 命名类似的还有：</p>

<ul>
  <li>dumb-terminal：不支持特殊字符的终端，如“清屏”、“粗体”、“彩色字符”等等</li>
  <li>dumb-panel：不带 GRAM 的 panel</li>
  <li>dumb-TV：与 Smart-TV 相反，指以前老式的黑白电视</li>
</ul>

<p>如今的 IT 领域，dumb一词更多的代表 “功能简单的”、“老式的”、“传统的” 含义</p>

<h3 id="211超简单dumb实现">2.1.1超简单DUMB实现</h3>
<p><img src="/blog/assets/DRM/dumb.png" alt="drm" /></p>

<p>与dumb buffer相关的userspace接口有四个, 下表列出了它们的名字, 作用和对应要实现的函数</p>

<table>
  <thead>
    <tr>
      <th>interface</th>
      <th>Description</th>
      <th>drm driver</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ioctl(fd, DRM_IOCTL_MODE_CREATE_DUMB, …)</td>
      <td>向驱动申请一个dumb buffer，返回一个handle，指向新分配的buffer</td>
      <td>.dumb_create()</td>
    </tr>
    <tr>
      <td>ioctl(fd, DRM_IOCTL_MODE_MAP_DUMB, …)</td>
      <td>为buffer map做准备，传入handle，得到一个offset</td>
      <td>.dumb_map_offset()</td>
    </tr>
    <tr>
      <td>ioctl(fd, DRM_IOCTL_MODE_DESTROY_DUMB, …)</td>
      <td>销毁该dumb buffer</td>
      <td>.dumb_destroy()</td>
    </tr>
    <tr>
      <td>mmap(fd, …)</td>
      <td>传入 buffer对应的offset，映射到进程空间，返回一个用户空间可使用的地址。</td>
      <td>.fops.mmap()</td>
    </tr>
  </tbody>
</table>

<h4 id="2111-简单应用程序">2.1.1.1 简单应用程序</h4>

<p>下面是一个简单的应用程序，演示了dumb buffer的申请，mmap，使用和销毁。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;xf86drm.h&gt;</span><span class="cp">
</span>
<span class="cp">#define log(fmt, args...) printf("%s():%d " fmt "\n", __func__, __LINE__, ##args)
#define err(fmt, args...) printf("\033[35m%s():%d " fmt "\033[0m\n", __func__, __LINE__, ##args)
</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">create_dumb_buffer</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">drm_mode_create_dumb</span> <span class="n">create</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="n">create</span><span class="p">.</span><span class="n">width</span>  <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
    <span class="n">create</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span><span class="n">height</span><span class="p">;</span>
    <span class="n">create</span><span class="p">.</span><span class="n">bpp</span>    <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="mi">8</span><span class="p">;</span> <span class="c1">// byte per pixel</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">drmIoctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">DRM_IOCTL_MODE_CREATE_DUMB</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">create</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"ret:%d"</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>    
    <span class="k">return</span> <span class="n">create</span><span class="p">.</span><span class="n">handle</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">get_dumb_buffer_offset</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">handle</span><span class="p">){</span>
    <span class="k">struct</span> <span class="n">drm_mode_map_dumb</span> <span class="n">map</span> <span class="o">=</span> <span class="p">{};</span>  
    <span class="n">map</span><span class="p">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">handle</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">drmIoctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">DRM_IOCTL_MODE_MAP_DUMB</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">map</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"ret:%d"</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">map</span><span class="p">.</span><span class="n">offset</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">mmap_dumb_buffer</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="p">){</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">addr</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">offset</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">addr</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"mmap dumb buffer offset:0x%x failed"</span><span class="p">,</span> <span class="n">offset</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">addr</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">destroy_dumb_buffer</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">handle</span><span class="p">){</span>
    <span class="k">struct</span> <span class="n">drm_mode_destroy_dumb</span> <span class="n">destroy</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="n">destroy</span><span class="p">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">handle</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">drmIoctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">DRM_IOCTL_MODE_DESTROY_DUMB</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">destroy</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"DRM_IOCTL_MODE_DESTROY_DUMB failed. ret:%d"</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span><span class="p">;</span>
    <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"/dev/dri/card0"</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CLOEXEC</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fd</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"open dev failed."</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">create_dumb_buffer</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"create dumb buffer, get handle:%d"</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">get_dumb_buffer_offset</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"get dumb buffer offset:0x%x"</span><span class="p">,</span> <span class="n">offset</span><span class="p">);</span>

    <span class="kt">void</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="n">mmap_dumb_buffer</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">offset</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"get dumb buffer addr:%p"</span><span class="p">,</span><span class="n">addr</span><span class="p">);</span>

    <span class="c1">//在addr所指向的buffer上进行绘图</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span><span class="p">);</span>

    <span class="n">munmap</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span> 

    <span class="n">destroy_dumb_buffer</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"destroy dumb buffer"</span><span class="p">);</span>

    <span class="n">getchar</span><span class="p">();</span>
    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="2112-实现简单的驱动">2.1.1.2 实现简单的驱动</h4>

<p>基于kernel 5.15.126， 主要是.dumb_create(), .dumb_map_offset(), .dumb_destroy, fops.mmap()的实现</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/platform_device.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_drv.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_file.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_ioctl.h&gt;</span><span class="cp">
</span>
<span class="cp">#define DRIVER_NAME "drm dumb driver"
#define DRIVER_DESC "Virtual drm dumb driver"
#define DRIVER_DATE "20191114"
#define DRIVER_MAJOR 1
#define DRIVER_MINOR 0
</span>
<span class="cp">#define MAX_NUM 10
#define log(fmt, args...) printk("%s():%d " fmt "\n", __func__, __LINE__, ##args)
#define err(fmt, args...) printk("\033[35m%s():%d " fmt "\033[0m\n", __func__, __LINE__, ##args)
</span>
<span class="k">struct</span> <span class="n">dumb_device</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">drm_device</span> <span class="n">drm</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">platform_device</span> <span class="o">*</span><span class="n">platform_dev</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">dumb_device</span><span class="o">*</span> <span class="n">dumb_device</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">page</span>  <span class="o">*</span><span class="n">pages</span><span class="p">[</span><span class="n">MAX_NUM</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">static</span> <span class="n">u32</span>   <span class="n">buffer_size</span><span class="p">[</span><span class="n">MAX_NUM</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">page_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_mmap_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span><span class="o">*</span> <span class="n">filp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">vm_area_struct</span><span class="o">*</span> <span class="n">vma</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">pfn_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">size</span> <span class="o">=</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_end</span> <span class="o">-</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="cm">/*********************************************************************
     * vm_pgoff: 也是vm_are_struct的一个字段
     * 表示偏移量，它是以page size计数的。 pg表示page计数，off表示偏移
     *********************************************************************/</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_pgoff</span><span class="p">;</span>
    <span class="n">pfn_start</span> <span class="o">=</span> <span class="n">page_to_pfn</span><span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"idx:%d phy: 0x%lx, vm_pgoff: 0x%lx, vma-&gt;vm_start:0x%lx, size: 0x%lx"</span><span class="p">,</span>
            <span class="n">idx</span><span class="p">,</span> <span class="n">pfn_start</span> <span class="o">&lt;&lt;</span> <span class="n">PAGE_SHIFT</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_pgoff</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">remap_pfn_range</span><span class="p">(</span><span class="n">vma</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">pfn_start</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_page_prot</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"remap_pfn_range failed at [0x%lx  0x%lx]"</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_end</span><span class="p">);</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">virt_start</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">page_address</span><span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>        
        <span class="n">log</span><span class="p">(</span><span class="s">"map 0x%lx to 0x%lx, size: 0x%lx"</span><span class="p">,</span>  <span class="n">virt_start</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">file_operations</span> <span class="n">dumb_driver_fops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">owner</span>      <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
    <span class="p">.</span><span class="n">open</span>       <span class="o">=</span> <span class="n">drm_open</span><span class="p">,</span>
    <span class="p">.</span><span class="n">release</span>    <span class="o">=</span> <span class="n">drm_release</span><span class="p">,</span>
    <span class="p">.</span><span class="n">unlocked_ioctl</span> <span class="o">=</span> <span class="n">drm_ioctl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">compat_ioctl</span> <span class="o">=</span> <span class="n">drm_compat_ioctl</span><span class="p">,</span>    
    <span class="p">.</span><span class="n">mmap</span>   <span class="o">=</span> <span class="n">dumb_mmap_impl</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">dumb_release</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">)</span> <span class="p">{</span> <span class="n">log</span><span class="p">();</span> <span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_create_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span>     <span class="o">*</span><span class="n">file_priv</span><span class="p">,</span> 
                            <span class="k">struct</span> <span class="n">drm_device</span>   <span class="o">*</span><span class="n">dev</span><span class="p">,</span> 
                            <span class="k">struct</span> <span class="n">drm_mode_create_dumb</span><span class="o">*</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">u32</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span><span class="n">page_idx</span><span class="o">&gt;=</span><span class="n">MAX_NUM</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"only support alloc %d buffers"</span><span class="p">,</span> <span class="n">MAX_NUM</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">size</span> <span class="o">=</span> <span class="n">roundup</span><span class="p">((</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">bpp</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="n">PAGE_SIZE</span><span class="p">);</span>

    <span class="c1">// 分配页面</span>
    <span class="n">pages</span><span class="p">[</span><span class="n">page_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">alloc_pages</span><span class="p">(</span><span class="n">GFP_KERNEL</span><span class="p">,</span> <span class="n">get_order</span><span class="p">(</span><span class="n">size</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pages</span><span class="p">[</span><span class="n">page_idx</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"alloc_pages() failed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">buffer_size</span><span class="p">[</span><span class="n">page_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>

    <span class="c1">// 赋值返回参数</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">size</span>    <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">pitch</span>   <span class="o">=</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">bpp</span><span class="o">/</span><span class="mi">8</span><span class="p">;</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">handle</span>  <span class="o">=</span> <span class="n">page_idx</span><span class="o">++</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_map_offset_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span>     <span class="o">*</span><span class="n">file_priv</span><span class="p">,</span> 
                                <span class="k">struct</span> <span class="n">drm_device</span>   <span class="o">*</span><span class="n">dev</span><span class="p">,</span> 
                                <span class="kt">uint32_t</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">uint64_t</span><span class="o">*</span> <span class="n">offset</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>
    <span class="c1">//根据handle得到一个offset，为了简单，这里直接使用handle</span>
    <span class="o">*</span><span class="n">offset</span> <span class="o">=</span> <span class="mh">0x1000</span><span class="o">*</span><span class="p">(</span><span class="n">u64</span><span class="p">)</span><span class="n">handle</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span>  <span class="kt">int</span> <span class="nf">dumb_destroy_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span> <span class="o">*</span><span class="n">file_priv</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">handle</span><span class="p">){</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"handle:%d"</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>

    <span class="n">free_pages</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">page_address</span><span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="n">handle</span><span class="p">]),</span> <span class="n">get_order</span><span class="p">(</span><span class="n">buffer_size</span><span class="p">[</span><span class="n">handle</span><span class="p">]));</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">drm_driver</span> <span class="n">dumb_driver</span> <span class="o">=</span> <span class="p">{</span>    
    <span class="p">.</span><span class="n">fops</span>            <span class="o">=</span> <span class="o">&amp;</span><span class="n">dumb_driver_fops</span><span class="p">,</span>    
    <span class="p">.</span><span class="n">release</span>         <span class="o">=</span> <span class="n">dumb_release</span><span class="p">,</span>
    
    <span class="p">.</span><span class="n">dumb_create</span>     <span class="o">=</span> <span class="n">dumb_create_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">dumb_map_offset</span> <span class="o">=</span> <span class="n">dumb_map_offset_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">dumb_destroy</span>    <span class="o">=</span> <span class="n">dumb_destroy_impl</span><span class="p">,</span>

    <span class="p">.</span><span class="n">name</span>  <span class="o">=</span> <span class="n">DRIVER_NAME</span><span class="p">,</span>
    <span class="p">.</span><span class="n">desc</span>  <span class="o">=</span> <span class="n">DRIVER_DESC</span><span class="p">,</span>
    <span class="p">.</span><span class="n">date</span>  <span class="o">=</span> <span class="n">DRIVER_DATE</span><span class="p">,</span>
    <span class="p">.</span><span class="n">major</span> <span class="o">=</span> <span class="n">DRIVER_MAJOR</span><span class="p">,</span>
    <span class="p">.</span><span class="n">minor</span> <span class="o">=</span> <span class="n">DRIVER_MINOR</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">dumb_drv_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">platform_device</span><span class="o">*</span> <span class="n">pdev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"build time: %s %s"</span><span class="p">,</span> <span class="n">__DATE__</span><span class="p">,</span> <span class="n">__TIME__</span><span class="p">);</span>

    <span class="n">pdev</span> <span class="o">=</span> <span class="n">platform_device_register_simple</span><span class="p">(</span><span class="n">DRIVER_NAME</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">pdev</span><span class="p">))</span> <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">devres_open_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">out_unregister</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 分配</span>
    <span class="n">dumb_device</span> <span class="o">=</span> <span class="n">devm_drm_dev_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dumb_driver</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dumb_device</span><span class="p">,</span> <span class="n">drm</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">dumb_device</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">dumb_device</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out_devres</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 注册</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">drm_dev_register</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">drm</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="k">goto</span> <span class="n">out_devres</span><span class="p">;</span>

    <span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span> <span class="o">=</span> <span class="n">pdev</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"Finish"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="nl">out_devres:</span>
    <span class="n">devres_release_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

<span class="nl">out_unregister:</span>
    <span class="n">platform_device_unregister</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">dumb_drv_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>    
    <span class="k">struct</span> <span class="n">platform_device</span> <span class="o">*</span><span class="n">pdev</span> <span class="o">=</span> <span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="n">drm_dev_unregister</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">drm</span><span class="p">);</span>
    <span class="n">devres_release_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">platform_device_unregister</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">dumb_drv_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">dumb_drv_exit</span><span class="p">);</span>

<span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">"kevin"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="n">DRIVER_DESC</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
</code></pre></div></div>
<h4 id="2113-它们是如何衔接起来的">2.1.1.3 它们是如何衔接起来的</h4>
<p><img src="/blog/assets/DRM/DRM_DUMB_simple.svg" alt="drm_dumb_simple" /></p>

<h3 id="212-基于gem的实现">2.1.2 基于GEM的实现</h3>

<p>GEM是系统提供的一套实现框架或者帮助工具。在各自实现私有的drm driver时，总有一些内容是相同或相似的，GEM就对这些相同部分进行了总结，抽象，然后实现了它们，供开发者使用。具体实现在drm_gem.c</p>

<h4 id="2121-实现代码">2.1.2.1 实现代码</h4>
<p>下面是基于GEM对上面driver实现的改造。 它利用了GEM 提供的如下函数：</p>

<table>
  <thead>
    <tr>
      <th>interface</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>drm_gem_object_init()</td>
      <td>初始化一个gem对象</td>
    </tr>
    <tr>
      <td>drm_gem_handle_create()</td>
      <td>通过gem对象生成一个handle</td>
    </tr>
    <tr>
      <td>drm_gem_object_lookup()</td>
      <td>根据handle 找到对应的gem对象</td>
    </tr>
    <tr>
      <td>drm_gem_dumb_map_offset()</td>
      <td>通过gem对象生成一个offset</td>
    </tr>
    <tr>
      <td>drm_gem_mmap()</td>
      <td>对mmap()的支持，如果开发者使用它，就可利用gem mmap的实现部分</td>
    </tr>
    <tr>
      <td>struct drm_gem_object_funcs</td>
      <td>使用gem对象时可能调用到一组函数,此处实现了.mmap,对应drm_gem_mmap()</td>
    </tr>
  </tbody>
</table>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/platform_device.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_gem.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_drv.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_file.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_ioctl.h&gt;</span><span class="cp">
</span>
<span class="cp">#define DRIVER_NAME "drm dumb gem driver"
#define DRIVER_DESC "Virtual drm dumb driver"
#define DRIVER_DATE "20191116"
#define DRIVER_MAJOR 1
#define DRIVER_MINOR 0
</span>
<span class="cp">#define log(fmt, args...) printk("%s():%d " fmt "\n", __func__, __LINE__, ##args)
#define err(fmt, args...) printk("\033[35m%s():%d " fmt "\033[0m\n", __func__, __LINE__, ##args)
</span>
<span class="cp">#define DRM_GEM_OBJECT_TO_DUMB_BUFFER_OBJ(target) \
    container_of(target, struct dumb_buffer_object, gem_obj)
</span>
<span class="k">struct</span> <span class="n">dumb_device</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">drm_device</span> <span class="n">drm</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">platform_device</span> <span class="o">*</span><span class="n">platform_dev</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">dumb_buffer_object</span><span class="p">{</span>
    <span class="k">struct</span> <span class="n">drm_gem_object</span> <span class="n">gem_obj</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">page</span>  <span class="o">*</span><span class="n">start_page</span><span class="p">;</span>
    <span class="n">u32</span>    <span class="n">size</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">dumb_device</span><span class="o">*</span> <span class="n">dumb_device</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_gem_mmap_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span><span class="o">*</span> <span class="n">filp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">vm_area_struct</span><span class="o">*</span> <span class="n">vma</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"call drm_gem_mmap()"</span><span class="p">);</span>

    <span class="c1">// 利用GEM方法进行mapping，</span>
    <span class="c1">// 在它里面会调用之前设置好的drm_gem_object_funcs.mmap()</span>
    <span class="k">return</span> <span class="n">drm_gem_mmap</span><span class="p">(</span><span class="n">filp</span><span class="p">,</span> <span class="n">vma</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">file_operations</span> <span class="n">dumb_driver_fops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">owner</span>      <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span>
    <span class="p">.</span><span class="n">open</span>       <span class="o">=</span> <span class="n">drm_open</span><span class="p">,</span>
    <span class="p">.</span><span class="n">release</span>    <span class="o">=</span> <span class="n">drm_release</span><span class="p">,</span>
    <span class="p">.</span><span class="n">poll</span>       <span class="o">=</span> <span class="n">drm_poll</span><span class="p">,</span>
    <span class="p">.</span><span class="n">read</span>       <span class="o">=</span> <span class="n">drm_read</span><span class="p">,</span>
    <span class="p">.</span><span class="n">llseek</span>     <span class="o">=</span> <span class="n">noop_llseek</span><span class="p">,</span>
    <span class="p">.</span><span class="n">mmap</span>       <span class="o">=</span> <span class="n">dumb_gem_mmap_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">unlocked_ioctl</span> <span class="o">=</span> <span class="n">drm_ioctl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">compat_ioctl</span> <span class="o">=</span> <span class="n">drm_compat_ioctl</span><span class="p">,</span>    
<span class="p">};</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_gem_obj_mmap</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_gem_object</span> <span class="o">*</span><span class="n">gem_obj</span><span class="p">,</span> <span class="k">struct</span> <span class="n">vm_area_struct</span> <span class="o">*</span><span class="n">vma</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">pfn_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">size</span> <span class="o">=</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_end</span> <span class="o">-</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">dumb_buffer_object</span> <span class="o">*</span><span class="n">dumb_buffer_obj</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">dumb_buffer_obj</span> <span class="o">=</span> <span class="n">DRM_GEM_OBJECT_TO_DUMB_BUFFER_OBJ</span><span class="p">(</span><span class="n">gem_obj</span><span class="p">);</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"mmaping dumb_buffer_obj:%p"</span><span class="p">,</span> <span class="n">dumb_buffer_obj</span><span class="p">);</span>

    <span class="n">pfn_start</span> <span class="o">=</span> <span class="n">page_to_pfn</span><span class="p">(</span><span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">start_page</span><span class="p">);</span>
        
    <span class="n">ret</span> <span class="o">=</span> <span class="n">remap_pfn_range</span><span class="p">(</span><span class="n">vma</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">pfn_start</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_page_prot</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"remap_pfn_range failed at [0x%lx  0x%lx]"</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_end</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">drm_gem_object_funcs</span> <span class="n">dumb_gem_obj_funcs</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">open</span>   <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
    <span class="p">.</span><span class="n">mmap</span>   <span class="o">=</span> <span class="n">dumb_gem_obj_mmap</span><span class="p">,</span> 
  <span class="c1">//.vm_ops = &amp;dumb_gem_vm_ops, // 赋值到struct vm_area_struct 的vm_ops, 供缺页时调用。</span>
<span class="p">};</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">dumb_release</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">)</span> <span class="p">{</span> <span class="n">log</span><span class="p">();</span> <span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_create_gem_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span><span class="o">*</span> <span class="n">file_priv</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_mode_create_dumb</span><span class="o">*</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">u32</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    
    <span class="k">struct</span> <span class="n">dumb_buffer_object</span>  <span class="o">*</span><span class="n">dumb_buffer_obj</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">drm_gem_object</span>   <span class="o">*</span><span class="n">gem_obj</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="n">size</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">((</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">bpp</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="n">PAGE_SIZE</span><span class="p">);</span>

    <span class="c1">//1. 分配buffer_obj</span>
    <span class="c1">//   可以在此处分配page,也可以在fault时再分配</span>
    <span class="n">dumb_buffer_obj</span> <span class="o">=</span> <span class="n">kzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">dumb_buffer_obj</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">roundup</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">PAGE_SIZE</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"page_size:%d"</span><span class="p">,</span><span class="n">size</span><span class="p">);</span>


    <span class="c1">// 2. 初始化dumb_buffer_obj内的drm_gem_object</span>
    <span class="n">gem_obj</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">gem_obj</span><span class="p">);</span>
    <span class="n">gem_obj</span><span class="o">-&gt;</span><span class="n">funcs</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">dumb_gem_obj_funcs</span><span class="p">;</span> <span class="cm">/* 设置该gem object的操作函数 */</span>
    
    <span class="n">drm_gem_object_init</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="n">gem_obj</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
    
    <span class="c1">// 3. 利用GEM方法生成一个gem_obj对应的handle</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">drm_gem_handle_create</span><span class="p">(</span><span class="n">file_priv</span><span class="p">,</span> <span class="n">gem_obj</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">handle</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">log</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">start_page</span> <span class="o">=</span> <span class="n">alloc_pages</span><span class="p">(</span><span class="n">GFP_KERNEL</span><span class="p">,</span> <span class="n">get_order</span><span class="p">(</span><span class="n">size</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">start_page</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"alloc_pages() failed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>

    <span class="c1">// 4. 赋值返回参数</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">size</span>  <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">pitch</span> <span class="o">=</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">width</span><span class="o">*</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">bpp</span><span class="o">/</span><span class="mi">8</span><span class="p">;</span> <span class="c1">//TODO: 应计算得到</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"create dumb_buffer_obj:%p success, return handle:%d"</span><span class="p">,</span> <span class="n">dumb_buffer_obj</span><span class="p">,</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">handle</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_map_offset_gem_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span><span class="o">*</span> <span class="n">file_priv</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">uint64_t</span><span class="o">*</span> <span class="n">offset</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"handle:%d"</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>
    
    <span class="c1">// 利用GEM方法得到一个offset</span>
    <span class="n">ret</span> <span class="o">=</span><span class="n">drm_gem_dumb_map_offset</span><span class="p">(</span><span class="n">file_priv</span><span class="p">,</span> <span class="n">dev</span><span class="p">,</span> <span class="n">handle</span><span class="p">,</span> <span class="n">offset</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"drm_gem_dumb_map_offset failed. ret:%d"</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">log</span><span class="p">(</span><span class="s">"get offset:0x%llx from drm_gem_dumb_map_offset()"</span><span class="p">,</span> <span class="o">*</span><span class="n">offset</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_release_gem_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span>     <span class="o">*</span><span class="n">file_priv</span><span class="p">,</span> 
                             <span class="k">struct</span> <span class="n">drm_device</span>   <span class="o">*</span><span class="n">dev</span><span class="p">,</span> 
                             <span class="n">u32</span> <span class="n">handle</span><span class="p">){</span>
    <span class="k">struct</span> <span class="n">drm_gem_object</span> <span class="o">*</span><span class="n">gem_obj</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">dumb_buffer_object</span> <span class="o">*</span><span class="n">dumb_buffer_obj</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
    <span class="n">gem_obj</span> <span class="o">=</span> <span class="n">drm_gem_object_lookup</span><span class="p">(</span><span class="n">file_priv</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>
    <span class="n">dumb_buffer_obj</span> <span class="o">=</span> <span class="n">DRM_GEM_OBJECT_TO_DUMB_BUFFER_OBJ</span><span class="p">(</span><span class="n">gem_obj</span><span class="p">);</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"free page:%p"</span><span class="p">,</span><span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">start_page</span><span class="p">);</span>

    <span class="n">free_pages</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">page_address</span><span class="p">(</span><span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">start_page</span><span class="p">),</span> <span class="n">get_order</span><span class="p">(</span><span class="n">dumb_buffer_obj</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">));</span>
    
    <span class="n">kfree</span><span class="p">(</span><span class="n">dumb_buffer_obj</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">drm_driver</span> <span class="n">dumb_driver</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">driver_features</span> <span class="o">=</span> <span class="n">DRIVER_GEM</span><span class="p">,</span>
    <span class="p">.</span><span class="n">fops</span>            <span class="o">=</span> <span class="o">&amp;</span><span class="n">dumb_driver_fops</span><span class="p">,</span>    
    <span class="p">.</span><span class="n">release</span>         <span class="o">=</span> <span class="n">dumb_release</span><span class="p">,</span>
    
    <span class="p">.</span><span class="n">dumb_create</span>     <span class="o">=</span> <span class="n">dumb_create_gem_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">dumb_map_offset</span> <span class="o">=</span> <span class="n">dumb_map_offset_gem_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">dumb_destroy</span>    <span class="o">=</span> <span class="n">dumb_release_gem_impl</span><span class="p">,</span>

    <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">DRIVER_NAME</span><span class="p">,</span>
    <span class="p">.</span><span class="n">desc</span> <span class="o">=</span> <span class="n">DRIVER_DESC</span><span class="p">,</span>
    <span class="p">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">DRIVER_DATE</span><span class="p">,</span>
    <span class="p">.</span><span class="n">major</span> <span class="o">=</span> <span class="n">DRIVER_MAJOR</span><span class="p">,</span>
    <span class="p">.</span><span class="n">minor</span> <span class="o">=</span> <span class="n">DRIVER_MINOR</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">dumb_drv_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">platform_device</span><span class="o">*</span> <span class="n">pdev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"build time: %s %s"</span><span class="p">,</span> <span class="n">__DATE__</span><span class="p">,</span> <span class="n">__TIME__</span><span class="p">);</span>

    <span class="n">pdev</span> <span class="o">=</span> <span class="n">platform_device_register_simple</span><span class="p">(</span><span class="n">DRIVER_NAME</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">pdev</span><span class="p">))</span> <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">devres_open_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">out_unregister</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">dumb_device</span> <span class="o">=</span> <span class="n">devm_drm_dev_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dumb_driver</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dumb_device</span><span class="p">,</span> <span class="n">drm</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">dumb_device</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">dumb_device</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out_devres</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">drm_dev_register</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">drm</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="k">goto</span> <span class="n">out_devres</span><span class="p">;</span>

    <span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span> <span class="o">=</span> <span class="n">pdev</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"Finish"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="nl">out_devres:</span>
    <span class="n">devres_release_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="nl">out_unregister:</span>
    <span class="n">platform_device_unregister</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">dumb_drv_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">platform_device</span> <span class="o">*</span><span class="n">pdev</span> <span class="o">=</span> <span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="n">drm_dev_unregister</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">drm</span><span class="p">);</span>
    <span class="n">devres_release_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">platform_device_unregister</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">dumb_drv_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">dumb_drv_exit</span><span class="p">);</span>

<span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">"kevin"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="n">DRIVER_DESC</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="2122-流程图">2.1.2.2 流程图</h4>
<p><img src="/blog/assets/DRM/DRM_DUMB_gem.svg" alt="drm_dumb_gem" /></p>
<h2 id="22-prime">2.2 PRIME</h2>

<p>PRIME 在 DRM 驱动中其实是一种buffer共享机制，它是基于 dma-buf 来实现的.</p>

<p>2010年2月9日，NVIDIA 官方发布了一项新的双显卡技术 —— <code class="language-plaintext highlighter-rouge">Optimus Technology</code>。该技术主要运用于带双显卡的笔记本（集成显卡+独立显卡），可以根据当前集成显卡的工作负载，自动的将一部分图形任务交给独立显卡去处理，以此来达到功耗和性能的最佳平衡。举例来说，一个带 Intel 集成显卡和 NVIDIA 独立显卡的笔记本，通常将集成显卡做为默认显卡，且充当了 Display Controller 的角色。当用户使用办公软件时，由于需要渲染的任务量不多，此时直接由 Intel 集成显卡来完成。而当用户玩3D游戏时，由于图形渲染的负载较重，此时系统会将部分或全部的任务交给 NVIDIA 独立显卡去处理，等处理完后再将结果送回给集成显卡做最后的合成显示。而这整个过程都是由软硬件自动完成的，中间无需人为干预，用户体验十分流畅。只可惜，该技术只能用在 Windows 系统上，Linux 系统不支持。</p>

<p>当时的 Linux 开源社区，Dave Airlie （RedHat Graphics 工程师，DRM 社区 maintainer）在业余时间里研究起 Optimus 技术，并琢磨着怎样在 Linux 平台上实现类似的功能。结果不到2周时间，他就做出了该方案的原型设计，并在自己的笔记本上（Intel集成显卡+ATI独立显卡）实现了该功能的验证。</p>

<p>他将这项技术命名为“PRIME”。 命名为<code class="language-plaintext highlighter-rouge">PRIME</code> 主要是映射<code class="language-plaintext highlighter-rouge">Optimus</code>
Optimus Prime 就是变形金刚 擎天柱的名字！ NVIDIA 当初给他们 Optimus 技术命名的精妙之处：擎天柱本身所具有的变形能力，形象的表达了 Optimus 这项技术可以在功耗和性能之间来回自由变换。 Dave 将他这项 Linux 下的技术命名为 “PRIME”，其实是很巧妙的玩了一把文字游戏，隐晦的告诉大家：DRM Prime 技术就是用来对标 NVIDIA Optimus 技术的。</p>

<h3 id="221-prime的实现">2.2.1 PRIME的实现</h3>

<p>为了实现设备间的buffer共享，需要有一套机制来导出、导入buffer。提供buffer的驱动负责导出buffer，使用buffer的设备导入buffer。 DMA_BUF已经提供了这样一套机制。 在DRM的实现中就使用了这套机制，具体是通过借助dmabuf fd来完成的。 导出buffer的驱动对外提供一个fd，来代表一个buffer， 而要使用这个buffer的其他设备驱动就通过这个fd导入buffer，从而访问该buffer。 在DRM中我们需要实现一定的DMA_BUF接口来支持buffer的导出、导入。</p>

<h4 id="2211-export驱动实现">2.2.1.1 export驱动实现</h4>

<p>在驱动的实现中主要添加 .prime_handle_to_fd 和 .prime_fd_to_handle_impl的实现。</p>

<table>
  <thead>
    <tr>
      <th>interface</th>
      <th>实现功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>prime_handle_to_fd</td>
      <td>需要实现buffer handle 到dmabuf fd的转换</td>
    </tr>
    <tr>
      <td>prime_fd_to_handle_impl</td>
      <td>需要实现dmabuf fd 到buffer handle的转换</td>
    </tr>
  </tbody>
</table>

<p>下面是支持buffer导出的简单实现. 在前面code的基础上添加了对dma-buf export的支持,主要是对struct dma_buf_ops的实现。</p>

<p>struct dma_buf_ops结构如下：</p>

<!-- ![dma_buf_ops](/blog/assets/DRM/dma_buf_ops.png) -->
<p><img src="/blog/assets/DRM/dma_buf_ops.png" width="300" /></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/platform_device.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/slab.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/dma-buf.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_drv.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_file.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;drm/drm_ioctl.h&gt;</span><span class="cp">
</span>
<span class="cp">#define DRIVER_NAME "drm prime driver"
#define DRIVER_DESC "test drm prime driver"
#define DRIVER_DATE "20191124"
#define DRIVER_MAJOR 1
#define DRIVER_MINOR 0
</span>
<span class="cp">#define log(fmt, args...) printk("%s():%d " fmt "\n", __func__, __LINE__, ##args)
#define err(fmt, args...) printk("\033[35m%s():%d " fmt "\033[0m\n", __func__, __LINE__, ##args)
</span>
<span class="k">struct</span> <span class="n">dumb_device</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">drm_device</span> <span class="n">drm</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">platform_device</span><span class="o">*</span> <span class="n">platform_dev</span><span class="p">;</span>
<span class="p">};</span>

<span class="cp">#define MAX_NUM 10
</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">dumb_device</span><span class="o">*</span> <span class="n">dumb_device</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">pages</span><span class="p">[</span><span class="n">MAX_NUM</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">static</span> <span class="n">u32</span> <span class="n">buffer_size</span><span class="p">[</span><span class="n">MAX_NUM</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">page_idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">prime_dmabuf_attach_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dma_buf_attachment</span><span class="o">*</span> <span class="n">attachment</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"attach dmabuf to device, return attachment"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">prime_dmabuf_detach_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dma_buf_attachment</span><span class="o">*</span> <span class="n">attachment</span><span class="p">)</span> <span class="p">{</span> <span class="n">log</span><span class="p">(</span><span class="s">"detach dmabuf"</span><span class="p">);</span> <span class="p">}</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">sg_table</span><span class="o">*</span> <span class="nf">prime_dmabuf_map_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf_attachment</span><span class="o">*</span> <span class="n">attachment</span><span class="p">,</span> <span class="k">enum</span> <span class="n">dma_data_direction</span> <span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="n">attachment</span><span class="o">-&gt;</span><span class="n">dmabuf</span><span class="o">-&gt;</span><span class="n">priv</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sg_table</span><span class="o">*</span> <span class="n">table</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"page:%p"</span><span class="p">,</span> <span class="n">page</span><span class="p">);</span>
    <span class="n">table</span> <span class="o">=</span> <span class="n">kmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">table</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">table</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">ERR_PTR</span><span class="p">(</span><span class="o">-</span><span class="n">ENOMEM</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 生成散列表并赋值</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">sg_alloc_table</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="n">kfree</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">ERR_PTR</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">sg_set_page</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">sgl</span><span class="p">,</span> <span class="n">page</span><span class="p">,</span> <span class="n">PAGE_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">sg_dma_address</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">sgl</span><span class="p">)</span> <span class="o">=</span> <span class="n">dma_map_page</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">),</span> <span class="n">page</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">PAGE_SIZE</span><span class="p">,</span> <span class="n">dir</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"map attachment into sg_table and return sg_table"</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">table</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">prime_dmabuf_unmap_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf_attachment</span><span class="o">*</span> <span class="n">attachment</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sg_table</span><span class="o">*</span> <span class="n">table</span><span class="p">,</span> <span class="k">enum</span> <span class="n">dma_data_direction</span> <span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">();</span>
    <span class="n">dma_unmap_page</span><span class="p">(</span><span class="n">attachment</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="n">sg_dma_address</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">sgl</span><span class="p">),</span> <span class="n">PAGE_SIZE</span><span class="p">,</span> <span class="n">dir</span><span class="p">);</span>
    <span class="n">sg_free_table</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
    <span class="n">kfree</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">prime_dmabuf_release_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="n">dma_buf</span><span class="o">-&gt;</span><span class="n">priv</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"put_page:%p"</span><span class="p">,</span> <span class="n">page</span><span class="p">);</span>
    <span class="n">put_page</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">prime_dmabuf_vmap_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dma_buf_map</span><span class="o">*</span> <span class="n">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">void</span><span class="o">*</span> <span class="n">vaddr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="n">dma_buf</span><span class="o">-&gt;</span><span class="n">priv</span><span class="p">;</span>

    <span class="n">vaddr</span> <span class="o">=</span> <span class="n">vmap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">page</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">PAGE_KERNEL</span><span class="p">);</span>
    <span class="n">dma_buf_map_set_vaddr</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">vaddr</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"mapping page:%p, get virtual addr:%p"</span><span class="p">,</span> <span class="n">page</span><span class="p">,</span> <span class="n">vaddr</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">prime_dmabuf_vunmap_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dma_buf_map</span><span class="o">*</span> <span class="n">map</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"unmapping addr:%p"</span><span class="p">,</span> <span class="n">map</span><span class="o">-&gt;</span><span class="n">vaddr</span><span class="p">);</span>
    <span class="n">vunmap</span><span class="p">(</span><span class="n">map</span><span class="o">-&gt;</span><span class="n">vaddr</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">prime_dmabuf_mmap_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">,</span> <span class="k">struct</span> <span class="n">vm_area_struct</span><span class="o">*</span> <span class="n">vma</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="n">dma_buf</span><span class="o">-&gt;</span><span class="n">priv</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">remap_pfn_range</span><span class="p">(</span><span class="n">vma</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_start</span><span class="p">,</span> <span class="n">page_to_pfn</span><span class="p">(</span><span class="n">page</span><span class="p">),</span> <span class="n">PAGE_SIZE</span><span class="p">,</span> <span class="n">vma</span><span class="o">-&gt;</span><span class="n">vm_page_prot</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">dma_buf_ops</span> <span class="n">exp_dmabuf_ops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">attach</span>         <span class="o">=</span> <span class="n">prime_dmabuf_attach_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">detach</span>         <span class="o">=</span> <span class="n">prime_dmabuf_detach_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">map_dma_buf</span>    <span class="o">=</span> <span class="n">prime_dmabuf_map_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">unmap_dma_buf</span>  <span class="o">=</span> <span class="n">prime_dmabuf_unmap_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">release</span>        <span class="o">=</span> <span class="n">prime_dmabuf_release_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">mmap</span>           <span class="o">=</span> <span class="n">prime_dmabuf_mmap_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">vmap</span>           <span class="o">=</span> <span class="n">prime_dmabuf_vmap_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">vunmap</span>         <span class="o">=</span> <span class="n">prime_dmabuf_vunmap_impl</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">prime_handle_to_fd_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_file</span><span class="o">*</span> <span class="n">file_priv</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">,</span>
                                        <span class="kt">int</span><span class="o">*</span> <span class="n">prime_fd</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DEFINE_DMA_BUF_EXPORT_INFO</span><span class="p">(</span><span class="n">exp_info</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dmabuf</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"dma_buf -&gt; page:%p"</span><span class="p">,</span> <span class="n">pages</span><span class="p">[</span><span class="n">handle</span><span class="p">]);</span>

    <span class="n">exp_info</span><span class="p">.</span><span class="n">ops</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="n">exp_dmabuf_ops</span><span class="p">;</span>
    <span class="n">exp_info</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">buffer_size</span><span class="p">[</span><span class="n">handle</span><span class="p">];</span>
    <span class="n">exp_info</span><span class="p">.</span><span class="n">flags</span><span class="o">=</span> <span class="n">O_CLOEXEC</span><span class="p">;</span>
    <span class="n">exp_info</span><span class="p">.</span><span class="n">priv</span> <span class="o">=</span> <span class="n">pages</span><span class="p">[</span><span class="n">handle</span><span class="p">];</span>  <span class="c1">// buffer和dmabuf建立关联</span>

    <span class="c1">// 构建一个dma_buf</span>
    <span class="n">dmabuf</span> <span class="o">=</span> <span class="n">dma_buf_export</span><span class="p">(</span><span class="o">&amp;</span><span class="n">exp_info</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 为该dma_buf生成fd</span>
    <span class="o">*</span><span class="n">prime_fd</span> <span class="o">=</span> <span class="n">dma_buf_fd</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="n">O_CLOEXEC</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">prime_fd</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">prime_fd_to_handle_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_file</span><span class="o">*</span> <span class="n">file_priv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prime_fd</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">*</span> <span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="n">dma_buf</span> <span class="o">=</span> <span class="n">dma_buf_get</span><span class="p">(</span><span class="n">prime_fd</span><span class="p">);</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">dma_buf</span><span class="o">-&gt;</span><span class="n">priv</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dma_buf</span><span class="o">-&gt;</span><span class="n">ops</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">exp_dmabuf_ops</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">MAX_NUM</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="n">page</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="o">*</span><span class="n">handle</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
        <span class="n">log</span><span class="p">(</span><span class="s">"return handle:%d"</span><span class="p">,</span> <span class="o">*</span><span class="n">handle</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">(</span><span class="s">"doesn't support"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">dma_buf_put</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">file_operations</span> <span class="n">dumb_driver_fops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">owner</span>          <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">open</span>           <span class="o">=</span> <span class="n">drm_open</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">release</span>        <span class="o">=</span> <span class="n">drm_release</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">unlocked_ioctl</span> <span class="o">=</span> <span class="n">drm_ioctl</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">compat_ioctl</span>   <span class="o">=</span> <span class="n">drm_compat_ioctl</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">dumb_release</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_device</span><span class="o">*</span> <span class="n">dev</span><span class="p">)</span> <span class="p">{</span> <span class="n">log</span><span class="p">();</span> <span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">dumb_create_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span>     <span class="o">*</span><span class="n">file_priv</span><span class="p">,</span> 
                            <span class="k">struct</span> <span class="n">drm_device</span>   <span class="o">*</span><span class="n">dev</span><span class="p">,</span> 
                            <span class="k">struct</span> <span class="n">drm_mode_create_dumb</span><span class="o">*</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">u32</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span><span class="n">page_idx</span><span class="o">&gt;=</span><span class="n">MAX_NUM</span><span class="p">){</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"only support alloc %d buffers"</span><span class="p">,</span> <span class="n">MAX_NUM</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">size</span> <span class="o">=</span> <span class="n">roundup</span><span class="p">((</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">bpp</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="n">PAGE_SIZE</span><span class="p">);</span>

    <span class="c1">// 分配页面</span>
    <span class="n">pages</span><span class="p">[</span><span class="n">page_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">alloc_pages</span><span class="p">(</span><span class="n">GFP_KERNEL</span><span class="p">,</span> <span class="n">get_order</span><span class="p">(</span><span class="n">size</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pages</span><span class="p">[</span><span class="n">page_idx</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">err</span><span class="p">(</span><span class="s">"alloc_pages() failed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">buffer_size</span><span class="p">[</span><span class="n">page_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>

    <span class="c1">// 赋值返回参数</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">size</span>    <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">pitch</span>   <span class="o">=</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">width</span> <span class="o">*</span> <span class="n">args</span><span class="o">-&gt;</span><span class="n">bpp</span><span class="o">/</span><span class="mi">8</span><span class="p">;</span>
    <span class="n">args</span><span class="o">-&gt;</span><span class="n">handle</span>  <span class="o">=</span> <span class="n">page_idx</span><span class="o">++</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span>  <span class="kt">int</span> <span class="nf">dumb_destroy_impl</span><span class="p">(</span><span class="k">struct</span> <span class="n">drm_file</span> <span class="o">*</span><span class="n">file_priv</span><span class="p">,</span> <span class="k">struct</span> <span class="n">drm_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">handle</span><span class="p">){</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"handle:%d"</span><span class="p">,</span> <span class="n">handle</span><span class="p">);</span>

    <span class="c1">//__free_pages(pages[handle], get_order(dumb_buffer_size[handle]));</span>
    <span class="n">free_pages</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">page_address</span><span class="p">(</span><span class="n">pages</span><span class="p">[</span><span class="n">handle</span><span class="p">]),</span> <span class="n">get_order</span><span class="p">(</span><span class="n">buffer_size</span><span class="p">[</span><span class="n">handle</span><span class="p">]));</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="k">struct</span> <span class="n">drm_driver</span> <span class="n">dumb_driver</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">release</span> <span class="o">=</span> <span class="n">dumb_release</span><span class="p">,</span>
    <span class="p">.</span><span class="n">fops</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">dumb_driver_fops</span><span class="p">,</span>

    <span class="p">.</span><span class="n">dumb_create</span>  <span class="o">=</span> <span class="n">dumb_create_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">dumb_destroy</span> <span class="o">=</span> <span class="n">dumb_destroy_impl</span><span class="p">,</span>

    <span class="p">.</span><span class="n">prime_handle_to_fd</span> <span class="o">=</span> <span class="n">prime_handle_to_fd_impl</span><span class="p">,</span>
    <span class="p">.</span><span class="n">prime_fd_to_handle</span> <span class="o">=</span> <span class="n">prime_fd_to_handle_impl</span><span class="p">,</span>  <span class="c1">//其他驱动分配的dma_buf导入到DRM系统</span>

    <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">DRIVER_NAME</span><span class="p">,</span>
    <span class="p">.</span><span class="n">desc</span> <span class="o">=</span> <span class="n">DRIVER_DESC</span><span class="p">,</span>
    <span class="p">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">DRIVER_DATE</span><span class="p">,</span>
    <span class="p">.</span><span class="n">major</span> <span class="o">=</span> <span class="n">DRIVER_MAJOR</span><span class="p">,</span>
    <span class="p">.</span><span class="n">minor</span> <span class="o">=</span> <span class="n">DRIVER_MINOR</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">dumb_drv_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">platform_device</span><span class="o">*</span> <span class="n">pdev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"build time: %s %s"</span><span class="p">,</span> <span class="n">__DATE__</span><span class="p">,</span> <span class="n">__TIME__</span><span class="p">);</span>

    <span class="n">pdev</span> <span class="o">=</span> <span class="n">platform_device_register_simple</span><span class="p">(</span><span class="n">DRIVER_NAME</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">pdev</span><span class="p">))</span> <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">devres_open_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">GFP_KERNEL</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">out_unregister</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 分配</span>
    <span class="n">dumb_device</span> <span class="o">=</span> <span class="n">devm_drm_dev_alloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dumb_driver</span><span class="p">,</span> <span class="k">struct</span> <span class="n">dumb_device</span><span class="p">,</span> <span class="n">drm</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">dumb_device</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">dumb_device</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">out_devres</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 注册</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">drm_dev_register</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">drm</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span><span class="p">)</span> <span class="k">goto</span> <span class="n">out_devres</span><span class="p">;</span>

    <span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span> <span class="o">=</span> <span class="n">pdev</span><span class="p">;</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"Finish"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="nl">out_devres:</span>
    <span class="n">devres_release_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

<span class="nl">out_unregister:</span>
    <span class="n">platform_device_unregister</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">dumb_drv_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">platform_device</span> <span class="o">*</span><span class="n">pdev</span> <span class="o">=</span> <span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">platform_dev</span><span class="p">;</span>
    <span class="n">log</span><span class="p">();</span>

    <span class="n">drm_dev_unregister</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dumb_device</span><span class="o">-&gt;</span><span class="n">drm</span><span class="p">);</span>
    <span class="n">devres_release_group</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pdev</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">platform_device_unregister</span><span class="p">(</span><span class="n">pdev</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="n">module_init</span><span class="p">(</span><span class="n">dumb_drv_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">dumb_drv_exit</span><span class="p">);</span>

<span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">"kevin"</span><span class="p">);</span>
<span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="n">DRIVER_DESC</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL"</span><span class="p">);</span>
</code></pre></div></div>
<h4 id="2211-import驱动实现">2.2.1.1 import驱动实现</h4>

<p>import dmabuf 的驱动部分实现较为简单，主要是对下列函数的调用,这些函数正好和上面struct dma_buf_ops的实现相对应。</p>

<table>
  <thead>
    <tr>
      <th>function</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dma_buf_get</td>
      <td>由fd得到对应的struct dma_buf</td>
    </tr>
    <tr>
      <td>dma_buf_attach</td>
      <td>attach dmabuf 到一个设备，得到一个 dma_buf_attachment</td>
    </tr>
    <tr>
      <td>dma_buf_map_attachment</td>
      <td>把一个dmabuf映射到一个设备的地址空间</td>
    </tr>
    <tr>
      <td>dma_buf_unmap_attachment</td>
      <td>取消dmabuf在设备地址空间的映射</td>
    </tr>
    <tr>
      <td>dma_buf_detach</td>
      <td>取消与设备的关联</td>
    </tr>
  </tbody>
</table>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/dma-buf.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/miscdevice.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/slab.h&gt;</span><span class="cp">
</span>
<span class="cp">#define log(fmt, args...) printk("%s():%d " fmt "\n", __func__, __LINE__, ##args)
</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">test_dma_buf</span><span class="p">(</span><span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">dma_buf_attachment</span><span class="o">*</span> <span class="n">attachment</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sg_table</span><span class="o">*</span> <span class="n">table</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">device</span><span class="o">*</span> <span class="n">dev</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">reg_addr</span><span class="p">,</span> <span class="n">reg_size</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">scatterlist</span><span class="o">*</span> <span class="n">sg</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dma_buf</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">dev</span> <span class="o">=</span> <span class="n">kzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">dev</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">dev_set_name</span><span class="p">(</span><span class="n">dev</span><span class="p">,</span> <span class="s">"importer"</span><span class="p">);</span>

    <span class="n">attachment</span> <span class="o">=</span> <span class="n">dma_buf_attach</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">attachment</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">pr_err</span><span class="p">(</span><span class="s">"dma_buf_attach() failed</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">attachment</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"call dma_buf_map_attachment to get sg_table"</span><span class="p">);</span>
    <span class="n">table</span> <span class="o">=</span> <span class="n">dma_buf_map_attachment</span><span class="p">(</span><span class="n">attachment</span><span class="p">,</span> <span class="n">DMA_BIDIRECTIONAL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">table</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">pr_err</span><span class="p">(</span><span class="s">"dma_buf_map_attachment() failed</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">dma_buf_detach</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">,</span> <span class="n">attachment</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"table-&gt;nents:%d"</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">nents</span><span class="p">);</span>

    <span class="n">sg</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">sgl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">nents</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">reg_addr</span> <span class="o">=</span> <span class="n">sg_dma_address</span><span class="p">(</span><span class="n">sg</span><span class="p">);</span>
        <span class="n">reg_size</span> <span class="o">=</span> <span class="n">sg_dma_len</span><span class="p">(</span><span class="n">sg</span><span class="p">);</span>
        <span class="n">page</span> <span class="o">=</span> <span class="n">sg_page</span><span class="p">(</span><span class="n">sg</span><span class="p">);</span>
        <span class="n">log</span><span class="p">(</span><span class="s">"addr = 0x%08x, size = 0x%08x  %p %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">reg_addr</span><span class="p">,</span> <span class="n">reg_size</span><span class="p">,</span> <span class="n">page</span><span class="p">,</span> <span class="n">page_address</span><span class="p">(</span><span class="n">page</span><span class="p">));</span>
        <span class="n">sg</span> <span class="o">=</span> <span class="n">sg_next</span><span class="p">(</span><span class="n">sg</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// do something on dma-buf</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"unmap and detach dma_buf"</span><span class="p">);</span>
    <span class="n">dma_buf_unmap_attachment</span><span class="p">(</span><span class="n">attachment</span><span class="p">,</span> <span class="n">table</span><span class="p">,</span> <span class="n">DMA_BIDIRECTIONAL</span><span class="p">);</span>
    <span class="n">dma_buf_detach</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">,</span> <span class="n">attachment</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">long</span> <span class="nf">importer_ioctl</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span><span class="o">*</span> <span class="n">filp</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">cmd</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">dma_buf</span><span class="o">*</span> <span class="n">dma_buf</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">copy_from_user</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="n">__user</span><span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)))</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">(</span><span class="s">"copy_from_user() failed"</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="n">EFAULT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">dma_buf</span> <span class="o">=</span> <span class="n">dma_buf_get</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"get dma_buf:%p by fd:%d"</span><span class="p">,</span> <span class="n">dma_buf</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">log</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">test_dma_buf</span><span class="p">(</span><span class="n">dma_buf</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">file_operations</span> <span class="n">importer_fops</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">THIS_MODULE</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">unlocked_ioctl</span> <span class="o">=</span> <span class="n">importer_ioctl</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">miscdevice</span> <span class="n">mdev</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">minor</span> <span class="o">=</span> <span class="n">MISC_DYNAMIC_MINOR</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">name</span>  <span class="o">=</span> <span class="s">"importer"</span><span class="p">,</span> 
    <span class="p">.</span><span class="n">fops</span>  <span class="o">=</span> <span class="o">&amp;</span><span class="n">importer_fops</span><span class="p">,</span>
<span class="p">};</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">importer_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">misc_register</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mdev</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">importer_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="p">();</span>
    <span class="n">misc_deregister</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mdev</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">module_init</span><span class="p">(</span><span class="n">importer_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">importer_exit</span><span class="p">);</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"GPL v2"</span><span class="p">);</span>
</code></pre></div></div>
<h4 id="2211-进程间分享fd">2.2.1.1 进程间分享fd</h4>
<p>如果要不同设备中共享buffer，就需要导入dmabuf到不同的设备中，这就涉及到一个fd共享的问题。我们知道fd是和进程相关的，每个进程都有它自己的文件描述符表，不同进程的fd表是不同的。所以不能把一个进程的fd直接传递给另一个进程中使用，需要通过一定的方法来共享fd，也就是fd的跨进程传递。 这个方法就是UNIX域的socket接口。
代码如下：</p>

<p>发送方代码：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define SHARE_DMABUF_PATH "./share_dmabuf_file"
</span><span class="k">static</span> <span class="kt">void</span> <span class="nf">send_fd</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">iovec</span> <span class="n">iov</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

    <span class="n">iov</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">iov_base</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>
    <span class="n">iov</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">iov_len</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">sockfd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sockaddr_un</span> <span class="n">addr</span><span class="p">;</span>
    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>

    <span class="n">addr</span><span class="p">.</span><span class="n">sun_family</span> <span class="o">=</span> <span class="n">AF_UNIX</span><span class="p">;</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="n">sun_path</span><span class="p">,</span> <span class="n">SHARE_DMABUF_PATH</span><span class="p">);</span>

    <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_UNIX</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">sockfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"socket error"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"connect() failed"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">cmsgsize</span> <span class="o">=</span> <span class="n">CMSG_LEN</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
    <span class="k">struct</span> <span class="n">cmsghdr</span><span class="o">*</span> <span class="n">cmptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">cmsghdr</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">cmsgsize</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">cmptr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
        <span class="n">err_exit</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">cmptr</span><span class="o">-&gt;</span><span class="n">cmsg_level</span> <span class="o">=</span> <span class="n">SOL_SOCKET</span><span class="p">;</span>
    <span class="n">cmptr</span><span class="o">-&gt;</span><span class="n">cmsg_type</span>  <span class="o">=</span> <span class="n">SCM_RIGHTS</span><span class="p">;</span>
    <span class="n">cmptr</span><span class="o">-&gt;</span><span class="n">cmsg_len</span>   <span class="o">=</span> <span class="n">cmsgsize</span><span class="p">;</span>

    <span class="k">struct</span> <span class="n">msghdr</span> <span class="n">msg</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iov</span>     <span class="o">=</span> <span class="n">iov</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iovlen</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_name</span>    <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_control</span> <span class="o">=</span> <span class="n">cmptr</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_controllen</span> <span class="o">=</span> <span class="n">cmsgsize</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">CMSG_DATA</span><span class="p">(</span><span class="n">cmptr</span><span class="p">)</span> <span class="o">=</span> <span class="n">fd</span><span class="p">;</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">sendmsg</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"sendmsg() failed."</span><span class="p">);</span>
        <span class="n">err_exit</span><span class="p">();</span>
    <span class="p">}</span>    
    <span class="n">free</span><span class="p">(</span><span class="n">cmptr</span><span class="p">);</span>
    <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>    
<span class="p">}</span>
</code></pre></div></div>

<p>接收方代码</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">recv_fd</span><span class="p">(</span><span class="kt">int</span> <span class="n">sock</span><span class="p">)</span>
<span class="p">{</span>    
    <span class="k">struct</span> <span class="n">cmsghdr</span><span class="o">*</span> <span class="n">pcmsg</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">union</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">cmsghdr</span> <span class="n">cm</span><span class="p">;</span>
        <span class="kt">char</span> <span class="n">control</span><span class="p">[</span><span class="n">CMSG_SPACE</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))];</span>
    <span class="p">}</span> <span class="n">control_un</span><span class="p">;</span>

    <span class="kt">char</span> <span class="n">buf</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">iovec</span> <span class="n">iov</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">iov</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">iov_base</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">;</span>
    <span class="n">iov</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">iov_len</span>  <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>

    <span class="k">struct</span> <span class="n">msghdr</span> <span class="n">msg</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iov</span> <span class="o">=</span> <span class="n">iov</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iovlen</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_name</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_control</span> <span class="o">=</span> <span class="n">control_un</span><span class="p">.</span><span class="n">control</span><span class="p">;</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">msg_controllen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">control_un</span><span class="p">.</span><span class="n">control</span><span class="p">);;</span>

    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">recvmsg</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>    
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\033</span><span class="s">[31m%s:%d sock:%d err:%m </span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span><span class="n">__func__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">,</span> <span class="n">sock</span><span class="p">);</span> 
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">pcmsg</span> <span class="o">=</span> <span class="n">CMSG_FIRSTHDR</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">CMSG_DATA</span><span class="p">(</span><span class="n">pcmsg</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">recv_prime_fd_from_socket</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">sockfd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sockaddr_un</span> <span class="n">addr</span><span class="p">;</span>
    <span class="n">unlink</span><span class="p">(</span><span class="n">SHARE_DMABUF_PATH</span><span class="p">);</span>
    <span class="n">addr</span><span class="p">.</span><span class="n">sun_family</span> <span class="o">=</span> <span class="n">AF_UNIX</span><span class="p">;</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="n">sun_path</span><span class="p">,</span> <span class="n">SHARE_DMABUF_PATH</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">prime_fd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">clientfd</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sockaddr</span> <span class="n">cliaddr</span><span class="p">;</span>
    <span class="n">socklen_t</span> <span class="n">clilen</span><span class="p">;</span>

    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="n">sun_path</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">.</span><span class="n">sun_family</span><span class="p">);</span>
    <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_UNIX</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">sockfd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"socket error"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"bind error"</span><span class="p">);</span>
        <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">listen</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="n">clientfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clilen</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">clientfd</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span>
        <span class="n">log</span><span class="p">(</span><span class="s">"clientfd:%d %m"</span><span class="p">,</span> <span class="n">clientfd</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">prime_fd</span> <span class="o">=</span> <span class="n">recv_fd</span><span class="p">(</span><span class="n">clientfd</span><span class="p">);</span>

    <span class="n">log</span><span class="p">(</span><span class="s">"Recv prime_fd: %d"</span><span class="p">,</span> <span class="n">prime_fd</span><span class="p">);</span>

   <span class="k">return</span> <span class="n">prime_fd</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="2212-测试程序">2.2.1.2 测试程序</h4>

<p>基于上述进程间分享fd的方法，结合PRIME export和import驱动实现，可以写出如下测试PRIME的code</p>

<p>导出 prime 部分</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;xf86drm.h&gt;</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/un.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SHARE_DMABUF_PATH "./tt"
</span>
<span class="cp">#define log(fmt, args...) printf("%s():%d " fmt "\n", __func__, __LINE__, ##args)
</span>
<span class="cp">#define err_return(fmt, args...) do{ \
    printf("%s():%d " fmt "\n", __func__, __LINE__, ##args); \
    return -1;\
}while(0)
</span>
<span class="cp">#define err_exit(fmt, args...) do{ \
    printf("%s():%d " fmt "\n", __func__, __LINE__, ##args); \
    exit(1);\
}while(0)
</span>
<span class="k">struct</span> <span class="n">buffer_object</span> <span class="p">{</span>
    <span class="kt">uint32_t</span> <span class="n">width</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">height</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">pitch</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">handle</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">size</span><span class="p">;</span>
    <span class="kt">int</span>      <span class="n">prime_fd</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">buffer_object</span> <span class="n">buf</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">create_dumb_get_prime_fd</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">buffer_object</span> <span class="o">*</span><span class="n">bo</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    
    <span class="k">struct</span> <span class="n">drm_mode_create_dumb</span> <span class="n">create</span> <span class="o">=</span> <span class="p">{};</span>    

    <span class="n">create</span><span class="p">.</span><span class="n">width</span>  <span class="o">=</span> <span class="n">bo</span><span class="o">-&gt;</span><span class="n">width</span><span class="p">;</span>
    <span class="n">create</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bo</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">;</span>
    <span class="n">create</span><span class="p">.</span><span class="n">bpp</span>    <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="mi">8</span><span class="p">;</span> <span class="c1">//ARGB</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">drmIoctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">DRM_IOCTL_MODE_CREATE_DUMB</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">create</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err_return</span><span class="p">(</span><span class="s">"drmIoctl(DRM_IOCTL_MODE_CREATE_DUMB) failed"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">drmPrimeHandleToFD</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">create</span><span class="p">.</span><span class="n">handle</span><span class="p">,</span> <span class="n">DRM_CLOEXEC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bo</span><span class="o">-&gt;</span><span class="n">prime_fd</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err_return</span><span class="p">(</span><span class="s">"drmPrimeHandleToFD() failed"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">bo</span><span class="o">-&gt;</span><span class="n">handle</span> <span class="o">=</span> <span class="n">create</span><span class="p">.</span><span class="n">handle</span><span class="p">;</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"get handle:%d prime fd:%d"</span><span class="p">,</span> <span class="n">create</span><span class="p">.</span><span class="n">handle</span><span class="p">,</span> <span class="n">bo</span><span class="o">-&gt;</span><span class="n">prime_fd</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">destroy_fd</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">buffer_object</span> <span class="o">*</span><span class="n">bo</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">handle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">struct</span> <span class="n">drm_mode_destroy_dumb</span> <span class="n">destroy</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">drmPrimeFDToHandle</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">bo</span><span class="o">-&gt;</span><span class="n">prime_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">handle</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="p">){</span>
        <span class="n">err_exit</span><span class="p">(</span><span class="s">"drmFDToPrimeHandle() failed"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">log</span><span class="p">(</span><span class="s">"handle:%d vs bo-&gt;handle:%d"</span><span class="p">,</span> <span class="n">handle</span><span class="p">,</span> <span class="n">bo</span><span class="o">-&gt;</span><span class="n">handle</span><span class="p">);</span>
    <span class="n">destroy</span><span class="p">.</span><span class="n">handle</span> <span class="o">=</span> <span class="n">handle</span><span class="p">;</span>

    <span class="n">drmIoctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">DRM_IOCTL_MODE_DESTROY_DUMB</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">destroy</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>

    <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"/dev/dri/card0"</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CLOEXEC</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fd</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s():%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">buf</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
    <span class="n">buf</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">create_dumb_get_prime_fd</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span>

    <span class="n">send_fd</span><span class="p">(</span><span class="n">buf</span><span class="p">.</span><span class="n">prime_fd</span><span class="p">);</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"press any key to exit</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">getchar</span><span class="p">();</span>
    
    <span class="n">destroy_fd</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span>

    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>导入prime 部分</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/un.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/ioctl.h&gt;</span><span class="cp">
</span>
<span class="cp">#define log(fmt, args...) printf("%s():%d " fmt "\n", __func__, __LINE__, ##args)
#define SHARE_DMABUF_PATH "./tt"
</span>

<span class="cp">#define err_return(fmt, args...) do{ \
    printf("%s():%d " fmt "\n", __func__, __LINE__, ##args); \
    return -1;\
}while(0)
</span>
<span class="cp">#define err_return_void(fmt, args...) do{ \
    printf("%s():%d " fmt "\n", __func__, __LINE__, ##args); \
    return;\
}while(0)
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">prime_fd</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"/dev/importer"</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CLOEXEC</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">fd</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s():%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">prime_fd</span> <span class="o">=</span> <span class="n">recv_prime_fd_from_socket</span><span class="p">();</span>

    <span class="c1">// 把fd传递给import驱动进行访问</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">prime_fd</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span>
        <span class="n">err_return</span><span class="p">(</span><span class="s">"ioctl failed"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">close</span><span class="p">(</span><span class="n">prime_fd</span><span class="p">);</span>
    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="23-系统现有的两种实现">2.3 系统现有的两种实现</h2>
<h3 id="231-share-memory">2.3.1 share memory</h3>
<h3 id="232-cma">2.3.2 CMA</h3>

<h1 id="三kms的相关">三、KMS的相关</h1>
<h2 id="31-传统实现">3.1 传统实现</h2>
<h2 id="32-atomic实现">3.2 atomic实现</h2>]]></content><author><name>kevin</name></author><category term="DRM" /><summary type="html"><![CDATA[一、DRM总述]]></summary></entry></feed>